
GGK641_V_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da0  08006da0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da8  08006da8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000070  08006e20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08006e20  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015865  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002656  00000000  00000000  00035905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00037f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  000392b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002510e  00000000  00000000  0003a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015631  00000000  00000000  0005f636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9878  00000000  00000000  00074c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e4df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005894  00000000  00000000  0015e530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d04 	.word	0x08006d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006d04 	.word	0x08006d04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b974 	b.w	8000dfc <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	468e      	mov	lr, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14d      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	d969      	bls.n	8000c14 <__udivmoddi4+0xe8>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b152      	cbz	r2, 8000b5c <__udivmoddi4+0x30>
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	f1c2 0120 	rsb	r1, r2, #32
 8000b4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b56:	ea41 0e03 	orr.w	lr, r1, r3
 8000b5a:	4094      	lsls	r4, r2
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	0c21      	lsrs	r1, r4, #16
 8000b62:	fbbe f6f8 	udiv	r6, lr, r8
 8000b66:	fa1f f78c 	uxth.w	r7, ip
 8000b6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b72:	fb06 f107 	mul.w	r1, r6, r7
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b82:	f080 811f 	bcs.w	8000dc4 <__udivmoddi4+0x298>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 811c 	bls.w	8000dc4 <__udivmoddi4+0x298>
 8000b8c:	3e02      	subs	r6, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b98:	fb08 3310 	mls	r3, r8, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 f707 	mul.w	r7, r0, r7
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	d90a      	bls.n	8000bbe <__udivmoddi4+0x92>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb0:	f080 810a 	bcs.w	8000dc8 <__udivmoddi4+0x29c>
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	f240 8107 	bls.w	8000dc8 <__udivmoddi4+0x29c>
 8000bba:	4464      	add	r4, ip
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	1be4      	subs	r4, r4, r7
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	b11d      	cbz	r5, 8000bd0 <__udivmoddi4+0xa4>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd0:	4631      	mov	r1, r6
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xc2>
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	f000 80ef 	beq.w	8000dbe <__udivmoddi4+0x292>
 8000be0:	2600      	movs	r6, #0
 8000be2:	e9c5 0100 	strd	r0, r1, [r5]
 8000be6:	4630      	mov	r0, r6
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f683 	clz	r6, r3
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d14a      	bne.n	8000c8c <__udivmoddi4+0x160>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd4>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80f9 	bhi.w	8000df2 <__udivmoddi4+0x2c6>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	469e      	mov	lr, r3
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa4>
 8000c0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xec>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 8092 	bne.w	8000d46 <__udivmoddi4+0x21a>
 8000c22:	eba1 010c 	sub.w	r1, r1, ip
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2601      	movs	r6, #1
 8000c30:	0c20      	lsrs	r0, r4, #16
 8000c32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c36:	fb07 1113 	mls	r1, r7, r3, r1
 8000c3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3e:	fb0e f003 	mul.w	r0, lr, r3
 8000c42:	4288      	cmp	r0, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x12c>
 8000c46:	eb1c 0101 	adds.w	r1, ip, r1
 8000c4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x12a>
 8000c50:	4288      	cmp	r0, r1
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2c0>
 8000c56:	4643      	mov	r3, r8
 8000c58:	1a09      	subs	r1, r1, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c60:	fb07 1110 	mls	r1, r7, r0, r1
 8000c64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x156>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x154>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c80:	4608      	mov	r0, r1
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c8a:	e79c      	b.n	8000bc6 <__udivmoddi4+0x9a>
 8000c8c:	f1c6 0720 	rsb	r7, r6, #32
 8000c90:	40b3      	lsls	r3, r6
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	40f9      	lsrs	r1, r7
 8000ca6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000caa:	fa00 f306 	lsl.w	r3, r0, r6
 8000cae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cb2:	0c20      	lsrs	r0, r4, #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b8>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2bc>
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2bc>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cec:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	458e      	cmp	lr, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1e2>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2b4>
 8000d06:	458e      	cmp	lr, r1
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2b4>
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d12:	fba0 9402 	umull	r9, r4, r0, r2
 8000d16:	eba1 010e 	sub.w	r1, r1, lr
 8000d1a:	42a1      	cmp	r1, r4
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46a6      	mov	lr, r4
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x2a4>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x2a0>
 8000d24:	b15d      	cbz	r5, 8000d3e <__udivmoddi4+0x212>
 8000d26:	ebb3 0208 	subs.w	r2, r3, r8
 8000d2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d32:	fa22 f306 	lsr.w	r3, r2, r6
 8000d36:	40f1      	lsrs	r1, r6
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3e:	2600      	movs	r6, #0
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	f1c2 0320 	rsb	r3, r2, #32
 8000d4a:	40d8      	lsrs	r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	fa21 f303 	lsr.w	r3, r1, r3
 8000d54:	4091      	lsls	r1, r2
 8000d56:	4301      	orrs	r1, r0
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d64:	fb07 3610 	mls	r6, r7, r0, r3
 8000d68:	0c0b      	lsrs	r3, r1, #16
 8000d6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d72:	429e      	cmp	r6, r3
 8000d74:	fa04 f402 	lsl.w	r4, r4, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x260>
 8000d7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b8>
 8000d84:	429e      	cmp	r6, r3
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b8>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	b289      	uxth	r1, r1
 8000d90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d94:	fb07 3316 	mls	r3, r7, r6, r3
 8000d98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x28a>
 8000da4:	eb1c 0101 	adds.w	r1, ip, r1
 8000da8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000db2:	3e02      	subs	r6, #2
 8000db4:	4461      	add	r1, ip
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0x104>
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e705      	b.n	8000bd0 <__udivmoddi4+0xa4>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e3      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6f8      	b.n	8000bbe <__udivmoddi4+0x92>
 8000dcc:	454b      	cmp	r3, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f8>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f8>
 8000ddc:	4646      	mov	r6, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x28a>
 8000de0:	4620      	mov	r0, r4
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1e2>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x260>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b8>
 8000dec:	3b02      	subs	r3, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x12c>
 8000df2:	4630      	mov	r0, r6
 8000df4:	e709      	b.n	8000c0a <__udivmoddi4+0xde>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x156>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <SSPI_Write>:
void SSPI_Write(uint8_t adress, uint8_t data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SSPI_Write(uint8_t adress, uint8_t data) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	71bb      	strb	r3, [r7, #6]
//	__disable_irq();
//	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	uint8_t data_buffer[2]; // Создаем буфер из двух байтов для хранения данных типа uint16_t

// Копируем данные типа uint16_t в буфер
	data_buffer[0] = adress; // Младший байт
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	733b      	strb	r3, [r7, #12]
	data_buffer[1] = data; // Старший байт
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <SSPI_Write+0x44>)
 8000e1e:	f002 fc0d 	bl	800363c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data_buffer, sizeof(data_buffer),1000);
 8000e22:	f107 010c 	add.w	r1, r7, #12
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	4806      	ldr	r0, [pc, #24]	; (8000e48 <SSPI_Write+0x48>)
 8000e2e:	f003 feba 	bl	8004ba6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2101      	movs	r1, #1
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <SSPI_Write+0x44>)
 8000e38:	f002 fc00 	bl	800363c <HAL_GPIO_WritePin>
//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
//	__enable_irq();
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	48000400 	.word	0x48000400
 8000e48:	20000104 	.word	0x20000104
 8000e4c:	00000000 	.word	0x00000000

08000e50 <setValuePD_OUT>:
float setValuePD_OUT() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000e56:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <setValuePD_OUT+0x78>)
 8000e58:	f001 f95c 	bl	8002114 <HAL_ADC_Start>
	// нужно дождаться конца преобразования.
	HAL_ADC_PollForConversion(&hadc1, 1);
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <setValuePD_OUT+0x78>)
 8000e60:	f001 f9ee 	bl	8002240 <HAL_ADC_PollForConversion>
	// Возьмем результат и сохраним его в переменную
	float u = ((float) HAL_ADC_GetValue(&hadc1)) * 3.3 / 4096;
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <setValuePD_OUT+0x78>)
 8000e66:	f001 fa7a 	bl	800235e <HAL_ADC_GetValue>
 8000e6a:	ee07 0a90 	vmov	s15, r0
 8000e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e72:	ee17 0a90 	vmov	r0, s15
 8000e76:	f7ff fb5f 	bl	8000538 <__aeabi_f2d>
 8000e7a:	a311      	add	r3, pc, #68	; (adr r3, 8000ec0 <setValuePD_OUT+0x70>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff fbb2 	bl	80005e8 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <setValuePD_OUT+0x7c>)
 8000e92:	f7ff fcd3 	bl	800083c <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fddd 	bl	8000a5c <__aeabi_d2f>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	607b      	str	r3, [r7, #4]
	// Остановим преобразования
	HAL_ADC_Stop(&hadc1);
 8000ea6:	4808      	ldr	r0, [pc, #32]	; (8000ec8 <setValuePD_OUT+0x78>)
 8000ea8:	f001 f997 	bl	80021da <HAL_ADC_Stop>
	return u;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	ee07 3a90 	vmov	s15, r3
}
 8000eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	66666666 	.word	0x66666666
 8000ec4:	400a6666 	.word	0x400a6666
 8000ec8:	2000008c 	.word	0x2000008c
 8000ecc:	40b00000 	.word	0x40b00000

08000ed0 <push>:
void push(uint32_t *arr) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 256; ++i) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e015      	b.n	8000f0a <push+0x3a>
		char result[5];
		sprintf(result, "%ld\r\n", arr[i]);
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	490b      	ldr	r1, [pc, #44]	; (8000f1c <push+0x4c>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f005 fa9a 	bl	8006428 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) result, sizeof(result),
 8000ef4:	f107 010c 	add.w	r1, r7, #12
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	2205      	movs	r2, #5
 8000efe:	4808      	ldr	r0, [pc, #32]	; (8000f20 <push+0x50>)
 8000f00:	f004 fdc2 	bl	8005a88 <HAL_UART_Transmit>
	for (int i = 0; i < 256; ++i) {
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3301      	adds	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	dde6      	ble.n	8000ede <push+0xe>
		HAL_MAX_DELAY);
	}
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08006d1c 	.word	0x08006d1c
 8000f20:	200001b4 	.word	0x200001b4

08000f24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f28:	f000 fcfd 	bl	8001926 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f2c:	f000 f80d 	bl	8000f4a <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_ADC1_Init();
 8000f30:	f000 f85a 	bl	8000fe8 <MX_ADC1_Init>
	MX_GPIO_Init();
 8000f34:	f000 f9ce 	bl	80012d4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000f38:	f000 f8fe 	bl	8001138 <MX_SPI1_Init>
	MX_DAC1_Init();
 8000f3c:	f000 f8b8 	bl	80010b0 <MX_DAC1_Init>
	MX_USART2_UART_Init();
 8000f40:	f000 f998 	bl	8001274 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000f44:	f000 f93c 	bl	80011c0 <MX_TIM2_Init>
//  uint8_t flag = 1;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f48:	e7fe      	b.n	8000f48 <main+0x24>

08000f4a <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b096      	sub	sp, #88	; 0x58
 8000f4e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2244      	movs	r2, #68	; 0x44
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fa5d 	bl	8006418 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f70:	f002 fbae 	bl	80036d0 <HAL_PWREx_ControlVoltageScaling>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000f7a:	f000 fa09 	bl	8001390 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f86:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000f94:	230a      	movs	r3, #10
 8000f96:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fbe7 	bl	800377c <HAL_RCC_OscConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <SystemClock_Config+0x6e>
		Error_Handler();
 8000fb4:	f000 f9ec 	bl	8001390 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fb8:	230f      	movs	r3, #15
 8000fba:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 ffe7 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x96>
		Error_Handler();
 8000fdc:	f000 f9d8 	bl	8001390 <Error_Handler>
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3758      	adds	r7, #88	; 0x58
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000ffe:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001000:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <MX_ADC1_Init+0xc0>)
 8001002:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC1_Init+0xbc>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0xbc>)
 800101e:	2204      	movs	r2, #4
 8001020:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001024:	2200      	movs	r2, #0
 8001026:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001030:	2201      	movs	r2, #1
 8001032:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001044:	2200      	movs	r2, #0
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0xbc>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001052:	2200      	movs	r2, #0
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_ADC1_Init+0xbc>)
 8001060:	f000 ff10 	bl	8001e84 <HAL_ADC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x86>
		Error_Handler();
 800106a:	f000 f991 	bl	8001390 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ADC1_Init+0xc4>)
 8001070:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001072:	2306      	movs	r3, #6
 8001074:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107a:	237f      	movs	r3, #127	; 0x7f
 800107c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107e:	2304      	movs	r3, #4
 8001080:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0xbc>)
 800108c:	f001 f974 	bl	8002378 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xb2>
		Error_Handler();
 8001096:	f000 f97b 	bl	8001390 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000008c 	.word	0x2000008c
 80010a8:	50040000 	.word	0x50040000
 80010ac:	21800100 	.word	0x21800100

080010b0 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80010b6:	463b      	mov	r3, r7
 80010b8:	2224      	movs	r2, #36	; 0x24
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f005 f9ab 	bl	8006418 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_DAC1_Init+0x80>)
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <MX_DAC1_Init+0x84>)
 80010c6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <MX_DAC1_Init+0x80>)
 80010ca:	f001 ff8e 	bl	8002fea <HAL_DAC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_DAC1_Init+0x28>
		Error_Handler();
 80010d4:	f000 f95c 	bl	8001390 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	603b      	str	r3, [r7, #0]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	4619      	mov	r1, r3
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <MX_DAC1_Init+0x80>)
 80010f4:	f002 f80d 	bl	8003112 <HAL_DAC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_DAC1_Init+0x52>
		Error_Handler();
 80010fe:	f000 f947 	bl	8001390 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

//	 Установка значения для выходного напряжения 3.3V
	uint32_t dac_value = (uint32_t) (4095 * 2 / 3.3);
 8001102:	f640 13b1 	movw	r3, #2481	; 0x9b1
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <MX_DAC1_Init+0x80>)
 8001110:	f001 ffda 	bl	80030c8 <HAL_DAC_SetValue>
	// Запуск преобразования ЦАП
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001114:	2100      	movs	r1, #0
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_DAC1_Init+0x80>)
 8001118:	f001 ff89 	bl	800302e <HAL_DAC_Start>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_DAC1_Init+0x76>
		Error_Handler();
 8001122:	f000 f935 	bl	8001390 <Error_Handler>
	}
	/* USER CODE END DAC1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000f0 	.word	0x200000f0
 8001134:	40007400 	.word	0x40007400

08001138 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_SPI1_Init+0x80>)
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_SPI1_Init+0x84>)
 8001140:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001148:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_SPI1_Init+0x80>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001152:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001156:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_SPI1_Init+0x80>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_SPI1_Init+0x80>)
 800116e:	2218      	movs	r2, #24
 8001170:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_SPI1_Init+0x80>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001180:	2200      	movs	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001186:	2207      	movs	r2, #7
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_SPI1_Init+0x80>)
 800118c:	2200      	movs	r2, #0
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001192:	2208      	movs	r2, #8
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <MX_SPI1_Init+0x80>)
 8001198:	f003 fc62 	bl	8004a60 <HAL_SPI_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80011a2:	f000 f8f5 	bl	8001390 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
//	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	SSPI_Write(0x00, 0x20);
 80011a6:	2120      	movs	r1, #32
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fe29 	bl	8000e00 <SSPI_Write>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011ae:	2006      	movs	r0, #6
 80011b0:	f001 fef3 	bl	8002f9a <HAL_NVIC_EnableIRQ>
	/* USER CODE END SPI1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000104 	.word	0x20000104
 80011bc:	40013000 	.word	0x40013000

080011c0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_TIM2_Init+0xb0>)
 80011e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 65535;
 80011e6:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_TIM2_Init+0xb0>)
 80011e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ec:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_TIM2_Init+0xb0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12204;
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_TIM2_Init+0xb0>)
 80011f6:	f642 72ac 	movw	r2, #12204	; 0x2fac
 80011fa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_TIM2_Init+0xb0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_TIM2_Init+0xb0>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001208:	4819      	ldr	r0, [pc, #100]	; (8001270 <MX_TIM2_Init+0xb0>)
 800120a:	f003 ff9f 	bl	800514c <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0x58>
		Error_Handler();
 8001214:	f000 f8bc 	bl	8001390 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4619      	mov	r1, r3
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_TIM2_Init+0xb0>)
 8001226:	f004 f95c 	bl	80054e2 <HAL_TIM_ConfigClockSource>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x74>
		Error_Handler();
 8001230:	f000 f8ae 	bl	8001390 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <MX_TIM2_Init+0xb0>)
 8001242:	f004 fb47 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 800124c:	f000 f8a0 	bl	8001390 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM2_Init+0xb0>)
 8001252:	f003 ffd3 	bl	80051fc <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	201c      	movs	r0, #28
 800125c:	f001 fe81 	bl	8002f62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001260:	201c      	movs	r0, #28
 8001262:	f001 fe9a 	bl	8002f9a <HAL_NVIC_EnableIRQ>
	/* USER CODE END TIM2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000168 	.word	0x20000168

08001274 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800127a:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <MX_USART2_UART_Init+0x5c>)
 800127c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200; // 14.400 байт в секунду
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_USART2_UART_Init+0x58>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_USART2_UART_Init+0x58>)
 80012b8:	f004 fb90 	bl	80059dc <HAL_HalfDuplex_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80012c2:	f000 f865 	bl	8001390 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200001b4 	.word	0x200001b4
 80012d0:	40004400 	.word	0x40004400

080012d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_GPIO_Init+0xb8>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_GPIO_Init+0xb8>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_GPIO_Init+0xb8>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_GPIO_Init+0xb8>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <MX_GPIO_Init+0xb8>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_GPIO_Init+0xb8>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_GPIO_Init+0xb8>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a1b      	ldr	r2, [pc, #108]	; (800138c <MX_GPIO_Init+0xb8>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_GPIO_Init+0xb8>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PD_RESET_GPIO_Port, PD_RESET_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2120      	movs	r1, #32
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f002 f97f 	bl	800363c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : INP_TRHD_Pin */
	GPIO_InitStruct.Pin = INP_TRHD_Pin;
 800133e:	2301      	movs	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001342:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001346:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(INP_TRHD_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f001 fff7 	bl	8003348 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD_RESET_Pin */
	GPIO_InitStruct.Pin = PD_RESET_Pin;
 800135a:	2320      	movs	r3, #32
 800135c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(PD_RESET_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f001 ffe8 	bl	8003348 <HAL_GPIO_Init>

	/* EXTI interrupt init*/

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	2006      	movs	r0, #6
 800137e:	f001 fdf0 	bl	8002f62 <HAL_NVIC_SetPriority>
//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001398:	e7fe      	b.n	8001398 <Error_Handler+0x8>
	...

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_MspInit+0x44>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_MspInit+0x44>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6613      	str	r3, [r2, #96]	; 0x60
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_MspInit+0x44>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_MspInit+0x44>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_MspInit+0x44>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6593      	str	r3, [r2, #88]	; 0x58
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_MspInit+0x44>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0a2      	sub	sp, #136	; 0x88
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2260      	movs	r2, #96	; 0x60
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f005 f807 	bl	8006418 <memset>
  if(hadc->Instance==ADC1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_ADC_MspInit+0xa4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d134      	bne.n	800147e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001414:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001418:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800141a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800141e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4618      	mov	r0, r3
 8001426:	f002 ffdf 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001430:	f7ff ffae 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_ADC_MspInit+0xa8>)
 800143a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800143e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_ADC_MspInit+0xa8>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_ADC_MspInit+0xa8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_ADC_MspInit+0xa8>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = PD_OUT_Pin;
 8001464:	2308      	movs	r3, #8
 8001466:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001468:	230b      	movs	r3, #11
 800146a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(PD_OUT_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147a:	f001 ff65 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3788      	adds	r7, #136	; 0x88
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	50040000 	.word	0x50040000
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a15      	ldr	r2, [pc, #84]	; (8001504 <HAL_DAC_MspInit+0x74>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d124      	bne.n	80014fc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_DAC_MspInit+0x78>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <HAL_DAC_MspInit+0x78>)
 80014b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_DAC_MspInit+0x78>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_DAC_MspInit+0x78>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_DAC_MspInit+0x78>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_DAC_MspInit+0x78>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_1_Pin;
 80014e2:	2310      	movs	r3, #16
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_1_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f8:	f001 ff26 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40007400 	.word	0x40007400
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <HAL_SPI_MspInit+0xb4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d144      	bne.n	80015b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_SPI_MspInit+0xb8>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001576:	2382      	movs	r3, #130	; 0x82
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001586:	2305      	movs	r3, #5
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f001 fed8 	bl	8003348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001598:	2301      	movs	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a8:	2305      	movs	r3, #5
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_SPI_MspInit+0xbc>)
 80015b4:	f001 fec8 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40013000 	.word	0x40013000
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000400 	.word	0x48000400

080015cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015dc:	d113      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	201c      	movs	r0, #28
 80015fc:	f001 fcb1 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001600:	201c      	movs	r0, #28
 8001602:	f001 fcca 	bl	8002f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0a2      	sub	sp, #136	; 0x88
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2260      	movs	r2, #96	; 0x60
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f004 feef 	bl	8006418 <memset>
  if(huart->Instance==USART2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <HAL_UART_MspInit+0xac>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d138      	bne.n	80016b6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001644:	2302      	movs	r3, #2
 8001646:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fec9 	bl	80043e8 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800165c:	f7ff fe98 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <HAL_UART_MspInit+0xb0>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <HAL_UART_MspInit+0xb0>)
 8001666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0xb0>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_UART_MspInit+0xb0>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_UART_MspInit+0xb0>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_UART_MspInit+0xb0>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001690:	2304      	movs	r3, #4
 8001692:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001694:	2312      	movs	r3, #18
 8001696:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a2:	2307      	movs	r3, #7
 80016a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f001 fe49 	bl	8003348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3788      	adds	r7, #136	; 0x88
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40004400 	.word	0x40004400
 80016c4:	40021000 	.word	0x40021000

080016c8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001714:	f000 f95c 	bl	80019d0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001720:	2006      	movs	r0, #6
 8001722:	f001 fc48 	bl	8002fb6 <HAL_NVIC_DisableIRQ>
	checkValueArr(WorkValue);
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <EXTI0_IRQHandler+0x38>)
 8001728:	f000 f84b 	bl	80017c2 <checkValueArr>
	HAL_GPIO_WritePin(GPIOA, PD_RESET_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2120      	movs	r1, #32
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f001 ff82 	bl	800363c <HAL_GPIO_WritePin>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001738:	2006      	movs	r0, #6
 800173a:	f001 fc2e 	bl	8002f9a <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(GPIOA, PD_RESET_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2120      	movs	r1, #32
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f001 ff79 	bl	800363c <HAL_GPIO_WritePin>
	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INP_TRHD_Pin);
 800174a:	2001      	movs	r0, #1
 800174c:	f001 ff8e 	bl	800366c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000238 	.word	0x20000238

08001758 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800175c:	2006      	movs	r0, #6
 800175e:	f001 fc2a 	bl	8002fb6 <HAL_NVIC_DisableIRQ>
	push(WorkValue);
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <TIM2_IRQHandler+0x2c>)
 8001764:	f7ff fbb4 	bl	8000ed0 <push>
	memset(WorkValue, 0, sizeof(WorkValue));
 8001768:	f240 4204 	movw	r2, #1028	; 0x404
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <TIM2_IRQHandler+0x2c>)
 8001770:	f004 fe52 	bl	8006418 <memset>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001774:	2006      	movs	r0, #6
 8001776:	f001 fc10 	bl	8002f9a <HAL_NVIC_EnableIRQ>
	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <TIM2_IRQHandler+0x30>)
 800177c:	f003 fd92 	bl	80052a4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000238 	.word	0x20000238
 8001788:	20000168 	.word	0x20000168

0800178c <upArrayIndex>:

/* USER CODE BEGIN 1 */
void upArrayIndex(uint32_t *arr, uint8_t index) {
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
	uint32_t checkCurrentIndex = arr[index];
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
	checkCurrentIndex++;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
	arr[index] = checkCurrentIndex;
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <checkValueArr>:
void checkValueArr(uint32_t *arr) {
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	uint8_t val = ConvertFloatToInt(setValuePD_OUT());
 80017ca:	f7ff fb41 	bl	8000e50 <setValuePD_OUT>
 80017ce:	eef0 7a40 	vmov.f32	s15, s0
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	f000 f80b 	bl	80017f0 <ConvertFloatToInt>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]
	upArrayIndex(arr, val);
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ffd2 	bl	800178c <upArrayIndex>
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <ConvertFloatToInt>:

uint8_t ConvertFloatToInt(float inputValue) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	ed87 0a01 	vstr	s0, [r7, #4]
	int result = inputValue * 255 / 3.3;
 80017fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001840 <ConvertFloatToInt+0x50>
 8001802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001806:	ee17 0a90 	vmov	r0, s15
 800180a:	f7fe fe95 	bl	8000538 <__aeabi_f2d>
 800180e:	a30a      	add	r3, pc, #40	; (adr r3, 8001838 <ConvertFloatToInt+0x48>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7ff f812 	bl	800083c <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff f8f4 	bl	8000a0c <__aeabi_d2iz>
 8001824:	4603      	mov	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]
	uint8_t ret = result & 0xFF;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	72fb      	strb	r3, [r7, #11]
	return ret;
 800182c:	7afb      	ldrb	r3, [r7, #11]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	66666666 	.word	0x66666666
 800183c:	400a6666 	.word	0x400a6666
 8001840:	437f0000 	.word	0x437f0000

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f004 fda6 	bl	80063c4 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20010000 	.word	0x20010000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	2000063c 	.word	0x2000063c
 80018ac:	20000658 	.word	0x20000658

080018b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800190c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d8:	f7ff ffea 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	; (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	; (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f004 fd65 	bl	80063d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001906:	f7ff fb0d 	bl	8000f24 <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800190c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001918:	08006db0 	.word	0x08006db0
  ldr r2, =_sbss
 800191c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001920:	20000654 	.word	0x20000654

08001924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_IRQHandler>

08001926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f001 fb0b 	bl	8002f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	200f      	movs	r0, #15
 8001938:	f000 f80e 	bl	8001958 <HAL_InitTick>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	e001      	b.n	800194c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001948:	f7ff fd28 	bl	800139c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800194c:	79fb      	ldrb	r3, [r7, #7]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_InitTick+0x6c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d023      	beq.n	80019b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_InitTick+0x70>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_InitTick+0x6c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fb25 	bl	8002fd2 <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d809      	bhi.n	80019a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f001 fae1 	bl	8002f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_InitTick+0x74>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e007      	b.n	80019b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
 80019ac:	e004      	b.n	80019b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e001      	b.n	80019b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000640 	.word	0x20000640

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000640 	.word	0x20000640

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	609a      	str	r2, [r3, #8]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	609a      	str	r2, [r3, #8]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3360      	adds	r3, #96	; 0x60
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <LL_ADC_SetOffset+0x44>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	03fff000 	.word	0x03fff000

08001b08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3360      	adds	r3, #96	; 0x60
 8001b16:	461a      	mov	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3360      	adds	r3, #96	; 0x60
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3330      	adds	r3, #48	; 0x30
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	211f      	movs	r1, #31
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0e9b      	lsrs	r3, r3, #26
 8001bc8:	f003 011f 	and.w	r1, r3, #31
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bdc:	bf00      	nop
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0e5b      	lsrs	r3, r3, #25
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	0d1b      	lsrs	r3, r3, #20
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	2107      	movs	r1, #7
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0d1b      	lsrs	r3, r3, #20
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0318 	and.w	r3, r3, #24
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c64:	40d9      	lsrs	r1, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	400b      	ands	r3, r1
 8001c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	0007ffff 	.word	0x0007ffff

08001c88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6093      	str	r3, [r2, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc0:	d101      	bne.n	8001cc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d10:	d101      	bne.n	8001d16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d60:	f043 0202 	orr.w	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <LL_ADC_IsEnabled+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_ADC_IsEnabled+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d101      	bne.n	8001db2 <LL_ADC_IsDisableOngoing+0x18>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_ADC_IsDisableOngoing+0x1a>
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd4:	f043 0204 	orr.w	r2, r3, #4
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d101      	bne.n	8001e28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e4a:	f043 0220 	orr.w	r2, r3, #32
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d101      	bne.n	8001e76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e12c      	b.n	80020f8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fa99 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fef1 	bl	8001cac <LL_ADC_IsDeepPowerDownEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fed7 	bl	8001c88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff0c 	bl	8001cfc <LL_ADC_IsInternalRegulatorEnabled>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d115      	bne.n	8001f16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fef0 	bl	8001cd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef4:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_ADC_Init+0x27c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	4a82      	ldr	r2, [pc, #520]	; (8002104 <HAL_ADC_Init+0x280>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	099b      	lsrs	r3, r3, #6
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f9      	bne.n	8001f0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff feee 	bl	8001cfc <LL_ADC_IsInternalRegulatorEnabled>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f043 0210 	orr.w	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff62 	bl	8001e10 <LL_ADC_REG_IsConversionOngoing>
 8001f4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 80c5 	bne.w	80020e6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f040 80c1 	bne.w	80020e6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f6c:	f043 0202 	orr.w	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fefb 	bl	8001d74 <LL_ADC_IsEnabled>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10b      	bne.n	8001f9c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f84:	4860      	ldr	r0, [pc, #384]	; (8002108 <HAL_ADC_Init+0x284>)
 8001f86:	f7ff fef5 	bl	8001d74 <LL_ADC_IsEnabled>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4619      	mov	r1, r3
 8001f96:	485d      	ldr	r0, [pc, #372]	; (800210c <HAL_ADC_Init+0x288>)
 8001f98:	f7ff fd5e 	bl	8001a58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e5b      	ldrb	r3, [r3, #25]
 8001fa0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fb2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d106      	bne.n	8001fd8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	045b      	lsls	r3, r3, #17
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4b45      	ldr	r3, [pc, #276]	; (8002110 <HAL_ADC_Init+0x28c>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	69b9      	ldr	r1, [r7, #24]
 8002004:	430b      	orrs	r3, r1
 8002006:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff feff 	bl	8001e10 <LL_ADC_REG_IsConversionOngoing>
 8002012:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff20 	bl	8001e5e <LL_ADC_INJ_IsConversionOngoing>
 800201e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d13d      	bne.n	80020a2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d13a      	bne.n	80020a2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002030:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002038:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002048:	f023 0302 	bic.w	r3, r3, #2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	69b9      	ldr	r1, [r7, #24]
 8002052:	430b      	orrs	r3, r1
 8002054:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800205c:	2b01      	cmp	r3, #1
 800205e:	d118      	bne.n	8002092 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002082:	430a      	orrs	r2, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	e007      	b.n	80020a2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10c      	bne.n	80020c4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f023 010f 	bic.w	r1, r3, #15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
 80020c2:	e007      	b.n	80020d4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 020f 	bic.w	r2, r2, #15
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f023 0303 	bic.w	r3, r3, #3
 80020dc:	f043 0201 	orr.w	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000000 	.word	0x20000000
 8002104:	053e2d63 	.word	0x053e2d63
 8002108:	50040000 	.word	0x50040000
 800210c:	50040300 	.word	0x50040300
 8002110:	fff0c007 	.word	0xfff0c007

08002114 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe75 	bl	8001e10 <LL_ADC_REG_IsConversionOngoing>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d14f      	bne.n	80021cc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Start+0x26>
 8002136:	2302      	movs	r3, #2
 8002138:	e04b      	b.n	80021d2 <HAL_ADC_Start+0xbe>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fd28 	bl	8002b98 <ADC_Enable>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d137      	bne.n	80021c2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	d106      	bne.n	8002182 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f023 0206 	bic.w	r2, r3, #6
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	659a      	str	r2, [r3, #88]	; 0x58
 8002180:	e002      	b.n	8002188 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	221c      	movs	r2, #28
 800218e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe00 	bl	8001dc0 <LL_ADC_REG_StartConversion>
 80021c0:	e006      	b.n	80021d0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80021ca:	e001      	b.n	80021d0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_Stop+0x16>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e023      	b.n	8002238 <HAL_ADC_Stop+0x5e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021f8:	2103      	movs	r1, #3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fc10 	bl	8002a20 <ADC_ConversionStop>
 8002200:	4603      	mov	r3, r0
 8002202:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d111      	bne.n	800222e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fd4a 	bl	8002ca4 <ADC_Disable>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d102      	bne.n	8002258 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002252:	2308      	movs	r3, #8
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e010      	b.n	800227a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06f      	b.n	8002356 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002276:	2304      	movs	r3, #4
 8002278:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800227a:	f7ff fbbd 	bl	80019f8 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002280:	e021      	b.n	80022c6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d01d      	beq.n	80022c6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800228a:	f7ff fbb5 	bl	80019f8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d302      	bcc.n	80022a0 <HAL_ADC_PollForConversion+0x60>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d112      	bne.n	80022c6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10b      	bne.n	80022c6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	f043 0204 	orr.w	r2, r3, #4
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e047      	b.n	8002356 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0d6      	beq.n	8002282 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fc40 	bl	8001b6a <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d118      	bne.n	800232a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b08      	cmp	r3, #8
 8002304:	d111      	bne.n	800232a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f043 0201 	orr.w	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d104      	bne.n	8002342 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2208      	movs	r2, #8
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e008      	b.n	8002354 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	220c      	movs	r2, #12
 8002352:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0a6      	sub	sp, #152	; 0x98
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x22>
 8002396:	2302      	movs	r3, #2
 8002398:	e338      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x694>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fd32 	bl	8001e10 <LL_ADC_REG_IsConversionOngoing>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 831d 	bne.w	80029ee <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d824      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	3b02      	subs	r3, #2
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d81b      	bhi.n	80023fe <HAL_ADC_ConfigChannel+0x86>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <HAL_ADC_ConfigChannel+0x54>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023e5 	.word	0x080023e5
 80023d4:	080023ed 	.word	0x080023ed
 80023d8:	080023f5 	.word	0x080023f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	220c      	movs	r2, #12
 80023e0:	605a      	str	r2, [r3, #4]
          break;
 80023e2:	e011      	b.n	8002408 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2212      	movs	r2, #18
 80023e8:	605a      	str	r2, [r3, #4]
          break;
 80023ea:	e00d      	b.n	8002408 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2218      	movs	r2, #24
 80023f0:	605a      	str	r2, [r3, #4]
          break;
 80023f2:	e009      	b.n	8002408 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023fa:	605a      	str	r2, [r3, #4]
          break;
 80023fc:	e004      	b.n	8002408 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2206      	movs	r2, #6
 8002402:	605a      	str	r2, [r3, #4]
          break;
 8002404:	e000      	b.n	8002408 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002406:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	f7ff fbbb 	bl	8001b90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fcf6 	bl	8001e10 <LL_ADC_REG_IsConversionOngoing>
 8002424:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fd16 	bl	8001e5e <LL_ADC_INJ_IsConversionOngoing>
 8002432:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 8148 	bne.w	80026d0 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8143 	bne.w	80026d0 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff fbc6 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	08db      	lsrs	r3, r3, #3
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d00a      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800248e:	f7ff fb17 	bl	8001ac0 <LL_ADC_SetOffset>
 8002492:	e11d      	b.n	80026d0 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fb34 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x148>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fb29 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	f003 021f 	and.w	r2, r3, #31
 80024be:	e012      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x16e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fb1e 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x186>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	e00a      	b.n	8002514 <HAL_ADC_ConfigChannel+0x19c>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800250c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002514:	429a      	cmp	r2, r3
 8002516:	d106      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fb07 	bl	8001b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff faeb 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x1da>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fae0 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	e010      	b.n	8002574 <HAL_ADC_ConfigChannel+0x1fc>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fad5 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_ConfigChannel+0x214>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	e00a      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x22a>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800259a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d106      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	2101      	movs	r1, #1
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fac0 	bl	8001b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2102      	movs	r1, #2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff faa4 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x268>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2102      	movs	r1, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fa99 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	0e9b      	lsrs	r3, r3, #26
 80025da:	f003 021f 	and.w	r2, r3, #31
 80025de:	e010      	b.n	8002602 <HAL_ADC_ConfigChannel+0x28a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2102      	movs	r1, #2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fa8e 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 80025ec:	4603      	mov	r3, r0
 80025ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80025f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_ADC_ConfigChannel+0x2a2>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	e00a      	b.n	8002630 <HAL_ADC_ConfigChannel+0x2b8>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	2102      	movs	r1, #2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fa79 	bl	8001b34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2103      	movs	r1, #3
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fa5d 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <HAL_ADC_ConfigChannel+0x2f6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2103      	movs	r1, #3
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fa52 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	e010      	b.n	8002690 <HAL_ADC_ConfigChannel+0x318>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2103      	movs	r1, #3
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fa47 	bl	8001b08 <LL_ADC_GetOffsetChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x330>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	e00a      	b.n	80026be <HAL_ADC_ConfigChannel+0x346>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80026b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b8:	fab3 f383 	clz	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026be:	429a      	cmp	r2, r3
 80026c0:	d106      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	2103      	movs	r1, #3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fa32 	bl	8001b34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fb4d 	bl	8001d74 <LL_ADC_IsEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f040 810c 	bne.w	80028fa <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f7ff faa6 	bl	8001c40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4aa8      	ldr	r2, [pc, #672]	; (800299c <HAL_ADC_ConfigChannel+0x624>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	f040 80fd 	bne.w	80028fa <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x3b0>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	3301      	adds	r3, #1
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	2b09      	cmp	r3, #9
 800271e:	bf94      	ite	ls
 8002720:	2301      	movls	r3, #1
 8002722:	2300      	movhi	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	e012      	b.n	800274e <HAL_ADC_ConfigChannel+0x3d6>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2b09      	cmp	r3, #9
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274e:	2b00      	cmp	r3, #0
 8002750:	d064      	beq.n	800281c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_ADC_ConfigChannel+0x3f6>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	3301      	adds	r3, #1
 8002766:	069b      	lsls	r3, r3, #26
 8002768:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800276c:	e00e      	b.n	800278c <HAL_ADC_ConfigChannel+0x414>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800277c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	069b      	lsls	r3, r3, #26
 8002788:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x434>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	3301      	adds	r3, #1
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	e010      	b.n	80027ce <HAL_ADC_ConfigChannel+0x456>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	ea42 0103 	orr.w	r1, r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10a      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x47c>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 021f 	and.w	r2, r3, #31
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	051b      	lsls	r3, r3, #20
 80027f2:	e011      	b.n	8002818 <HAL_ADC_ConfigChannel+0x4a0>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002818:	430b      	orrs	r3, r1
 800281a:	e069      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x4c0>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	3301      	adds	r3, #1
 8002830:	069b      	lsls	r3, r3, #26
 8002832:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002836:	e00e      	b.n	8002856 <HAL_ADC_ConfigChannel+0x4de>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	61fb      	str	r3, [r7, #28]
  return result;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	069b      	lsls	r3, r3, #26
 8002852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x4fe>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	3301      	adds	r3, #1
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	e010      	b.n	8002898 <HAL_ADC_ConfigChannel+0x520>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	617b      	str	r3, [r7, #20]
  return result;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	ea42 0103 	orr.w	r1, r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x54c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	3301      	adds	r3, #1
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	3b1e      	subs	r3, #30
 80028bc:	051b      	lsls	r3, r3, #20
 80028be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028c2:	e014      	b.n	80028ee <HAL_ADC_ConfigChannel+0x576>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	60fb      	str	r3, [r7, #12]
  return result;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	3b1e      	subs	r3, #30
 80028e8:	051b      	lsls	r3, r3, #20
 80028ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ee:	430b      	orrs	r3, r1
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f7ff f977 	bl	8001be8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_ADC_ConfigChannel+0x628>)
 8002900:	4013      	ands	r3, r2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d07c      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002906:	4827      	ldr	r0, [pc, #156]	; (80029a4 <HAL_ADC_ConfigChannel+0x62c>)
 8002908:	f7ff f8cc 	bl	8001aa4 <LL_ADC_GetCommonPathInternalCh>
 800290c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a24      	ldr	r2, [pc, #144]	; (80029a8 <HAL_ADC_ConfigChannel+0x630>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d127      	bne.n	800296a <HAL_ADC_ConfigChannel+0x5f2>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800291a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d121      	bne.n	800296a <HAL_ADC_ConfigChannel+0x5f2>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a20      	ldr	r2, [pc, #128]	; (80029ac <HAL_ADC_ConfigChannel+0x634>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d167      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002938:	4619      	mov	r1, r3
 800293a:	481a      	ldr	r0, [pc, #104]	; (80029a4 <HAL_ADC_ConfigChannel+0x62c>)
 800293c:	f7ff f89f 	bl	8001a7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_ADC_ConfigChannel+0x638>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_ADC_ConfigChannel+0x63c>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800295a:	e002      	b.n	8002962 <HAL_ADC_ConfigChannel+0x5ea>
          {
            wait_loop_index--;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3b01      	subs	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <HAL_ADC_ConfigChannel+0x5e4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002968:	e04a      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <HAL_ADC_ConfigChannel+0x640>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d123      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x644>
 8002974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11d      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_ADC_ConfigChannel+0x634>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d13a      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	4619      	mov	r1, r3
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <HAL_ADC_ConfigChannel+0x62c>)
 8002996:	f7ff f872 	bl	8001a7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800299a:	e031      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
 800299c:	407f0000 	.word	0x407f0000
 80029a0:	80080000 	.word	0x80080000
 80029a4:	50040300 	.word	0x50040300
 80029a8:	c7520000 	.word	0xc7520000
 80029ac:	50040000 	.word	0x50040000
 80029b0:	20000000 	.word	0x20000000
 80029b4:	053e2d63 	.word	0x053e2d63
 80029b8:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <HAL_ADC_ConfigChannel+0x69c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d11c      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <HAL_ADC_ConfigChannel+0x6a0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d111      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029e4:	4619      	mov	r1, r3
 80029e6:	480d      	ldr	r0, [pc, #52]	; (8002a1c <HAL_ADC_ConfigChannel+0x6a4>)
 80029e8:	f7ff f849 	bl	8001a7e <LL_ADC_SetCommonPathInternalCh>
 80029ec:	e008      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3798      	adds	r7, #152	; 0x98
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	80000001 	.word	0x80000001
 8002a18:	50040000 	.word	0x50040000
 8002a1c:	50040300 	.word	0x50040300

08002a20 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff f9ea 	bl	8001e10 <LL_ADC_REG_IsConversionOngoing>
 8002a3c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fa0b 	bl	8001e5e <LL_ADC_INJ_IsConversionOngoing>
 8002a48:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d103      	bne.n	8002a58 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8098 	beq.w	8002b88 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d02a      	beq.n	8002abc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7e5b      	ldrb	r3, [r3, #25]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d126      	bne.n	8002abc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7e1b      	ldrb	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d122      	bne.n	8002abc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a7a:	e014      	b.n	8002aa6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <ADC_ConversionStop+0x174>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d90d      	bls.n	8002aa0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a88:	f043 0210 	orr.w	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e074      	b.n	8002b8a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d1e3      	bne.n	8002a7c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2240      	movs	r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d014      	beq.n	8002aec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f9a2 	bl	8001e10 <LL_ADC_REG_IsConversionOngoing>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f95f 	bl	8001d9a <LL_ADC_IsDisableOngoing>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d104      	bne.n	8002aec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f97e 	bl	8001de8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d014      	beq.n	8002b1c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f9b1 	bl	8001e5e <LL_ADC_INJ_IsConversionOngoing>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f947 	bl	8001d9a <LL_ADC_IsDisableOngoing>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f98d 	bl	8001e36 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d005      	beq.n	8002b2e <ADC_ConversionStop+0x10e>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d105      	bne.n	8002b34 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b28:	230c      	movs	r3, #12
 8002b2a:	617b      	str	r3, [r7, #20]
        break;
 8002b2c:	e005      	b.n	8002b3a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b2e:	2308      	movs	r3, #8
 8002b30:	617b      	str	r3, [r7, #20]
        break;
 8002b32:	e002      	b.n	8002b3a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b34:	2304      	movs	r3, #4
 8002b36:	617b      	str	r3, [r7, #20]
        break;
 8002b38:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b3a:	f7fe ff5d 	bl	80019f8 <HAL_GetTick>
 8002b3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b40:	e01b      	b.n	8002b7a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b42:	f7fe ff59 	bl	80019f8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d914      	bls.n	8002b7a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e007      	b.n	8002b8a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1dc      	bne.n	8002b42 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3720      	adds	r7, #32
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	a33fffff 	.word	0xa33fffff

08002b98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f8e3 	bl	8001d74 <LL_ADC_IsEnabled>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d169      	bne.n	8002c88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <ADC_Enable+0xfc>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e055      	b.n	8002c8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff f89e 	bl	8001d24 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002be8:	482b      	ldr	r0, [pc, #172]	; (8002c98 <ADC_Enable+0x100>)
 8002bea:	f7fe ff5b 	bl	8001aa4 <LL_ADC_GetCommonPathInternalCh>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <ADC_Enable+0x104>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <ADC_Enable+0x108>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c12:	e002      	b.n	8002c1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c20:	f7fe feea 	bl	80019f8 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c26:	e028      	b.n	8002c7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f8a1 	bl	8001d74 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f871 	bl	8001d24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c42:	f7fe fed9 	bl	80019f8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d914      	bls.n	8002c7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d00d      	beq.n	8002c7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e007      	b.n	8002c8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d1cf      	bne.n	8002c28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	8000003f 	.word	0x8000003f
 8002c98:	50040300 	.word	0x50040300
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	053e2d63 	.word	0x053e2d63

08002ca4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f872 	bl	8001d9a <LL_ADC_IsDisableOngoing>
 8002cb6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f859 	bl	8001d74 <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d047      	beq.n	8002d58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d144      	bne.n	8002d58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030d 	and.w	r3, r3, #13
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d10c      	bne.n	8002cf6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff f833 	bl	8001d4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2203      	movs	r2, #3
 8002cec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cee:	f7fe fe83 	bl	80019f8 <HAL_GetTick>
 8002cf2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf4:	e029      	b.n	8002d4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e023      	b.n	8002d5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d12:	f7fe fe71 	bl	80019f8 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d914      	bls.n	8002d4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e007      	b.n	8002d5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1dc      	bne.n	8002d12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db12      	blt.n	8002e3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	490a      	ldr	r1, [pc, #40]	; (8002e48 <__NVIC_DisableIRQ+0x44>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	3320      	adds	r3, #32
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e30:	f3bf 8f4f 	dsb	sy
}
 8002e34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e36:	f3bf 8f6f 	isb	sy
}
 8002e3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
         );
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f18:	d301      	bcc.n	8002f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00f      	b.n	8002f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <SysTick_Config+0x40>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f26:	210f      	movs	r1, #15
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f7ff ff8e 	bl	8002e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <SysTick_Config+0x40>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <SysTick_Config+0x40>)
 8002f38:	2207      	movs	r2, #7
 8002f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000e010 	.word	0xe000e010

08002f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff05 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f74:	f7ff ff1a 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f7ff ff8e 	bl	8002ea0 <NVIC_EncodePriority>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff5d 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff0d 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff1d 	bl	8002e04 <__NVIC_DisableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff94 	bl	8002f08 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e014      	b.n	8003026 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	791b      	ldrb	r3, [r3, #4]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fe fa3f 	bl	8001490 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	795b      	ldrb	r3, [r3, #5]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_DAC_Start+0x16>
 8003040:	2302      	movs	r3, #2
 8003042:	e03b      	b.n	80030bc <HAL_DAC_Start+0x8e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003078:	2b04      	cmp	r3, #4
 800307a:	d118      	bne.n	80030ae <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	e00f      	b.n	80030ae <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309c:	d107      	bne.n	80030ae <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0202 	orr.w	r2, r2, #2
 80030ac:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3308      	adds	r3, #8
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	e004      	b.n	80030fc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3314      	adds	r3, #20
 80030fa:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	461a      	mov	r2, r3
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b088      	sub	sp, #32
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	795b      	ldrb	r3, [r3, #5]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_DAC_ConfigChannel+0x1c>
 800312a:	2302      	movs	r3, #2
 800312c:	e107      	b.n	800333e <HAL_DAC_ConfigChannel+0x22c>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2202      	movs	r2, #2
 8003138:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b04      	cmp	r3, #4
 8003140:	d174      	bne.n	800322c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003142:	f7fe fc59 	bl	80019f8 <HAL_GetTick>
 8003146:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d134      	bne.n	80031b8 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800314e:	e011      	b.n	8003174 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003150:	f7fe fc52 	bl	80019f8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d90a      	bls.n	8003174 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f043 0208 	orr.w	r2, r3, #8
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2203      	movs	r2, #3
 800316e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e0e4      	b.n	800333e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e6      	bne.n	8003150 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003182:	2001      	movs	r0, #1
 8003184:	f7fe fc44 	bl	8001a10 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	6992      	ldr	r2, [r2, #24]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40
 8003192:	e01e      	b.n	80031d2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003194:	f7fe fc30 	bl	80019f8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d90a      	bls.n	80031b8 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f043 0208 	orr.w	r2, r3, #8
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2203      	movs	r2, #3
 80031b2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0c2      	b.n	800333e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	2b00      	cmp	r3, #0
 80031c0:	dbe8      	blt.n	8003194 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f7fe fc24 	bl	8001a10 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	6992      	ldr	r2, [r2, #24]
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	ea02 0103 	and.w	r1, r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	21ff      	movs	r1, #255	; 0xff
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	ea02 0103 	and.w	r1, r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6a1a      	ldr	r2, [r3, #32]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d11d      	bne.n	8003270 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	221f      	movs	r2, #31
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2207      	movs	r2, #7
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	431a      	orrs	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43da      	mvns	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	400a      	ands	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	f640 72fc 	movw	r2, #4092	; 0xffc
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	22c0      	movs	r2, #192	; 0xc0
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003356:	e154      	b.n	8003602 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8146 	beq.w	80035fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d005      	beq.n	8003388 <HAL_GPIO_Init+0x40>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d130      	bne.n	80033ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033be:	2201      	movs	r2, #1
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 0201 	and.w	r2, r3, #1
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d017      	beq.n	8003426 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d123      	bne.n	800347a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	08da      	lsrs	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3208      	adds	r2, #8
 800343a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	220f      	movs	r2, #15
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3208      	adds	r2, #8
 8003474:	6939      	ldr	r1, [r7, #16]
 8003476:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0203 	and.w	r2, r3, #3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a0 	beq.w	80035fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034bc:	4b58      	ldr	r3, [pc, #352]	; (8003620 <HAL_GPIO_Init+0x2d8>)
 80034be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c0:	4a57      	ldr	r2, [pc, #348]	; (8003620 <HAL_GPIO_Init+0x2d8>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6613      	str	r3, [r2, #96]	; 0x60
 80034c8:	4b55      	ldr	r3, [pc, #340]	; (8003620 <HAL_GPIO_Init+0x2d8>)
 80034ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034d4:	4a53      	ldr	r2, [pc, #332]	; (8003624 <HAL_GPIO_Init+0x2dc>)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034fe:	d019      	beq.n	8003534 <HAL_GPIO_Init+0x1ec>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a49      	ldr	r2, [pc, #292]	; (8003628 <HAL_GPIO_Init+0x2e0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_GPIO_Init+0x1e8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a48      	ldr	r2, [pc, #288]	; (800362c <HAL_GPIO_Init+0x2e4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00d      	beq.n	800352c <HAL_GPIO_Init+0x1e4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a47      	ldr	r2, [pc, #284]	; (8003630 <HAL_GPIO_Init+0x2e8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <HAL_GPIO_Init+0x1e0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a46      	ldr	r2, [pc, #280]	; (8003634 <HAL_GPIO_Init+0x2ec>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_GPIO_Init+0x1dc>
 8003520:	2304      	movs	r3, #4
 8003522:	e008      	b.n	8003536 <HAL_GPIO_Init+0x1ee>
 8003524:	2307      	movs	r3, #7
 8003526:	e006      	b.n	8003536 <HAL_GPIO_Init+0x1ee>
 8003528:	2303      	movs	r3, #3
 800352a:	e004      	b.n	8003536 <HAL_GPIO_Init+0x1ee>
 800352c:	2302      	movs	r3, #2
 800352e:	e002      	b.n	8003536 <HAL_GPIO_Init+0x1ee>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_GPIO_Init+0x1ee>
 8003534:	2300      	movs	r3, #0
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4093      	lsls	r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003546:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_GPIO_Init+0x2dc>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003554:	4b38      	ldr	r3, [pc, #224]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003578:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800357e:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035a2:	4a25      	ldr	r2, [pc, #148]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035a8:	4b23      	ldr	r3, [pc, #140]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035d2:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035f6:	4a10      	ldr	r2, [pc, #64]	; (8003638 <HAL_GPIO_Init+0x2f0>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f aea3 	bne.w	8003358 <HAL_GPIO_Init+0x10>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48000c00 	.word	0x48000c00
 8003634:	48001000 	.word	0x48001000
 8003638:	40010400 	.word	0x40010400

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003658:	e002      	b.n	8003660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d006      	beq.n	8003690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f806 	bl	800369c <HAL_GPIO_EXTI_Callback>
  }
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <HAL_PWREx_GetVoltageRange+0x18>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40007000 	.word	0x40007000

080036d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036de:	d130      	bne.n	8003742 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ec:	d038      	beq.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036ee:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f6:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2232      	movs	r2, #50	; 0x32
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	4a1b      	ldr	r2, [pc, #108]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	0c9b      	lsrs	r3, r3, #18
 8003710:	3301      	adds	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003714:	e002      	b.n	800371c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3b01      	subs	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003728:	d102      	bne.n	8003730 <HAL_PWREx_ControlVoltageScaling+0x60>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f2      	bne.n	8003716 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373c:	d110      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374e:	d007      	beq.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003750:	4b07      	ldr	r3, [pc, #28]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003758:	4a05      	ldr	r2, [pc, #20]	; (8003770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40007000 	.word	0x40007000
 8003774:	20000000 	.word	0x20000000
 8003778:	431bde83 	.word	0x431bde83

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f000 bc02 	b.w	8003f94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003790:	4b96      	ldr	r3, [pc, #600]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800379a:	4b94      	ldr	r3, [pc, #592]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80e4 	beq.w	800397a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4c>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	f040 808b 	bne.w	80038d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	f040 8087 	bne.w	80038d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c8:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_OscConfig+0x64>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e3d9      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	4b81      	ldr	r3, [pc, #516]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_RCC_OscConfig+0x7e>
 80037f0:	4b7e      	ldr	r3, [pc, #504]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f8:	e005      	b.n	8003806 <HAL_RCC_OscConfig+0x8a>
 80037fa:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003806:	4293      	cmp	r3, r2
 8003808:	d223      	bcs.n	8003852 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fd8a 	bl	8004328 <RCC_SetFlashLatencyFromMSIRange>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e3ba      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800381e:	4b73      	ldr	r3, [pc, #460]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a72      	ldr	r2, [pc, #456]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003824:	f043 0308 	orr.w	r3, r3, #8
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b70      	ldr	r3, [pc, #448]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	496d      	ldr	r1, [pc, #436]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800383c:	4b6b      	ldr	r3, [pc, #428]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	4968      	ldr	r1, [pc, #416]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
 8003850:	e025      	b.n	800389e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003852:	4b66      	ldr	r3, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003858:	f043 0308 	orr.w	r3, r3, #8
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b63      	ldr	r3, [pc, #396]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4960      	ldr	r1, [pc, #384]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003870:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	495b      	ldr	r1, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fd4a 	bl	8004328 <RCC_SetFlashLatencyFromMSIRange>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e37a      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389e:	f000 fc81 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b51      	ldr	r3, [pc, #324]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	4950      	ldr	r1, [pc, #320]	; (80039f0 <HAL_RCC_OscConfig+0x274>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <HAL_RCC_OscConfig+0x278>)
 80038bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <HAL_RCC_OscConfig+0x27c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe f848 	bl	8001958 <HAL_InitTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d052      	beq.n	8003978 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	e35e      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d032      	beq.n	8003944 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038de:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a42      	ldr	r2, [pc, #264]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ea:	f7fe f885 	bl	80019f8 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f2:	f7fe f881 	bl	80019f8 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e347      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a35      	ldr	r2, [pc, #212]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003916:	f043 0308 	orr.w	r3, r3, #8
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b33      	ldr	r3, [pc, #204]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4930      	ldr	r1, [pc, #192]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800392e:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	492b      	ldr	r1, [pc, #172]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
 8003942:	e01a      	b.n	800397a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a28      	ldr	r2, [pc, #160]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003950:	f7fe f852 	bl	80019f8 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003958:	f7fe f84e 	bl	80019f8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e314      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x1dc>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d073      	beq.n	8003a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x21c>
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d10e      	bne.n	80039b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d063      	beq.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d15f      	bne.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e2f1      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x24c>
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e025      	b.n	8003a14 <HAL_RCC_OscConfig+0x298>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d114      	bne.n	80039fc <HAL_RCC_OscConfig+0x280>
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b03      	ldr	r3, [pc, #12]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a02      	ldr	r2, [pc, #8]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e013      	b.n	8003a14 <HAL_RCC_OscConfig+0x298>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	08006d24 	.word	0x08006d24
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004
 80039fc:	4ba0      	ldr	r3, [pc, #640]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a9f      	ldr	r2, [pc, #636]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b9d      	ldr	r3, [pc, #628]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a9c      	ldr	r2, [pc, #624]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd ffec 	bl	80019f8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fd ffe8 	bl	80019f8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e2ae      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a36:	4b92      	ldr	r3, [pc, #584]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x2a8>
 8003a42:	e014      	b.n	8003a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd ffd8 	bl	80019f8 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4c:	f7fd ffd4 	bl	80019f8 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e29a      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5e:	4b88      	ldr	r3, [pc, #544]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2d0>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d060      	beq.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_OscConfig+0x310>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d116      	bne.n	8003aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a8c:	4b7c      	ldr	r3, [pc, #496]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x328>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e277      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	4973      	ldr	r1, [pc, #460]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab8:	e040      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d023      	beq.n	8003b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac2:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6e      	ldr	r2, [pc, #440]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd ff93 	bl	80019f8 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fd ff8f 	bl	80019f8 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e255      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae8:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af4:	4b62      	ldr	r3, [pc, #392]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	495f      	ldr	r1, [pc, #380]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
 8003b08:	e018      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5c      	ldr	r2, [pc, #368]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd ff6f 	bl	80019f8 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7fd ff6b 	bl	80019f8 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e231      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b30:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d03c      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd ff4a 	bl	80019f8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fd ff46 	bl	80019f8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e20c      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b7a:	4b41      	ldr	r3, [pc, #260]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ef      	beq.n	8003b68 <HAL_RCC_OscConfig+0x3ec>
 8003b88:	e01b      	b.n	8003bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8a:	4b3d      	ldr	r3, [pc, #244]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	4a3b      	ldr	r2, [pc, #236]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fd ff2d 	bl	80019f8 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fd ff29 	bl	80019f8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e1ef      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ef      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80a6 	beq.w	8003d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bfc:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <HAL_RCC_OscConfig+0x508>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d118      	bne.n	8003c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c08:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_RCC_OscConfig+0x508>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_RCC_OscConfig+0x508>)
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c14:	f7fd fef0 	bl	80019f8 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1c:	f7fd feec 	bl	80019f8 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e1b2      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_RCC_OscConfig+0x508>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4d8>
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c52:	e029      	b.n	8003ca8 <HAL_RCC_OscConfig+0x52c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b05      	cmp	r3, #5
 8003c5a:	d115      	bne.n	8003c88 <HAL_RCC_OscConfig+0x50c>
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	4a03      	ldr	r2, [pc, #12]	; (8003c80 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c7c:	e014      	b.n	8003ca8 <HAL_RCC_OscConfig+0x52c>
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40007000 	.word	0x40007000
 8003c88:	4b9a      	ldr	r3, [pc, #616]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	4a99      	ldr	r2, [pc, #612]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c98:	4b96      	ldr	r3, [pc, #600]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a95      	ldr	r2, [pc, #596]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb0:	f7fd fea2 	bl	80019f8 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fe9e 	bl	80019f8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e162      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cce:	4b89      	ldr	r3, [pc, #548]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ed      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x53c>
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fd fe8b 	bl	80019f8 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fd fe87 	bl	80019f8 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e14b      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cfc:	4b7d      	ldr	r3, [pc, #500]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1ed      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0a:	7ffb      	ldrb	r3, [r7, #31]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d10:	4b78      	ldr	r3, [pc, #480]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	4a77      	ldr	r2, [pc, #476]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d03c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d30:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d36:	4a6f      	ldr	r2, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d40:	f7fd fe5a 	bl	80019f8 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d48:	f7fd fe56 	bl	80019f8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e11c      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d5a:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ef      	beq.n	8003d48 <HAL_RCC_OscConfig+0x5cc>
 8003d68:	e01b      	b.n	8003da2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d6a:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d70:	4a60      	ldr	r2, [pc, #384]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd fe3d 	bl	80019f8 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d82:	f7fd fe39 	bl	80019f8 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0ff      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d94:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1ef      	bne.n	8003d82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80f3 	beq.w	8003f92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	f040 80c9 	bne.w	8003f48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003db6:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0203 	and.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d12c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d123      	bne.n	8003e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d11b      	bne.n	8003e24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d113      	bne.n	8003e24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d109      	bne.n	8003e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d06b      	beq.n	8003efc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d062      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e2a:	4b32      	ldr	r3, [pc, #200]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0ac      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e46:	f7fd fdd7 	bl	80019f8 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7fd fdd3 	bl	80019f8 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e099      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f0      	bne.n	8003e4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_RCC_OscConfig+0x77c>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e86:	0212      	lsls	r2, r2, #8
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e8e:	0852      	lsrs	r2, r2, #1
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0552      	lsls	r2, r2, #21
 8003e94:	4311      	orrs	r1, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e9a:	0852      	lsrs	r2, r2, #1
 8003e9c:	3a01      	subs	r2, #1
 8003e9e:	0652      	lsls	r2, r2, #25
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea6:	06d2      	lsls	r2, r2, #27
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	4912      	ldr	r1, [pc, #72]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ec8:	f7fd fd96 	bl	80019f8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fd92 	bl	80019f8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e058      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RCC_OscConfig+0x778>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eee:	e050      	b.n	8003f92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e04f      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d144      	bne.n	8003f92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f20:	f7fd fd6a 	bl	80019f8 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd fd66 	bl	80019f8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e02c      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x7ac>
 8003f46:	e024      	b.n	8003f92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d01f      	beq.n	8003f8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a12      	ldr	r2, [pc, #72]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fd4d 	bl	80019f8 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fd fd49 	bl	80019f8 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e00f      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4905      	ldr	r1, [pc, #20]	; (8003f9c <HAL_RCC_OscConfig+0x820>)
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x824>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60cb      	str	r3, [r1, #12]
 8003f8c:	e001      	b.n	8003f92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	feeefffc 	.word	0xfeeefffc

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0e7      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d910      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b72      	ldr	r3, [pc, #456]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4970      	ldr	r1, [pc, #448]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b6e      	ldr	r3, [pc, #440]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0cf      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	429a      	cmp	r2, r3
 8004002:	d908      	bls.n	8004016 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b63      	ldr	r3, [pc, #396]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4960      	ldr	r1, [pc, #384]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04c      	beq.n	80040bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b03      	cmp	r3, #3
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402a:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d121      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0a6      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004042:	4b54      	ldr	r3, [pc, #336]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d115      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e09a      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800405a:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e08e      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406a:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e086      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407a:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f023 0203 	bic.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4943      	ldr	r1, [pc, #268]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fd fcb4 	bl	80019f8 <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	e00a      	b.n	80040aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004094:	f7fd fcb0 	bl	80019f8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e06e      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 020c 	and.w	r2, r3, #12
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d1eb      	bne.n	8004094 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d010      	beq.n	80040ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d208      	bcs.n	80040ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	492b      	ldr	r1, [pc, #172]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ea:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d210      	bcs.n	800411a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 0207 	bic.w	r2, r3, #7
 8004100:	4923      	ldr	r1, [pc, #140]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <HAL_RCC_ClockConfig+0x1ec>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e036      	b.n	8004188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4918      	ldr	r1, [pc, #96]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4910      	ldr	r1, [pc, #64]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004158:	f000 f824 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCC_ClockConfig+0x1f0>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	490b      	ldr	r1, [pc, #44]	; (8004198 <HAL_RCC_ClockConfig+0x1f4>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
 8004174:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1f8>)
 8004176:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1fc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fd fbeb 	bl	8001958 <HAL_InitTick>
 8004182:	4603      	mov	r3, r0
 8004184:	72fb      	strb	r3, [r7, #11]

  return status;
 8004186:	7afb      	ldrb	r3, [r7, #11]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40022000 	.word	0x40022000
 8004194:	40021000 	.word	0x40021000
 8004198:	08006d24 	.word	0x08006d24
 800419c:	20000000 	.word	0x20000000
 80041a0:	20000004 	.word	0x20000004

080041a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041bc:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d005      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x34>
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d121      	bne.n	8004216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d11e      	bne.n	8004216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041d8:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041e4:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e005      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041f4:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004200:	4a2b      	ldr	r2, [pc, #172]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10d      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004214:	e00a      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b04      	cmp	r3, #4
 800421a:	d102      	bne.n	8004222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	e004      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d101      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004228:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800422a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d134      	bne.n	800429c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004232:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d003      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0xa6>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d003      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0xac>
 8004248:	e005      	b.n	8004256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800424c:	617b      	str	r3, [r7, #20]
      break;
 800424e:	e005      	b.n	800425c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004250:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004252:	617b      	str	r3, [r7, #20]
      break;
 8004254:	e002      	b.n	800425c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	617b      	str	r3, [r7, #20]
      break;
 800425a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425c:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	3301      	adds	r3, #1
 8004268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	fb03 f202 	mul.w	r2, r3, r2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	0e5b      	lsrs	r3, r3, #25
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	3301      	adds	r3, #1
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800429c:	69bb      	ldr	r3, [r7, #24]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	08006d3c 	.word	0x08006d3c
 80042b4:	00f42400 	.word	0x00f42400

080042b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCC_GetHCLKFreq+0x14>)
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000000 	.word	0x20000000

080042d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042d4:	f7ff fff0 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4904      	ldr	r1, [pc, #16]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	08006d34 	.word	0x08006d34

080042fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004300:	f7ff ffda 	bl	80042b8 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0adb      	lsrs	r3, r3, #11
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4904      	ldr	r1, [pc, #16]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	08006d34 	.word	0x08006d34

08004328 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004334:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004340:	f7ff f9b8 	bl	80036b4 <HAL_PWREx_GetVoltageRange>
 8004344:	6178      	str	r0, [r7, #20]
 8004346:	e014      	b.n	8004372 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004348:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004352:	6593      	str	r3, [r2, #88]	; 0x58
 8004354:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004360:	f7ff f9a8 	bl	80036b4 <HAL_PWREx_GetVoltageRange>
 8004364:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004366:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436a:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800436c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004370:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d10b      	bne.n	8004392 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d919      	bls.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2ba0      	cmp	r3, #160	; 0xa0
 8004384:	d902      	bls.n	800438c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004386:	2302      	movs	r3, #2
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	e013      	b.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800438c:	2301      	movs	r3, #1
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e010      	b.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d902      	bls.n	800439e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004398:	2303      	movs	r3, #3
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	e00a      	b.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d102      	bne.n	80043aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043a4:	2302      	movs	r3, #2
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e004      	b.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b70      	cmp	r3, #112	; 0x70
 80043ae:	d101      	bne.n	80043b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043b0:	2301      	movs	r3, #1
 80043b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 0207 	bic.w	r2, r3, #7
 80043bc:	4909      	ldr	r1, [pc, #36]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043c4:	4b07      	ldr	r3, [pc, #28]	; (80043e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d001      	beq.n	80043d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40022000 	.word	0x40022000

080043e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f0:	2300      	movs	r3, #0
 80043f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f4:	2300      	movs	r3, #0
 80043f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	2b00      	cmp	r3, #0
 8004402:	d031      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800440c:	d01a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800440e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004412:	d814      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800441c:	d10f      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800441e:	4b5d      	ldr	r3, [pc, #372]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a5c      	ldr	r2, [pc, #368]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800442a:	e00c      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fa22 	bl	800487c <RCCEx_PLLSAI1_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	74fb      	strb	r3, [r7, #19]
      break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800444c:	4b51      	ldr	r3, [pc, #324]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	494e      	ldr	r1, [pc, #312]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004462:	e001      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7cfb      	ldrb	r3, [r7, #19]
 8004466:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 809e 	beq.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800447a:	4b46      	ldr	r3, [pc, #280]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800448a:	2300      	movs	r3, #0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b40      	ldr	r3, [pc, #256]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	4a3f      	ldr	r2, [pc, #252]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	; 0x58
 800449c:	4b3d      	ldr	r3, [pc, #244]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a8:	2301      	movs	r3, #1
 80044aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ac:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a39      	ldr	r2, [pc, #228]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044b8:	f7fd fa9e 	bl	80019f8 <HAL_GetTick>
 80044bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044be:	e009      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fd fa9a 	bl	80019f8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d902      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	74fb      	strb	r3, [r7, #19]
        break;
 80044d2:	e005      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ef      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d15a      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e6:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01e      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d019      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800450e:	4b21      	ldr	r3, [pc, #132]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800452e:	4a19      	ldr	r2, [pc, #100]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd fa5a 	bl	80019f8 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	e00b      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd fa56 	bl	80019f8 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d902      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	74fb      	strb	r3, [r7, #19]
            break;
 800455e:	e006      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ec      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004574:	4b07      	ldr	r3, [pc, #28]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004582:	4904      	ldr	r1, [pc, #16]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800458a:	e009      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
 8004590:	e006      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a0:	7c7b      	ldrb	r3, [r7, #17]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a6:	4b8d      	ldr	r3, [pc, #564]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	4a8c      	ldr	r2, [pc, #560]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045be:	4b87      	ldr	r3, [pc, #540]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f023 0203 	bic.w	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4983      	ldr	r1, [pc, #524]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e0:	4b7e      	ldr	r3, [pc, #504]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f023 020c 	bic.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	497b      	ldr	r1, [pc, #492]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004602:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	4972      	ldr	r1, [pc, #456]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004624:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	496a      	ldr	r1, [pc, #424]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004646:	4b65      	ldr	r3, [pc, #404]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	4961      	ldr	r1, [pc, #388]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004668:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4959      	ldr	r1, [pc, #356]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800468a:	4b54      	ldr	r3, [pc, #336]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	4950      	ldr	r1, [pc, #320]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ac:	4b4b      	ldr	r3, [pc, #300]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	4948      	ldr	r1, [pc, #288]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ce:	4b43      	ldr	r3, [pc, #268]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	493f      	ldr	r1, [pc, #252]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d028      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f0:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	4937      	ldr	r1, [pc, #220]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470e:	d106      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a31      	ldr	r2, [pc, #196]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471a:	60d3      	str	r3, [r2, #12]
 800471c:	e011      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004726:	d10c      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2101      	movs	r1, #1
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f8a4 	bl	800487c <RCCEx_PLLSAI1_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d028      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	491f      	ldr	r1, [pc, #124]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476c:	d106      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476e:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004778:	60d3      	str	r3, [r2, #12]
 800477a:	e011      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f875 	bl	800487c <RCCEx_PLLSAI1_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02b      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	4908      	ldr	r1, [pc, #32]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ca:	d109      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a02      	ldr	r2, [pc, #8]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d6:	60d3      	str	r3, [r2, #12]
 80047d8:	e014      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e8:	d10c      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2101      	movs	r1, #1
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f843 	bl	800487c <RCCEx_PLLSAI1_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01c      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	4916      	ldr	r1, [pc, #88]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482e:	d10c      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f820 	bl	800487c <RCCEx_PLLSAI1_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4904      	ldr	r1, [pc, #16]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800486c:	7cbb      	ldrb	r3, [r7, #18]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800488a:	4b74      	ldr	r3, [pc, #464]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004896:	4b71      	ldr	r3, [pc, #452]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d10d      	bne.n	80048c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
       ||
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ae:	4b6b      	ldr	r3, [pc, #428]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	091b      	lsrs	r3, r3, #4
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
       ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d047      	beq.n	8004952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	e044      	b.n	8004952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d018      	beq.n	8004902 <RCCEx_PLLSAI1_Config+0x86>
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d825      	bhi.n	8004920 <RCCEx_PLLSAI1_Config+0xa4>
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d002      	beq.n	80048de <RCCEx_PLLSAI1_Config+0x62>
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d009      	beq.n	80048f0 <RCCEx_PLLSAI1_Config+0x74>
 80048dc:	e020      	b.n	8004920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048de:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11d      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ee:	e01a      	b.n	8004926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048f0:	4b5a      	ldr	r3, [pc, #360]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004900:	e013      	b.n	800492a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004902:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800490e:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800491e:	e006      	b.n	800492e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	e004      	b.n	8004930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800492e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10d      	bne.n	8004952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004936:	4b49      	ldr	r3, [pc, #292]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	3b01      	subs	r3, #1
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	430b      	orrs	r3, r1
 800494c:	4943      	ldr	r1, [pc, #268]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800494e:	4313      	orrs	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d17c      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004958:	4b40      	ldr	r3, [pc, #256]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800495e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fd f848 	bl	80019f8 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800496a:	e009      	b.n	8004980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800496c:	f7fd f844 	bl	80019f8 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	73fb      	strb	r3, [r7, #15]
        break;
 800497e:	e005      	b.n	800498c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ef      	bne.n	800496c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d15f      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d110      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004998:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80049a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6892      	ldr	r2, [r2, #8]
 80049a8:	0211      	lsls	r1, r2, #8
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	68d2      	ldr	r2, [r2, #12]
 80049ae:	06d2      	lsls	r2, r2, #27
 80049b0:	430a      	orrs	r2, r1
 80049b2:	492a      	ldr	r1, [pc, #168]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	610b      	str	r3, [r1, #16]
 80049b8:	e027      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d112      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c0:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6892      	ldr	r2, [r2, #8]
 80049d0:	0211      	lsls	r1, r2, #8
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6912      	ldr	r2, [r2, #16]
 80049d6:	0852      	lsrs	r2, r2, #1
 80049d8:	3a01      	subs	r2, #1
 80049da:	0552      	lsls	r2, r2, #21
 80049dc:	430a      	orrs	r2, r1
 80049de:	491f      	ldr	r1, [pc, #124]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	610b      	str	r3, [r1, #16]
 80049e4:	e011      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e6:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6892      	ldr	r2, [r2, #8]
 80049f6:	0211      	lsls	r1, r2, #8
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6952      	ldr	r2, [r2, #20]
 80049fc:	0852      	lsrs	r2, r2, #1
 80049fe:	3a01      	subs	r2, #1
 8004a00:	0652      	lsls	r2, r2, #25
 8004a02:	430a      	orrs	r2, r1
 8004a04:	4915      	ldr	r1, [pc, #84]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fc ffef 	bl	80019f8 <HAL_GetTick>
 8004a1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a1c:	e009      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a1e:	f7fc ffeb 	bl	80019f8 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d902      	bls.n	8004a32 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	73fb      	strb	r3, [r7, #15]
          break;
 8004a30:	e005      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ef      	beq.n	8004a1e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000

08004a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e095      	b.n	8004b9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d108      	bne.n	8004a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a82:	d009      	beq.n	8004a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]
 8004a8a:	e005      	b.n	8004a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fd2a 	bl	800150c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad8:	d902      	bls.n	8004ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e002      	b.n	8004ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004aee:	d007      	beq.n	8004b00 <HAL_SPI_Init+0xa0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	ea42 0103 	orr.w	r1, r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 0204 	and.w	r2, r3, #4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b7c:	ea42 0103 	orr.w	r1, r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b088      	sub	sp, #32
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_SPI_Transmit+0x22>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e158      	b.n	8004e7a <HAL_SPI_Transmit+0x2d4>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bd0:	f7fc ff12 	bl	80019f8 <HAL_GetTick>
 8004bd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d002      	beq.n	8004bec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bea:	e13d      	b.n	8004e68 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Transmit+0x52>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bfc:	e134      	b.n	8004e68 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2203      	movs	r2, #3
 8004c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c48:	d10f      	bne.n	8004c6a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d007      	beq.n	8004c88 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c90:	d94b      	bls.n	8004d2a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_SPI_Transmit+0xfa>
 8004c9a:	8afb      	ldrh	r3, [r7, #22]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d13e      	bne.n	8004d1e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	881a      	ldrh	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	1c9a      	adds	r2, r3, #2
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cc4:	e02b      	b.n	8004d1e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d112      	bne.n	8004cfa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cf8:	e011      	b.n	8004d1e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfa:	f7fc fe7d 	bl	80019f8 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d803      	bhi.n	8004d12 <HAL_SPI_Transmit+0x16c>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d102      	bne.n	8004d18 <HAL_SPI_Transmit+0x172>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d102      	bne.n	8004d1e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d1c:	e0a4      	b.n	8004e68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ce      	bne.n	8004cc6 <HAL_SPI_Transmit+0x120>
 8004d28:	e07c      	b.n	8004e24 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_Transmit+0x192>
 8004d32:	8afb      	ldrh	r3, [r7, #22]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d170      	bne.n	8004e1a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d912      	bls.n	8004d68 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	881a      	ldrh	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	1c9a      	adds	r2, r3, #2
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b02      	subs	r3, #2
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d66:	e058      	b.n	8004e1a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	7812      	ldrb	r2, [r2, #0]
 8004d74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d8e:	e044      	b.n	8004e1a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d12b      	bne.n	8004df6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d912      	bls.n	8004dce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	881a      	ldrh	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	1c9a      	adds	r2, r3, #2
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b02      	subs	r3, #2
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dcc:	e025      	b.n	8004e1a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004df4:	e011      	b.n	8004e1a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df6:	f7fc fdff 	bl	80019f8 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d803      	bhi.n	8004e0e <HAL_SPI_Transmit+0x268>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d102      	bne.n	8004e14 <HAL_SPI_Transmit+0x26e>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e18:	e026      	b.n	8004e68 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1b5      	bne.n	8004d90 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f949 	bl	80050c0 <SPI_EndRxTxTransaction>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e000      	b.n	8004e68 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004e66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e94:	f7fc fdb0 	bl	80019f8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ea4:	f7fc fda8 	bl	80019f8 <HAL_GetTick>
 8004ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	015b      	lsls	r3, r3, #5
 8004eb0:	0d1b      	lsrs	r3, r3, #20
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eba:	e054      	b.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec2:	d050      	beq.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ec4:	f7fc fd98 	bl	80019f8 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d902      	bls.n	8004eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d13d      	bne.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef2:	d111      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efc:	d004      	beq.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d107      	bne.n	8004f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d10f      	bne.n	8004f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e017      	b.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d19b      	bne.n	8004ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000000 	.word	0x20000000

08004f94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fa6:	f7fc fd27 	bl	80019f8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fb6:	f7fc fd1f 	bl	80019f8 <HAL_GetTick>
 8004fba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fc4:	4b3d      	ldr	r3, [pc, #244]	; (80050bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	00da      	lsls	r2, r3, #3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	0d1b      	lsrs	r3, r3, #20
 8004fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd6:	fb02 f303 	mul.w	r3, r2, r3
 8004fda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fdc:	e060      	b.n	80050a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fe4:	d107      	bne.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d050      	beq.n	80050a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ffe:	f7fc fcfb 	bl	80019f8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	429a      	cmp	r2, r3
 800500c:	d902      	bls.n	8005014 <SPI_WaitFifoStateUntilTimeout+0x80>
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d13d      	bne.n	8005090 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005022:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502c:	d111      	bne.n	8005052 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005036:	d004      	beq.n	8005042 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005040:	d107      	bne.n	8005052 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005050:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	d10f      	bne.n	800507c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800507a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e010      	b.n	80050b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3b01      	subs	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d196      	bne.n	8004fde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000000 	.word	0x20000000

080050c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff ff5b 	bl	8004f94 <SPI_WaitFifoStateUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	f043 0220 	orr.w	r2, r3, #32
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e027      	b.n	8005144 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2180      	movs	r1, #128	; 0x80
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fec0 	bl	8004e84 <SPI_WaitFlagStateUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e014      	b.n	8005144 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2200      	movs	r2, #0
 8005122:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff ff34 	bl	8004f94 <SPI_WaitFifoStateUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e000      	b.n	8005144 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fc fa2a 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 faa4 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e03b      	b.n	800528c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a19      	ldr	r2, [pc, #100]	; (8005298 <HAL_TIM_Base_Start_IT+0x9c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIM_Base_Start_IT+0x4e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d004      	beq.n	800524a <HAL_TIM_Base_Start_IT+0x4e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_TIM_Base_Start_IT+0xa0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d115      	bne.n	8005276 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005252:	4013      	ands	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b06      	cmp	r3, #6
 800525a:	d015      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0x8c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005262:	d011      	beq.n	8005288 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	e008      	b.n	8005288 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e000      	b.n	800528a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005288:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40014000 	.word	0x40014000
 80052a0:	00010007 	.word	0x00010007

080052a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d122      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0202 	mvn.w	r2, #2
 80052d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9d8 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9ca 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9db 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b04      	cmp	r3, #4
 800530c:	d122      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d11b      	bne.n	8005354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0204 	mvn.w	r2, #4
 8005324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9ae 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f9a0 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f9b1 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b08      	cmp	r3, #8
 8005360:	d122      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b08      	cmp	r3, #8
 800536e:	d11b      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0208 	mvn.w	r2, #8
 8005378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2204      	movs	r2, #4
 800537e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f984 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 8005394:	e005      	b.n	80053a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f976 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f987 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b10      	cmp	r3, #16
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0210 	mvn.w	r2, #16
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2208      	movs	r2, #8
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f95a 	bl	800569c <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f94c 	bl	8005688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f95d 	bl	80056b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10e      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0201 	mvn.w	r2, #1
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f926 	bl	8005674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b80      	cmp	r3, #128	; 0x80
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fab0 	bl	80059b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005462:	d10e      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d107      	bne.n	8005482 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 faa3 	bl	80059c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d10e      	bne.n	80054ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d107      	bne.n	80054ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f90b 	bl	80056c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d10e      	bne.n	80054da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d107      	bne.n	80054da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0220 	mvn.w	r2, #32
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa63 	bl	80059a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_ConfigClockSource+0x1c>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0b6      	b.n	800566c <HAL_TIM_ConfigClockSource+0x18a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005520:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005528:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553a:	d03e      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0xd8>
 800553c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005540:	f200 8087 	bhi.w	8005652 <HAL_TIM_ConfigClockSource+0x170>
 8005544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005548:	f000 8086 	beq.w	8005658 <HAL_TIM_ConfigClockSource+0x176>
 800554c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005550:	d87f      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
 8005552:	2b70      	cmp	r3, #112	; 0x70
 8005554:	d01a      	beq.n	800558c <HAL_TIM_ConfigClockSource+0xaa>
 8005556:	2b70      	cmp	r3, #112	; 0x70
 8005558:	d87b      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
 800555a:	2b60      	cmp	r3, #96	; 0x60
 800555c:	d050      	beq.n	8005600 <HAL_TIM_ConfigClockSource+0x11e>
 800555e:	2b60      	cmp	r3, #96	; 0x60
 8005560:	d877      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
 8005562:	2b50      	cmp	r3, #80	; 0x50
 8005564:	d03c      	beq.n	80055e0 <HAL_TIM_ConfigClockSource+0xfe>
 8005566:	2b50      	cmp	r3, #80	; 0x50
 8005568:	d873      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d058      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0x13e>
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	d86f      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
 8005572:	2b30      	cmp	r3, #48	; 0x30
 8005574:	d064      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x15e>
 8005576:	2b30      	cmp	r3, #48	; 0x30
 8005578:	d86b      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
 800557a:	2b20      	cmp	r3, #32
 800557c:	d060      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x15e>
 800557e:	2b20      	cmp	r3, #32
 8005580:	d867      	bhi.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d05c      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x15e>
 8005586:	2b10      	cmp	r3, #16
 8005588:	d05a      	beq.n	8005640 <HAL_TIM_ConfigClockSource+0x15e>
 800558a:	e062      	b.n	8005652 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6818      	ldr	r0, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f000 f97a 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	609a      	str	r2, [r3, #8]
      break;
 80055b8:	e04f      	b.n	800565a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f000 f963 	bl	8005894 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055dc:	609a      	str	r2, [r3, #8]
      break;
 80055de:	e03c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	461a      	mov	r2, r3
 80055ee:	f000 f8d7 	bl	80057a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2150      	movs	r1, #80	; 0x50
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f930 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 80055fe:	e02c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	461a      	mov	r2, r3
 800560e:	f000 f8f6 	bl	80057fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2160      	movs	r1, #96	; 0x60
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f920 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 800561e:	e01c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	461a      	mov	r2, r3
 800562e:	f000 f8b7 	bl	80057a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2140      	movs	r1, #64	; 0x40
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f910 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 800563e:	e00c      	b.n	800565a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f000 f907 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005650:	e003      	b.n	800565a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
      break;
 8005656:	e000      	b.n	800565a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <TIM_Base_SetConfig+0xbc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_Base_SetConfig+0x20>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d108      	bne.n	800570a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a21      	ldr	r2, [pc, #132]	; (8005794 <TIM_Base_SetConfig+0xbc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_Base_SetConfig+0x52>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d007      	beq.n	800572a <TIM_Base_SetConfig+0x52>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <TIM_Base_SetConfig+0xc0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_Base_SetConfig+0x52>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <TIM_Base_SetConfig+0xc4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d108      	bne.n	800573c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a0c      	ldr	r2, [pc, #48]	; (8005794 <TIM_Base_SetConfig+0xbc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0xa0>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <TIM_Base_SetConfig+0xc0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0xa0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <TIM_Base_SetConfig+0xc4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400

080057a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 030a 	bic.w	r3, r3, #10
 80057dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057fe:	b480      	push	{r7}
 8005800:	b087      	sub	sp, #28
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0210 	bic.w	r2, r3, #16
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	031b      	lsls	r3, r3, #12
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	021a      	lsls	r2, r3, #8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e04f      	b.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800591c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a14      	ldr	r2, [pc, #80]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005954:	d004      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a10      	ldr	r2, [pc, #64]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10c      	bne.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005966:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	4313      	orrs	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40014000 	.word	0x40014000

080059a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e048      	b.n	8005a80 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fb fe08 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	; 0x24
 8005a08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8c8 	bl	8005bb0 <UART_SetConfig>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e02a      	b.n	8005a80 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fb16 	bl	8006064 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005a56:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0208 	orr.w	r2, r2, #8
 8005a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb95 	bl	80061a8 <UART_CheckIdleState>
 8005a7e:	4603      	mov	r3, r0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	f040 8082 	bne.w	8005ba6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_UART_Transmit+0x26>
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e07a      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Transmit+0x38>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e073      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2221      	movs	r2, #33	; 0x21
 8005ad4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad6:	f7fb ff8f 	bl	80019f8 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af4:	d108      	bne.n	8005b08 <HAL_UART_Transmit+0x80>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e003      	b.n	8005b10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b18:	e02d      	b.n	8005b76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fb88 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e039      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b46:	b292      	uxth	r2, r2
 8005b48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e008      	b.n	8005b64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1cb      	bne.n	8005b1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2140      	movs	r1, #64	; 0x40
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fb54 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e005      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb4:	b08a      	sub	sp, #40	; 0x28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b9e      	ldr	r3, [pc, #632]	; (8005e58 <UART_SetConfig+0x2a8>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a93      	ldr	r2, [pc, #588]	; (8005e5c <UART_SetConfig+0x2ac>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d004      	beq.n	8005c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a8a      	ldr	r2, [pc, #552]	; (8005e60 <UART_SetConfig+0x2b0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d126      	bne.n	8005c88 <UART_SetConfig+0xd8>
 8005c3a:	4b8a      	ldr	r3, [pc, #552]	; (8005e64 <UART_SetConfig+0x2b4>)
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d81b      	bhi.n	8005c80 <UART_SetConfig+0xd0>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <UART_SetConfig+0xa0>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c71 	.word	0x08005c71
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e0ab      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6e:	e0a7      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005c70:	2304      	movs	r3, #4
 8005c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c76:	e0a3      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005c78:	2308      	movs	r3, #8
 8005c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7e:	e09f      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005c80:	2310      	movs	r3, #16
 8005c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c86:	e09b      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a76      	ldr	r2, [pc, #472]	; (8005e68 <UART_SetConfig+0x2b8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d138      	bne.n	8005d04 <UART_SetConfig+0x154>
 8005c92:	4b74      	ldr	r3, [pc, #464]	; (8005e64 <UART_SetConfig+0x2b4>)
 8005c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c98:	f003 030c 	and.w	r3, r3, #12
 8005c9c:	2b0c      	cmp	r3, #12
 8005c9e:	d82d      	bhi.n	8005cfc <UART_SetConfig+0x14c>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0xf8>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cdd 	.word	0x08005cdd
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005ced 	.word	0x08005ced
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005cfd 	.word	0x08005cfd
 8005cc4:	08005cfd 	.word	0x08005cfd
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005cfd 	.word	0x08005cfd
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005cf5 	.word	0x08005cf5
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce2:	e06d      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cea:	e069      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf2:	e065      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfa:	e061      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e05d      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a58      	ldr	r2, [pc, #352]	; (8005e6c <UART_SetConfig+0x2bc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d125      	bne.n	8005d5a <UART_SetConfig+0x1aa>
 8005d0e:	4b55      	ldr	r3, [pc, #340]	; (8005e64 <UART_SetConfig+0x2b4>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d18:	2b30      	cmp	r3, #48	; 0x30
 8005d1a:	d016      	beq.n	8005d4a <UART_SetConfig+0x19a>
 8005d1c:	2b30      	cmp	r3, #48	; 0x30
 8005d1e:	d818      	bhi.n	8005d52 <UART_SetConfig+0x1a2>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d00a      	beq.n	8005d3a <UART_SetConfig+0x18a>
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d814      	bhi.n	8005d52 <UART_SetConfig+0x1a2>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <UART_SetConfig+0x182>
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d008      	beq.n	8005d42 <UART_SetConfig+0x192>
 8005d30:	e00f      	b.n	8005d52 <UART_SetConfig+0x1a2>
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d38:	e042      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d40:	e03e      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005d42:	2304      	movs	r3, #4
 8005d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d48:	e03a      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d50:	e036      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005d52:	2310      	movs	r3, #16
 8005d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d58:	e032      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3f      	ldr	r2, [pc, #252]	; (8005e5c <UART_SetConfig+0x2ac>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d12a      	bne.n	8005dba <UART_SetConfig+0x20a>
 8005d64:	4b3f      	ldr	r3, [pc, #252]	; (8005e64 <UART_SetConfig+0x2b4>)
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d72:	d01a      	beq.n	8005daa <UART_SetConfig+0x1fa>
 8005d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d78:	d81b      	bhi.n	8005db2 <UART_SetConfig+0x202>
 8005d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7e:	d00c      	beq.n	8005d9a <UART_SetConfig+0x1ea>
 8005d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d84:	d815      	bhi.n	8005db2 <UART_SetConfig+0x202>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <UART_SetConfig+0x1e2>
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d008      	beq.n	8005da2 <UART_SetConfig+0x1f2>
 8005d90:	e00f      	b.n	8005db2 <UART_SetConfig+0x202>
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d98:	e012      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da0:	e00e      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005da2:	2304      	movs	r3, #4
 8005da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da8:	e00a      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005daa:	2308      	movs	r3, #8
 8005dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db0:	e006      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005db2:	2310      	movs	r3, #16
 8005db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db8:	e002      	b.n	8005dc0 <UART_SetConfig+0x210>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a25      	ldr	r2, [pc, #148]	; (8005e5c <UART_SetConfig+0x2ac>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	f040 808a 	bne.w	8005ee0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d824      	bhi.n	8005e1e <UART_SetConfig+0x26e>
 8005dd4:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0x22c>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e1f 	.word	0x08005e1f
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e1f 	.word	0x08005e1f
 8005dec:	08005e0f 	.word	0x08005e0f
 8005df0:	08005e1f 	.word	0x08005e1f
 8005df4:	08005e1f 	.word	0x08005e1f
 8005df8:	08005e1f 	.word	0x08005e1f
 8005dfc:	08005e17 	.word	0x08005e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7fe fa66 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8005e04:	61f8      	str	r0, [r7, #28]
        break;
 8005e06:	e010      	b.n	8005e2a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <UART_SetConfig+0x2c0>)
 8005e0a:	61fb      	str	r3, [r7, #28]
        break;
 8005e0c:	e00d      	b.n	8005e2a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0e:	f7fe f9c9 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8005e12:	61f8      	str	r0, [r7, #28]
        break;
 8005e14:	e009      	b.n	8005e2a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e1a:	61fb      	str	r3, [r7, #28]
        break;
 8005e1c:	e005      	b.n	8005e2a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8109 	beq.w	8006044 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	4413      	add	r3, r2
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d305      	bcc.n	8005e4e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d912      	bls.n	8005e74 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e54:	e0f6      	b.n	8006044 <UART_SetConfig+0x494>
 8005e56:	bf00      	nop
 8005e58:	efff69f3 	.word	0xefff69f3
 8005e5c:	40008000 	.word	0x40008000
 8005e60:	40013800 	.word	0x40013800
 8005e64:	40021000 	.word	0x40021000
 8005e68:	40004400 	.word	0x40004400
 8005e6c:	40004800 	.word	0x40004800
 8005e70:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	2200      	movs	r2, #0
 8005e78:	461c      	mov	r4, r3
 8005e7a:	4615      	mov	r5, r2
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	022b      	lsls	r3, r5, #8
 8005e86:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e8a:	0222      	lsls	r2, r4, #8
 8005e8c:	68f9      	ldr	r1, [r7, #12]
 8005e8e:	6849      	ldr	r1, [r1, #4]
 8005e90:	0849      	lsrs	r1, r1, #1
 8005e92:	2000      	movs	r0, #0
 8005e94:	4688      	mov	r8, r1
 8005e96:	4681      	mov	r9, r0
 8005e98:	eb12 0a08 	adds.w	sl, r2, r8
 8005e9c:	eb43 0b09 	adc.w	fp, r3, r9
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eae:	4650      	mov	r0, sl
 8005eb0:	4659      	mov	r1, fp
 8005eb2:	f7fa fe23 	bl	8000afc <__aeabi_uldivmod>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4613      	mov	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec4:	d308      	bcc.n	8005ed8 <UART_SetConfig+0x328>
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ecc:	d204      	bcs.n	8005ed8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	e0b5      	b.n	8006044 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ede:	e0b1      	b.n	8006044 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee8:	d15d      	bne.n	8005fa6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d827      	bhi.n	8005f42 <UART_SetConfig+0x392>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x348>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	08005f43 	.word	0x08005f43
 8005f08:	08005f33 	.word	0x08005f33
 8005f0c:	08005f43 	.word	0x08005f43
 8005f10:	08005f43 	.word	0x08005f43
 8005f14:	08005f43 	.word	0x08005f43
 8005f18:	08005f3b 	.word	0x08005f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1c:	f7fe f9d8 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8005f20:	61f8      	str	r0, [r7, #28]
        break;
 8005f22:	e014      	b.n	8005f4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f24:	f7fe f9ea 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 8005f28:	61f8      	str	r0, [r7, #28]
        break;
 8005f2a:	e010      	b.n	8005f4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f2c:	4b4c      	ldr	r3, [pc, #304]	; (8006060 <UART_SetConfig+0x4b0>)
 8005f2e:	61fb      	str	r3, [r7, #28]
        break;
 8005f30:	e00d      	b.n	8005f4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f32:	f7fe f937 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8005f36:	61f8      	str	r0, [r7, #28]
        break;
 8005f38:	e009      	b.n	8005f4e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	61fb      	str	r3, [r7, #28]
        break;
 8005f40:	e005      	b.n	8005f4e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d077      	beq.n	8006044 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	005a      	lsls	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	441a      	add	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b0f      	cmp	r3, #15
 8005f6e:	d916      	bls.n	8005f9e <UART_SetConfig+0x3ee>
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f76:	d212      	bcs.n	8005f9e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f023 030f 	bic.w	r3, r3, #15
 8005f80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	8afb      	ldrh	r3, [r7, #22]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	8afa      	ldrh	r2, [r7, #22]
 8005f9a:	60da      	str	r2, [r3, #12]
 8005f9c:	e052      	b.n	8006044 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fa4:	e04e      	b.n	8006044 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d827      	bhi.n	8005ffe <UART_SetConfig+0x44e>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x404>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fe9 	.word	0x08005fe9
 8005fc0:	08005fff 	.word	0x08005fff
 8005fc4:	08005fef 	.word	0x08005fef
 8005fc8:	08005fff 	.word	0x08005fff
 8005fcc:	08005fff 	.word	0x08005fff
 8005fd0:	08005fff 	.word	0x08005fff
 8005fd4:	08005ff7 	.word	0x08005ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd8:	f7fe f97a 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8005fdc:	61f8      	str	r0, [r7, #28]
        break;
 8005fde:	e014      	b.n	800600a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe0:	f7fe f98c 	bl	80042fc <HAL_RCC_GetPCLK2Freq>
 8005fe4:	61f8      	str	r0, [r7, #28]
        break;
 8005fe6:	e010      	b.n	800600a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <UART_SetConfig+0x4b0>)
 8005fea:	61fb      	str	r3, [r7, #28]
        break;
 8005fec:	e00d      	b.n	800600a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fee:	f7fe f8d9 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8005ff2:	61f8      	str	r0, [r7, #28]
        break;
 8005ff4:	e009      	b.n	800600a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffa:	61fb      	str	r3, [r7, #28]
        break;
 8005ffc:	e005      	b.n	800600a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006008:	bf00      	nop
    }

    if (pclk != 0U)
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d019      	beq.n	8006044 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	085a      	lsrs	r2, r3, #1
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	441a      	add	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d909      	bls.n	800603e <UART_SetConfig+0x48e>
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006030:	d205      	bcs.n	800603e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60da      	str	r2, [r3, #12]
 800603c:	e002      	b.n	8006044 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006050:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006054:	4618      	mov	r0, r3
 8006056:	3728      	adds	r7, #40	; 0x28
 8006058:	46bd      	mov	sp, r7
 800605a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605e:	bf00      	nop
 8006060:	00f42400 	.word	0x00f42400

08006064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01a      	beq.n	800617a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006162:	d10a      	bne.n	800617a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b8:	f7fb fc1e 	bl	80019f8 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d10e      	bne.n	80061ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f82d 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e023      	b.n	8006232 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d10e      	bne.n	8006216 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f817 	bl	800623a <UART_WaitOnFlagUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e00d      	b.n	8006232 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b09c      	sub	sp, #112	; 0x70
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624a:	e0a5      	b.n	8006398 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	f000 80a1 	beq.w	8006398 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006256:	f7fb fbcf 	bl	80019f8 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006262:	429a      	cmp	r2, r3
 8006264:	d302      	bcc.n	800626c <UART_WaitOnFlagUntilTimeout+0x32>
 8006266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006268:	2b00      	cmp	r3, #0
 800626a:	d13e      	bne.n	80062ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800627a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006280:	667b      	str	r3, [r7, #100]	; 0x64
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800628c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006290:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e6      	bne.n	800626c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	663b      	str	r3, [r7, #96]	; 0x60
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3308      	adds	r3, #8
 80062bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062be:	64ba      	str	r2, [r7, #72]	; 0x48
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e5      	bne.n	800629e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2220      	movs	r2, #32
 80062d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e067      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d04f      	beq.n	8006398 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006306:	d147      	bne.n	8006398 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006310:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006326:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3308      	adds	r3, #8
 800634a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	613b      	str	r3, [r7, #16]
   return(result);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	66bb      	str	r3, [r7, #104]	; 0x68
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3308      	adds	r3, #8
 8006362:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006364:	623a      	str	r2, [r7, #32]
 8006366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	69f9      	ldr	r1, [r7, #28]
 800636a:	6a3a      	ldr	r2, [r7, #32]
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	61bb      	str	r3, [r7, #24]
   return(result);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e010      	b.n	80063ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69da      	ldr	r2, [r3, #28]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4013      	ands	r3, r2
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	79fb      	ldrb	r3, [r7, #7]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	f43f af4a 	beq.w	800624c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3770      	adds	r7, #112	; 0x70
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <__errno>:
 80063c4:	4b01      	ldr	r3, [pc, #4]	; (80063cc <__errno+0x8>)
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	2000000c 	.word	0x2000000c

080063d0 <__libc_init_array>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4d0d      	ldr	r5, [pc, #52]	; (8006408 <__libc_init_array+0x38>)
 80063d4:	4c0d      	ldr	r4, [pc, #52]	; (800640c <__libc_init_array+0x3c>)
 80063d6:	1b64      	subs	r4, r4, r5
 80063d8:	10a4      	asrs	r4, r4, #2
 80063da:	2600      	movs	r6, #0
 80063dc:	42a6      	cmp	r6, r4
 80063de:	d109      	bne.n	80063f4 <__libc_init_array+0x24>
 80063e0:	4d0b      	ldr	r5, [pc, #44]	; (8006410 <__libc_init_array+0x40>)
 80063e2:	4c0c      	ldr	r4, [pc, #48]	; (8006414 <__libc_init_array+0x44>)
 80063e4:	f000 fc8e 	bl	8006d04 <_init>
 80063e8:	1b64      	subs	r4, r4, r5
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	2600      	movs	r6, #0
 80063ee:	42a6      	cmp	r6, r4
 80063f0:	d105      	bne.n	80063fe <__libc_init_array+0x2e>
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
 80063f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f8:	4798      	blx	r3
 80063fa:	3601      	adds	r6, #1
 80063fc:	e7ee      	b.n	80063dc <__libc_init_array+0xc>
 80063fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006402:	4798      	blx	r3
 8006404:	3601      	adds	r6, #1
 8006406:	e7f2      	b.n	80063ee <__libc_init_array+0x1e>
 8006408:	08006da8 	.word	0x08006da8
 800640c:	08006da8 	.word	0x08006da8
 8006410:	08006da8 	.word	0x08006da8
 8006414:	08006dac 	.word	0x08006dac

08006418 <memset>:
 8006418:	4402      	add	r2, r0
 800641a:	4603      	mov	r3, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	f803 1b01 	strb.w	r1, [r3], #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <siprintf>:
 8006428:	b40e      	push	{r1, r2, r3}
 800642a:	b500      	push	{lr}
 800642c:	b09c      	sub	sp, #112	; 0x70
 800642e:	ab1d      	add	r3, sp, #116	; 0x74
 8006430:	9002      	str	r0, [sp, #8]
 8006432:	9006      	str	r0, [sp, #24]
 8006434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <siprintf+0x38>)
 800643a:	9107      	str	r1, [sp, #28]
 800643c:	9104      	str	r1, [sp, #16]
 800643e:	4909      	ldr	r1, [pc, #36]	; (8006464 <siprintf+0x3c>)
 8006440:	f853 2b04 	ldr.w	r2, [r3], #4
 8006444:	9105      	str	r1, [sp, #20]
 8006446:	6800      	ldr	r0, [r0, #0]
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	a902      	add	r1, sp, #8
 800644c:	f000 f868 	bl	8006520 <_svfiprintf_r>
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	b01c      	add	sp, #112	; 0x70
 8006458:	f85d eb04 	ldr.w	lr, [sp], #4
 800645c:	b003      	add	sp, #12
 800645e:	4770      	bx	lr
 8006460:	2000000c 	.word	0x2000000c
 8006464:	ffff0208 	.word	0xffff0208

08006468 <__ssputs_r>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	688e      	ldr	r6, [r1, #8]
 800646e:	429e      	cmp	r6, r3
 8006470:	4682      	mov	sl, r0
 8006472:	460c      	mov	r4, r1
 8006474:	4690      	mov	r8, r2
 8006476:	461f      	mov	r7, r3
 8006478:	d838      	bhi.n	80064ec <__ssputs_r+0x84>
 800647a:	898a      	ldrh	r2, [r1, #12]
 800647c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006480:	d032      	beq.n	80064e8 <__ssputs_r+0x80>
 8006482:	6825      	ldr	r5, [r4, #0]
 8006484:	6909      	ldr	r1, [r1, #16]
 8006486:	eba5 0901 	sub.w	r9, r5, r1
 800648a:	6965      	ldr	r5, [r4, #20]
 800648c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006494:	3301      	adds	r3, #1
 8006496:	444b      	add	r3, r9
 8006498:	106d      	asrs	r5, r5, #1
 800649a:	429d      	cmp	r5, r3
 800649c:	bf38      	it	cc
 800649e:	461d      	movcc	r5, r3
 80064a0:	0553      	lsls	r3, r2, #21
 80064a2:	d531      	bpl.n	8006508 <__ssputs_r+0xa0>
 80064a4:	4629      	mov	r1, r5
 80064a6:	f000 fb63 	bl	8006b70 <_malloc_r>
 80064aa:	4606      	mov	r6, r0
 80064ac:	b950      	cbnz	r0, 80064c4 <__ssputs_r+0x5c>
 80064ae:	230c      	movs	r3, #12
 80064b0:	f8ca 3000 	str.w	r3, [sl]
 80064b4:	89a3      	ldrh	r3, [r4, #12]
 80064b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ba:	81a3      	strh	r3, [r4, #12]
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c4:	6921      	ldr	r1, [r4, #16]
 80064c6:	464a      	mov	r2, r9
 80064c8:	f000 fabe 	bl	8006a48 <memcpy>
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	6126      	str	r6, [r4, #16]
 80064da:	6165      	str	r5, [r4, #20]
 80064dc:	444e      	add	r6, r9
 80064de:	eba5 0509 	sub.w	r5, r5, r9
 80064e2:	6026      	str	r6, [r4, #0]
 80064e4:	60a5      	str	r5, [r4, #8]
 80064e6:	463e      	mov	r6, r7
 80064e8:	42be      	cmp	r6, r7
 80064ea:	d900      	bls.n	80064ee <__ssputs_r+0x86>
 80064ec:	463e      	mov	r6, r7
 80064ee:	6820      	ldr	r0, [r4, #0]
 80064f0:	4632      	mov	r2, r6
 80064f2:	4641      	mov	r1, r8
 80064f4:	f000 fab6 	bl	8006a64 <memmove>
 80064f8:	68a3      	ldr	r3, [r4, #8]
 80064fa:	1b9b      	subs	r3, r3, r6
 80064fc:	60a3      	str	r3, [r4, #8]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	4433      	add	r3, r6
 8006502:	6023      	str	r3, [r4, #0]
 8006504:	2000      	movs	r0, #0
 8006506:	e7db      	b.n	80064c0 <__ssputs_r+0x58>
 8006508:	462a      	mov	r2, r5
 800650a:	f000 fba5 	bl	8006c58 <_realloc_r>
 800650e:	4606      	mov	r6, r0
 8006510:	2800      	cmp	r0, #0
 8006512:	d1e1      	bne.n	80064d8 <__ssputs_r+0x70>
 8006514:	6921      	ldr	r1, [r4, #16]
 8006516:	4650      	mov	r0, sl
 8006518:	f000 fabe 	bl	8006a98 <_free_r>
 800651c:	e7c7      	b.n	80064ae <__ssputs_r+0x46>
	...

08006520 <_svfiprintf_r>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	4698      	mov	r8, r3
 8006526:	898b      	ldrh	r3, [r1, #12]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	b09d      	sub	sp, #116	; 0x74
 800652c:	4607      	mov	r7, r0
 800652e:	460d      	mov	r5, r1
 8006530:	4614      	mov	r4, r2
 8006532:	d50e      	bpl.n	8006552 <_svfiprintf_r+0x32>
 8006534:	690b      	ldr	r3, [r1, #16]
 8006536:	b963      	cbnz	r3, 8006552 <_svfiprintf_r+0x32>
 8006538:	2140      	movs	r1, #64	; 0x40
 800653a:	f000 fb19 	bl	8006b70 <_malloc_r>
 800653e:	6028      	str	r0, [r5, #0]
 8006540:	6128      	str	r0, [r5, #16]
 8006542:	b920      	cbnz	r0, 800654e <_svfiprintf_r+0x2e>
 8006544:	230c      	movs	r3, #12
 8006546:	603b      	str	r3, [r7, #0]
 8006548:	f04f 30ff 	mov.w	r0, #4294967295
 800654c:	e0d1      	b.n	80066f2 <_svfiprintf_r+0x1d2>
 800654e:	2340      	movs	r3, #64	; 0x40
 8006550:	616b      	str	r3, [r5, #20]
 8006552:	2300      	movs	r3, #0
 8006554:	9309      	str	r3, [sp, #36]	; 0x24
 8006556:	2320      	movs	r3, #32
 8006558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800655c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006560:	2330      	movs	r3, #48	; 0x30
 8006562:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800670c <_svfiprintf_r+0x1ec>
 8006566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800656a:	f04f 0901 	mov.w	r9, #1
 800656e:	4623      	mov	r3, r4
 8006570:	469a      	mov	sl, r3
 8006572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006576:	b10a      	cbz	r2, 800657c <_svfiprintf_r+0x5c>
 8006578:	2a25      	cmp	r2, #37	; 0x25
 800657a:	d1f9      	bne.n	8006570 <_svfiprintf_r+0x50>
 800657c:	ebba 0b04 	subs.w	fp, sl, r4
 8006580:	d00b      	beq.n	800659a <_svfiprintf_r+0x7a>
 8006582:	465b      	mov	r3, fp
 8006584:	4622      	mov	r2, r4
 8006586:	4629      	mov	r1, r5
 8006588:	4638      	mov	r0, r7
 800658a:	f7ff ff6d 	bl	8006468 <__ssputs_r>
 800658e:	3001      	adds	r0, #1
 8006590:	f000 80aa 	beq.w	80066e8 <_svfiprintf_r+0x1c8>
 8006594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006596:	445a      	add	r2, fp
 8006598:	9209      	str	r2, [sp, #36]	; 0x24
 800659a:	f89a 3000 	ldrb.w	r3, [sl]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80a2 	beq.w	80066e8 <_svfiprintf_r+0x1c8>
 80065a4:	2300      	movs	r3, #0
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ae:	f10a 0a01 	add.w	sl, sl, #1
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	9307      	str	r3, [sp, #28]
 80065b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ba:	931a      	str	r3, [sp, #104]	; 0x68
 80065bc:	4654      	mov	r4, sl
 80065be:	2205      	movs	r2, #5
 80065c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c4:	4851      	ldr	r0, [pc, #324]	; (800670c <_svfiprintf_r+0x1ec>)
 80065c6:	f7f9 fe03 	bl	80001d0 <memchr>
 80065ca:	9a04      	ldr	r2, [sp, #16]
 80065cc:	b9d8      	cbnz	r0, 8006606 <_svfiprintf_r+0xe6>
 80065ce:	06d0      	lsls	r0, r2, #27
 80065d0:	bf44      	itt	mi
 80065d2:	2320      	movmi	r3, #32
 80065d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d8:	0711      	lsls	r1, r2, #28
 80065da:	bf44      	itt	mi
 80065dc:	232b      	movmi	r3, #43	; 0x2b
 80065de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065e2:	f89a 3000 	ldrb.w	r3, [sl]
 80065e6:	2b2a      	cmp	r3, #42	; 0x2a
 80065e8:	d015      	beq.n	8006616 <_svfiprintf_r+0xf6>
 80065ea:	9a07      	ldr	r2, [sp, #28]
 80065ec:	4654      	mov	r4, sl
 80065ee:	2000      	movs	r0, #0
 80065f0:	f04f 0c0a 	mov.w	ip, #10
 80065f4:	4621      	mov	r1, r4
 80065f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065fa:	3b30      	subs	r3, #48	; 0x30
 80065fc:	2b09      	cmp	r3, #9
 80065fe:	d94e      	bls.n	800669e <_svfiprintf_r+0x17e>
 8006600:	b1b0      	cbz	r0, 8006630 <_svfiprintf_r+0x110>
 8006602:	9207      	str	r2, [sp, #28]
 8006604:	e014      	b.n	8006630 <_svfiprintf_r+0x110>
 8006606:	eba0 0308 	sub.w	r3, r0, r8
 800660a:	fa09 f303 	lsl.w	r3, r9, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	9304      	str	r3, [sp, #16]
 8006612:	46a2      	mov	sl, r4
 8006614:	e7d2      	b.n	80065bc <_svfiprintf_r+0x9c>
 8006616:	9b03      	ldr	r3, [sp, #12]
 8006618:	1d19      	adds	r1, r3, #4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	9103      	str	r1, [sp, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	bfbb      	ittet	lt
 8006622:	425b      	neglt	r3, r3
 8006624:	f042 0202 	orrlt.w	r2, r2, #2
 8006628:	9307      	strge	r3, [sp, #28]
 800662a:	9307      	strlt	r3, [sp, #28]
 800662c:	bfb8      	it	lt
 800662e:	9204      	strlt	r2, [sp, #16]
 8006630:	7823      	ldrb	r3, [r4, #0]
 8006632:	2b2e      	cmp	r3, #46	; 0x2e
 8006634:	d10c      	bne.n	8006650 <_svfiprintf_r+0x130>
 8006636:	7863      	ldrb	r3, [r4, #1]
 8006638:	2b2a      	cmp	r3, #42	; 0x2a
 800663a:	d135      	bne.n	80066a8 <_svfiprintf_r+0x188>
 800663c:	9b03      	ldr	r3, [sp, #12]
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	9203      	str	r2, [sp, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfb8      	it	lt
 8006648:	f04f 33ff 	movlt.w	r3, #4294967295
 800664c:	3402      	adds	r4, #2
 800664e:	9305      	str	r3, [sp, #20]
 8006650:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800671c <_svfiprintf_r+0x1fc>
 8006654:	7821      	ldrb	r1, [r4, #0]
 8006656:	2203      	movs	r2, #3
 8006658:	4650      	mov	r0, sl
 800665a:	f7f9 fdb9 	bl	80001d0 <memchr>
 800665e:	b140      	cbz	r0, 8006672 <_svfiprintf_r+0x152>
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	eba0 000a 	sub.w	r0, r0, sl
 8006666:	fa03 f000 	lsl.w	r0, r3, r0
 800666a:	9b04      	ldr	r3, [sp, #16]
 800666c:	4303      	orrs	r3, r0
 800666e:	3401      	adds	r4, #1
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006676:	4826      	ldr	r0, [pc, #152]	; (8006710 <_svfiprintf_r+0x1f0>)
 8006678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800667c:	2206      	movs	r2, #6
 800667e:	f7f9 fda7 	bl	80001d0 <memchr>
 8006682:	2800      	cmp	r0, #0
 8006684:	d038      	beq.n	80066f8 <_svfiprintf_r+0x1d8>
 8006686:	4b23      	ldr	r3, [pc, #140]	; (8006714 <_svfiprintf_r+0x1f4>)
 8006688:	bb1b      	cbnz	r3, 80066d2 <_svfiprintf_r+0x1b2>
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	3307      	adds	r3, #7
 800668e:	f023 0307 	bic.w	r3, r3, #7
 8006692:	3308      	adds	r3, #8
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006698:	4433      	add	r3, r6
 800669a:	9309      	str	r3, [sp, #36]	; 0x24
 800669c:	e767      	b.n	800656e <_svfiprintf_r+0x4e>
 800669e:	fb0c 3202 	mla	r2, ip, r2, r3
 80066a2:	460c      	mov	r4, r1
 80066a4:	2001      	movs	r0, #1
 80066a6:	e7a5      	b.n	80065f4 <_svfiprintf_r+0xd4>
 80066a8:	2300      	movs	r3, #0
 80066aa:	3401      	adds	r4, #1
 80066ac:	9305      	str	r3, [sp, #20]
 80066ae:	4619      	mov	r1, r3
 80066b0:	f04f 0c0a 	mov.w	ip, #10
 80066b4:	4620      	mov	r0, r4
 80066b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ba:	3a30      	subs	r2, #48	; 0x30
 80066bc:	2a09      	cmp	r2, #9
 80066be:	d903      	bls.n	80066c8 <_svfiprintf_r+0x1a8>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0c5      	beq.n	8006650 <_svfiprintf_r+0x130>
 80066c4:	9105      	str	r1, [sp, #20]
 80066c6:	e7c3      	b.n	8006650 <_svfiprintf_r+0x130>
 80066c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80066cc:	4604      	mov	r4, r0
 80066ce:	2301      	movs	r3, #1
 80066d0:	e7f0      	b.n	80066b4 <_svfiprintf_r+0x194>
 80066d2:	ab03      	add	r3, sp, #12
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	462a      	mov	r2, r5
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <_svfiprintf_r+0x1f8>)
 80066da:	a904      	add	r1, sp, #16
 80066dc:	4638      	mov	r0, r7
 80066de:	f3af 8000 	nop.w
 80066e2:	1c42      	adds	r2, r0, #1
 80066e4:	4606      	mov	r6, r0
 80066e6:	d1d6      	bne.n	8006696 <_svfiprintf_r+0x176>
 80066e8:	89ab      	ldrh	r3, [r5, #12]
 80066ea:	065b      	lsls	r3, r3, #25
 80066ec:	f53f af2c 	bmi.w	8006548 <_svfiprintf_r+0x28>
 80066f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066f2:	b01d      	add	sp, #116	; 0x74
 80066f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f8:	ab03      	add	r3, sp, #12
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	462a      	mov	r2, r5
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <_svfiprintf_r+0x1f8>)
 8006700:	a904      	add	r1, sp, #16
 8006702:	4638      	mov	r0, r7
 8006704:	f000 f87a 	bl	80067fc <_printf_i>
 8006708:	e7eb      	b.n	80066e2 <_svfiprintf_r+0x1c2>
 800670a:	bf00      	nop
 800670c:	08006d6c 	.word	0x08006d6c
 8006710:	08006d76 	.word	0x08006d76
 8006714:	00000000 	.word	0x00000000
 8006718:	08006469 	.word	0x08006469
 800671c:	08006d72 	.word	0x08006d72

08006720 <_printf_common>:
 8006720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	4616      	mov	r6, r2
 8006726:	4699      	mov	r9, r3
 8006728:	688a      	ldr	r2, [r1, #8]
 800672a:	690b      	ldr	r3, [r1, #16]
 800672c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006730:	4293      	cmp	r3, r2
 8006732:	bfb8      	it	lt
 8006734:	4613      	movlt	r3, r2
 8006736:	6033      	str	r3, [r6, #0]
 8006738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800673c:	4607      	mov	r7, r0
 800673e:	460c      	mov	r4, r1
 8006740:	b10a      	cbz	r2, 8006746 <_printf_common+0x26>
 8006742:	3301      	adds	r3, #1
 8006744:	6033      	str	r3, [r6, #0]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	0699      	lsls	r1, r3, #26
 800674a:	bf42      	ittt	mi
 800674c:	6833      	ldrmi	r3, [r6, #0]
 800674e:	3302      	addmi	r3, #2
 8006750:	6033      	strmi	r3, [r6, #0]
 8006752:	6825      	ldr	r5, [r4, #0]
 8006754:	f015 0506 	ands.w	r5, r5, #6
 8006758:	d106      	bne.n	8006768 <_printf_common+0x48>
 800675a:	f104 0a19 	add.w	sl, r4, #25
 800675e:	68e3      	ldr	r3, [r4, #12]
 8006760:	6832      	ldr	r2, [r6, #0]
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	42ab      	cmp	r3, r5
 8006766:	dc26      	bgt.n	80067b6 <_printf_common+0x96>
 8006768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800676c:	1e13      	subs	r3, r2, #0
 800676e:	6822      	ldr	r2, [r4, #0]
 8006770:	bf18      	it	ne
 8006772:	2301      	movne	r3, #1
 8006774:	0692      	lsls	r2, r2, #26
 8006776:	d42b      	bmi.n	80067d0 <_printf_common+0xb0>
 8006778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800677c:	4649      	mov	r1, r9
 800677e:	4638      	mov	r0, r7
 8006780:	47c0      	blx	r8
 8006782:	3001      	adds	r0, #1
 8006784:	d01e      	beq.n	80067c4 <_printf_common+0xa4>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	68e5      	ldr	r5, [r4, #12]
 800678a:	6832      	ldr	r2, [r6, #0]
 800678c:	f003 0306 	and.w	r3, r3, #6
 8006790:	2b04      	cmp	r3, #4
 8006792:	bf08      	it	eq
 8006794:	1aad      	subeq	r5, r5, r2
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	6922      	ldr	r2, [r4, #16]
 800679a:	bf0c      	ite	eq
 800679c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a0:	2500      	movne	r5, #0
 80067a2:	4293      	cmp	r3, r2
 80067a4:	bfc4      	itt	gt
 80067a6:	1a9b      	subgt	r3, r3, r2
 80067a8:	18ed      	addgt	r5, r5, r3
 80067aa:	2600      	movs	r6, #0
 80067ac:	341a      	adds	r4, #26
 80067ae:	42b5      	cmp	r5, r6
 80067b0:	d11a      	bne.n	80067e8 <_printf_common+0xc8>
 80067b2:	2000      	movs	r0, #0
 80067b4:	e008      	b.n	80067c8 <_printf_common+0xa8>
 80067b6:	2301      	movs	r3, #1
 80067b8:	4652      	mov	r2, sl
 80067ba:	4649      	mov	r1, r9
 80067bc:	4638      	mov	r0, r7
 80067be:	47c0      	blx	r8
 80067c0:	3001      	adds	r0, #1
 80067c2:	d103      	bne.n	80067cc <_printf_common+0xac>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067cc:	3501      	adds	r5, #1
 80067ce:	e7c6      	b.n	800675e <_printf_common+0x3e>
 80067d0:	18e1      	adds	r1, r4, r3
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	2030      	movs	r0, #48	; 0x30
 80067d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067da:	4422      	add	r2, r4
 80067dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067e4:	3302      	adds	r3, #2
 80067e6:	e7c7      	b.n	8006778 <_printf_common+0x58>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4622      	mov	r2, r4
 80067ec:	4649      	mov	r1, r9
 80067ee:	4638      	mov	r0, r7
 80067f0:	47c0      	blx	r8
 80067f2:	3001      	adds	r0, #1
 80067f4:	d0e6      	beq.n	80067c4 <_printf_common+0xa4>
 80067f6:	3601      	adds	r6, #1
 80067f8:	e7d9      	b.n	80067ae <_printf_common+0x8e>
	...

080067fc <_printf_i>:
 80067fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	7e0f      	ldrb	r7, [r1, #24]
 8006802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006804:	2f78      	cmp	r7, #120	; 0x78
 8006806:	4691      	mov	r9, r2
 8006808:	4680      	mov	r8, r0
 800680a:	460c      	mov	r4, r1
 800680c:	469a      	mov	sl, r3
 800680e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006812:	d807      	bhi.n	8006824 <_printf_i+0x28>
 8006814:	2f62      	cmp	r7, #98	; 0x62
 8006816:	d80a      	bhi.n	800682e <_printf_i+0x32>
 8006818:	2f00      	cmp	r7, #0
 800681a:	f000 80d8 	beq.w	80069ce <_printf_i+0x1d2>
 800681e:	2f58      	cmp	r7, #88	; 0x58
 8006820:	f000 80a3 	beq.w	800696a <_printf_i+0x16e>
 8006824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800682c:	e03a      	b.n	80068a4 <_printf_i+0xa8>
 800682e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006832:	2b15      	cmp	r3, #21
 8006834:	d8f6      	bhi.n	8006824 <_printf_i+0x28>
 8006836:	a101      	add	r1, pc, #4	; (adr r1, 800683c <_printf_i+0x40>)
 8006838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800683c:	08006895 	.word	0x08006895
 8006840:	080068a9 	.word	0x080068a9
 8006844:	08006825 	.word	0x08006825
 8006848:	08006825 	.word	0x08006825
 800684c:	08006825 	.word	0x08006825
 8006850:	08006825 	.word	0x08006825
 8006854:	080068a9 	.word	0x080068a9
 8006858:	08006825 	.word	0x08006825
 800685c:	08006825 	.word	0x08006825
 8006860:	08006825 	.word	0x08006825
 8006864:	08006825 	.word	0x08006825
 8006868:	080069b5 	.word	0x080069b5
 800686c:	080068d9 	.word	0x080068d9
 8006870:	08006997 	.word	0x08006997
 8006874:	08006825 	.word	0x08006825
 8006878:	08006825 	.word	0x08006825
 800687c:	080069d7 	.word	0x080069d7
 8006880:	08006825 	.word	0x08006825
 8006884:	080068d9 	.word	0x080068d9
 8006888:	08006825 	.word	0x08006825
 800688c:	08006825 	.word	0x08006825
 8006890:	0800699f 	.word	0x0800699f
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	1d1a      	adds	r2, r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	602a      	str	r2, [r5, #0]
 800689c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0a3      	b.n	80069f0 <_printf_i+0x1f4>
 80068a8:	6820      	ldr	r0, [r4, #0]
 80068aa:	6829      	ldr	r1, [r5, #0]
 80068ac:	0606      	lsls	r6, r0, #24
 80068ae:	f101 0304 	add.w	r3, r1, #4
 80068b2:	d50a      	bpl.n	80068ca <_printf_i+0xce>
 80068b4:	680e      	ldr	r6, [r1, #0]
 80068b6:	602b      	str	r3, [r5, #0]
 80068b8:	2e00      	cmp	r6, #0
 80068ba:	da03      	bge.n	80068c4 <_printf_i+0xc8>
 80068bc:	232d      	movs	r3, #45	; 0x2d
 80068be:	4276      	negs	r6, r6
 80068c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c4:	485e      	ldr	r0, [pc, #376]	; (8006a40 <_printf_i+0x244>)
 80068c6:	230a      	movs	r3, #10
 80068c8:	e019      	b.n	80068fe <_printf_i+0x102>
 80068ca:	680e      	ldr	r6, [r1, #0]
 80068cc:	602b      	str	r3, [r5, #0]
 80068ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068d2:	bf18      	it	ne
 80068d4:	b236      	sxthne	r6, r6
 80068d6:	e7ef      	b.n	80068b8 <_printf_i+0xbc>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	6820      	ldr	r0, [r4, #0]
 80068dc:	1d19      	adds	r1, r3, #4
 80068de:	6029      	str	r1, [r5, #0]
 80068e0:	0601      	lsls	r1, r0, #24
 80068e2:	d501      	bpl.n	80068e8 <_printf_i+0xec>
 80068e4:	681e      	ldr	r6, [r3, #0]
 80068e6:	e002      	b.n	80068ee <_printf_i+0xf2>
 80068e8:	0646      	lsls	r6, r0, #25
 80068ea:	d5fb      	bpl.n	80068e4 <_printf_i+0xe8>
 80068ec:	881e      	ldrh	r6, [r3, #0]
 80068ee:	4854      	ldr	r0, [pc, #336]	; (8006a40 <_printf_i+0x244>)
 80068f0:	2f6f      	cmp	r7, #111	; 0x6f
 80068f2:	bf0c      	ite	eq
 80068f4:	2308      	moveq	r3, #8
 80068f6:	230a      	movne	r3, #10
 80068f8:	2100      	movs	r1, #0
 80068fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068fe:	6865      	ldr	r5, [r4, #4]
 8006900:	60a5      	str	r5, [r4, #8]
 8006902:	2d00      	cmp	r5, #0
 8006904:	bfa2      	ittt	ge
 8006906:	6821      	ldrge	r1, [r4, #0]
 8006908:	f021 0104 	bicge.w	r1, r1, #4
 800690c:	6021      	strge	r1, [r4, #0]
 800690e:	b90e      	cbnz	r6, 8006914 <_printf_i+0x118>
 8006910:	2d00      	cmp	r5, #0
 8006912:	d04d      	beq.n	80069b0 <_printf_i+0x1b4>
 8006914:	4615      	mov	r5, r2
 8006916:	fbb6 f1f3 	udiv	r1, r6, r3
 800691a:	fb03 6711 	mls	r7, r3, r1, r6
 800691e:	5dc7      	ldrb	r7, [r0, r7]
 8006920:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006924:	4637      	mov	r7, r6
 8006926:	42bb      	cmp	r3, r7
 8006928:	460e      	mov	r6, r1
 800692a:	d9f4      	bls.n	8006916 <_printf_i+0x11a>
 800692c:	2b08      	cmp	r3, #8
 800692e:	d10b      	bne.n	8006948 <_printf_i+0x14c>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	07de      	lsls	r6, r3, #31
 8006934:	d508      	bpl.n	8006948 <_printf_i+0x14c>
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	6861      	ldr	r1, [r4, #4]
 800693a:	4299      	cmp	r1, r3
 800693c:	bfde      	ittt	le
 800693e:	2330      	movle	r3, #48	; 0x30
 8006940:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006944:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006948:	1b52      	subs	r2, r2, r5
 800694a:	6122      	str	r2, [r4, #16]
 800694c:	f8cd a000 	str.w	sl, [sp]
 8006950:	464b      	mov	r3, r9
 8006952:	aa03      	add	r2, sp, #12
 8006954:	4621      	mov	r1, r4
 8006956:	4640      	mov	r0, r8
 8006958:	f7ff fee2 	bl	8006720 <_printf_common>
 800695c:	3001      	adds	r0, #1
 800695e:	d14c      	bne.n	80069fa <_printf_i+0x1fe>
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	b004      	add	sp, #16
 8006966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696a:	4835      	ldr	r0, [pc, #212]	; (8006a40 <_printf_i+0x244>)
 800696c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006970:	6829      	ldr	r1, [r5, #0]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	f851 6b04 	ldr.w	r6, [r1], #4
 8006978:	6029      	str	r1, [r5, #0]
 800697a:	061d      	lsls	r5, r3, #24
 800697c:	d514      	bpl.n	80069a8 <_printf_i+0x1ac>
 800697e:	07df      	lsls	r7, r3, #31
 8006980:	bf44      	itt	mi
 8006982:	f043 0320 	orrmi.w	r3, r3, #32
 8006986:	6023      	strmi	r3, [r4, #0]
 8006988:	b91e      	cbnz	r6, 8006992 <_printf_i+0x196>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f023 0320 	bic.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	2310      	movs	r3, #16
 8006994:	e7b0      	b.n	80068f8 <_printf_i+0xfc>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	f043 0320 	orr.w	r3, r3, #32
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	2378      	movs	r3, #120	; 0x78
 80069a0:	4828      	ldr	r0, [pc, #160]	; (8006a44 <_printf_i+0x248>)
 80069a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069a6:	e7e3      	b.n	8006970 <_printf_i+0x174>
 80069a8:	0659      	lsls	r1, r3, #25
 80069aa:	bf48      	it	mi
 80069ac:	b2b6      	uxthmi	r6, r6
 80069ae:	e7e6      	b.n	800697e <_printf_i+0x182>
 80069b0:	4615      	mov	r5, r2
 80069b2:	e7bb      	b.n	800692c <_printf_i+0x130>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	6826      	ldr	r6, [r4, #0]
 80069b8:	6961      	ldr	r1, [r4, #20]
 80069ba:	1d18      	adds	r0, r3, #4
 80069bc:	6028      	str	r0, [r5, #0]
 80069be:	0635      	lsls	r5, r6, #24
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	d501      	bpl.n	80069c8 <_printf_i+0x1cc>
 80069c4:	6019      	str	r1, [r3, #0]
 80069c6:	e002      	b.n	80069ce <_printf_i+0x1d2>
 80069c8:	0670      	lsls	r0, r6, #25
 80069ca:	d5fb      	bpl.n	80069c4 <_printf_i+0x1c8>
 80069cc:	8019      	strh	r1, [r3, #0]
 80069ce:	2300      	movs	r3, #0
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	4615      	mov	r5, r2
 80069d4:	e7ba      	b.n	800694c <_printf_i+0x150>
 80069d6:	682b      	ldr	r3, [r5, #0]
 80069d8:	1d1a      	adds	r2, r3, #4
 80069da:	602a      	str	r2, [r5, #0]
 80069dc:	681d      	ldr	r5, [r3, #0]
 80069de:	6862      	ldr	r2, [r4, #4]
 80069e0:	2100      	movs	r1, #0
 80069e2:	4628      	mov	r0, r5
 80069e4:	f7f9 fbf4 	bl	80001d0 <memchr>
 80069e8:	b108      	cbz	r0, 80069ee <_printf_i+0x1f2>
 80069ea:	1b40      	subs	r0, r0, r5
 80069ec:	6060      	str	r0, [r4, #4]
 80069ee:	6863      	ldr	r3, [r4, #4]
 80069f0:	6123      	str	r3, [r4, #16]
 80069f2:	2300      	movs	r3, #0
 80069f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f8:	e7a8      	b.n	800694c <_printf_i+0x150>
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	462a      	mov	r2, r5
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d0ab      	beq.n	8006960 <_printf_i+0x164>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	079b      	lsls	r3, r3, #30
 8006a0c:	d413      	bmi.n	8006a36 <_printf_i+0x23a>
 8006a0e:	68e0      	ldr	r0, [r4, #12]
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	4298      	cmp	r0, r3
 8006a14:	bfb8      	it	lt
 8006a16:	4618      	movlt	r0, r3
 8006a18:	e7a4      	b.n	8006964 <_printf_i+0x168>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4640      	mov	r0, r8
 8006a22:	47d0      	blx	sl
 8006a24:	3001      	adds	r0, #1
 8006a26:	d09b      	beq.n	8006960 <_printf_i+0x164>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	68e3      	ldr	r3, [r4, #12]
 8006a2c:	9903      	ldr	r1, [sp, #12]
 8006a2e:	1a5b      	subs	r3, r3, r1
 8006a30:	42ab      	cmp	r3, r5
 8006a32:	dcf2      	bgt.n	8006a1a <_printf_i+0x21e>
 8006a34:	e7eb      	b.n	8006a0e <_printf_i+0x212>
 8006a36:	2500      	movs	r5, #0
 8006a38:	f104 0619 	add.w	r6, r4, #25
 8006a3c:	e7f5      	b.n	8006a2a <_printf_i+0x22e>
 8006a3e:	bf00      	nop
 8006a40:	08006d7d 	.word	0x08006d7d
 8006a44:	08006d8e 	.word	0x08006d8e

08006a48 <memcpy>:
 8006a48:	440a      	add	r2, r1
 8006a4a:	4291      	cmp	r1, r2
 8006a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a50:	d100      	bne.n	8006a54 <memcpy+0xc>
 8006a52:	4770      	bx	lr
 8006a54:	b510      	push	{r4, lr}
 8006a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a5e:	4291      	cmp	r1, r2
 8006a60:	d1f9      	bne.n	8006a56 <memcpy+0xe>
 8006a62:	bd10      	pop	{r4, pc}

08006a64 <memmove>:
 8006a64:	4288      	cmp	r0, r1
 8006a66:	b510      	push	{r4, lr}
 8006a68:	eb01 0402 	add.w	r4, r1, r2
 8006a6c:	d902      	bls.n	8006a74 <memmove+0x10>
 8006a6e:	4284      	cmp	r4, r0
 8006a70:	4623      	mov	r3, r4
 8006a72:	d807      	bhi.n	8006a84 <memmove+0x20>
 8006a74:	1e43      	subs	r3, r0, #1
 8006a76:	42a1      	cmp	r1, r4
 8006a78:	d008      	beq.n	8006a8c <memmove+0x28>
 8006a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a82:	e7f8      	b.n	8006a76 <memmove+0x12>
 8006a84:	4402      	add	r2, r0
 8006a86:	4601      	mov	r1, r0
 8006a88:	428a      	cmp	r2, r1
 8006a8a:	d100      	bne.n	8006a8e <memmove+0x2a>
 8006a8c:	bd10      	pop	{r4, pc}
 8006a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a96:	e7f7      	b.n	8006a88 <memmove+0x24>

08006a98 <_free_r>:
 8006a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	d044      	beq.n	8006b28 <_free_r+0x90>
 8006a9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aa2:	9001      	str	r0, [sp, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f1a1 0404 	sub.w	r4, r1, #4
 8006aaa:	bfb8      	it	lt
 8006aac:	18e4      	addlt	r4, r4, r3
 8006aae:	f000 f913 	bl	8006cd8 <__malloc_lock>
 8006ab2:	4a1e      	ldr	r2, [pc, #120]	; (8006b2c <_free_r+0x94>)
 8006ab4:	9801      	ldr	r0, [sp, #4]
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	b933      	cbnz	r3, 8006ac8 <_free_r+0x30>
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	6014      	str	r4, [r2, #0]
 8006abe:	b003      	add	sp, #12
 8006ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ac4:	f000 b90e 	b.w	8006ce4 <__malloc_unlock>
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	d908      	bls.n	8006ade <_free_r+0x46>
 8006acc:	6825      	ldr	r5, [r4, #0]
 8006ace:	1961      	adds	r1, r4, r5
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	bf01      	itttt	eq
 8006ad4:	6819      	ldreq	r1, [r3, #0]
 8006ad6:	685b      	ldreq	r3, [r3, #4]
 8006ad8:	1949      	addeq	r1, r1, r5
 8006ada:	6021      	streq	r1, [r4, #0]
 8006adc:	e7ed      	b.n	8006aba <_free_r+0x22>
 8006ade:	461a      	mov	r2, r3
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b10b      	cbz	r3, 8006ae8 <_free_r+0x50>
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d9fa      	bls.n	8006ade <_free_r+0x46>
 8006ae8:	6811      	ldr	r1, [r2, #0]
 8006aea:	1855      	adds	r5, r2, r1
 8006aec:	42a5      	cmp	r5, r4
 8006aee:	d10b      	bne.n	8006b08 <_free_r+0x70>
 8006af0:	6824      	ldr	r4, [r4, #0]
 8006af2:	4421      	add	r1, r4
 8006af4:	1854      	adds	r4, r2, r1
 8006af6:	42a3      	cmp	r3, r4
 8006af8:	6011      	str	r1, [r2, #0]
 8006afa:	d1e0      	bne.n	8006abe <_free_r+0x26>
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	6053      	str	r3, [r2, #4]
 8006b02:	4421      	add	r1, r4
 8006b04:	6011      	str	r1, [r2, #0]
 8006b06:	e7da      	b.n	8006abe <_free_r+0x26>
 8006b08:	d902      	bls.n	8006b10 <_free_r+0x78>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	6003      	str	r3, [r0, #0]
 8006b0e:	e7d6      	b.n	8006abe <_free_r+0x26>
 8006b10:	6825      	ldr	r5, [r4, #0]
 8006b12:	1961      	adds	r1, r4, r5
 8006b14:	428b      	cmp	r3, r1
 8006b16:	bf04      	itt	eq
 8006b18:	6819      	ldreq	r1, [r3, #0]
 8006b1a:	685b      	ldreq	r3, [r3, #4]
 8006b1c:	6063      	str	r3, [r4, #4]
 8006b1e:	bf04      	itt	eq
 8006b20:	1949      	addeq	r1, r1, r5
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	6054      	str	r4, [r2, #4]
 8006b26:	e7ca      	b.n	8006abe <_free_r+0x26>
 8006b28:	b003      	add	sp, #12
 8006b2a:	bd30      	pop	{r4, r5, pc}
 8006b2c:	20000644 	.word	0x20000644

08006b30 <sbrk_aligned>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	4e0e      	ldr	r6, [pc, #56]	; (8006b6c <sbrk_aligned+0x3c>)
 8006b34:	460c      	mov	r4, r1
 8006b36:	6831      	ldr	r1, [r6, #0]
 8006b38:	4605      	mov	r5, r0
 8006b3a:	b911      	cbnz	r1, 8006b42 <sbrk_aligned+0x12>
 8006b3c:	f000 f8bc 	bl	8006cb8 <_sbrk_r>
 8006b40:	6030      	str	r0, [r6, #0]
 8006b42:	4621      	mov	r1, r4
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 f8b7 	bl	8006cb8 <_sbrk_r>
 8006b4a:	1c43      	adds	r3, r0, #1
 8006b4c:	d00a      	beq.n	8006b64 <sbrk_aligned+0x34>
 8006b4e:	1cc4      	adds	r4, r0, #3
 8006b50:	f024 0403 	bic.w	r4, r4, #3
 8006b54:	42a0      	cmp	r0, r4
 8006b56:	d007      	beq.n	8006b68 <sbrk_aligned+0x38>
 8006b58:	1a21      	subs	r1, r4, r0
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f8ac 	bl	8006cb8 <_sbrk_r>
 8006b60:	3001      	adds	r0, #1
 8006b62:	d101      	bne.n	8006b68 <sbrk_aligned+0x38>
 8006b64:	f04f 34ff 	mov.w	r4, #4294967295
 8006b68:	4620      	mov	r0, r4
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	20000648 	.word	0x20000648

08006b70 <_malloc_r>:
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	1ccd      	adds	r5, r1, #3
 8006b76:	f025 0503 	bic.w	r5, r5, #3
 8006b7a:	3508      	adds	r5, #8
 8006b7c:	2d0c      	cmp	r5, #12
 8006b7e:	bf38      	it	cc
 8006b80:	250c      	movcc	r5, #12
 8006b82:	2d00      	cmp	r5, #0
 8006b84:	4607      	mov	r7, r0
 8006b86:	db01      	blt.n	8006b8c <_malloc_r+0x1c>
 8006b88:	42a9      	cmp	r1, r5
 8006b8a:	d905      	bls.n	8006b98 <_malloc_r+0x28>
 8006b8c:	230c      	movs	r3, #12
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	2600      	movs	r6, #0
 8006b92:	4630      	mov	r0, r6
 8006b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b98:	4e2e      	ldr	r6, [pc, #184]	; (8006c54 <_malloc_r+0xe4>)
 8006b9a:	f000 f89d 	bl	8006cd8 <__malloc_lock>
 8006b9e:	6833      	ldr	r3, [r6, #0]
 8006ba0:	461c      	mov	r4, r3
 8006ba2:	bb34      	cbnz	r4, 8006bf2 <_malloc_r+0x82>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7ff ffc2 	bl	8006b30 <sbrk_aligned>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	4604      	mov	r4, r0
 8006bb0:	d14d      	bne.n	8006c4e <_malloc_r+0xde>
 8006bb2:	6834      	ldr	r4, [r6, #0]
 8006bb4:	4626      	mov	r6, r4
 8006bb6:	2e00      	cmp	r6, #0
 8006bb8:	d140      	bne.n	8006c3c <_malloc_r+0xcc>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	eb04 0803 	add.w	r8, r4, r3
 8006bc4:	f000 f878 	bl	8006cb8 <_sbrk_r>
 8006bc8:	4580      	cmp	r8, r0
 8006bca:	d13a      	bne.n	8006c42 <_malloc_r+0xd2>
 8006bcc:	6821      	ldr	r1, [r4, #0]
 8006bce:	3503      	adds	r5, #3
 8006bd0:	1a6d      	subs	r5, r5, r1
 8006bd2:	f025 0503 	bic.w	r5, r5, #3
 8006bd6:	3508      	adds	r5, #8
 8006bd8:	2d0c      	cmp	r5, #12
 8006bda:	bf38      	it	cc
 8006bdc:	250c      	movcc	r5, #12
 8006bde:	4629      	mov	r1, r5
 8006be0:	4638      	mov	r0, r7
 8006be2:	f7ff ffa5 	bl	8006b30 <sbrk_aligned>
 8006be6:	3001      	adds	r0, #1
 8006be8:	d02b      	beq.n	8006c42 <_malloc_r+0xd2>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	442b      	add	r3, r5
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	e00e      	b.n	8006c10 <_malloc_r+0xa0>
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	1b52      	subs	r2, r2, r5
 8006bf6:	d41e      	bmi.n	8006c36 <_malloc_r+0xc6>
 8006bf8:	2a0b      	cmp	r2, #11
 8006bfa:	d916      	bls.n	8006c2a <_malloc_r+0xba>
 8006bfc:	1961      	adds	r1, r4, r5
 8006bfe:	42a3      	cmp	r3, r4
 8006c00:	6025      	str	r5, [r4, #0]
 8006c02:	bf18      	it	ne
 8006c04:	6059      	strne	r1, [r3, #4]
 8006c06:	6863      	ldr	r3, [r4, #4]
 8006c08:	bf08      	it	eq
 8006c0a:	6031      	streq	r1, [r6, #0]
 8006c0c:	5162      	str	r2, [r4, r5]
 8006c0e:	604b      	str	r3, [r1, #4]
 8006c10:	4638      	mov	r0, r7
 8006c12:	f104 060b 	add.w	r6, r4, #11
 8006c16:	f000 f865 	bl	8006ce4 <__malloc_unlock>
 8006c1a:	f026 0607 	bic.w	r6, r6, #7
 8006c1e:	1d23      	adds	r3, r4, #4
 8006c20:	1af2      	subs	r2, r6, r3
 8006c22:	d0b6      	beq.n	8006b92 <_malloc_r+0x22>
 8006c24:	1b9b      	subs	r3, r3, r6
 8006c26:	50a3      	str	r3, [r4, r2]
 8006c28:	e7b3      	b.n	8006b92 <_malloc_r+0x22>
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	bf0c      	ite	eq
 8006c30:	6032      	streq	r2, [r6, #0]
 8006c32:	605a      	strne	r2, [r3, #4]
 8006c34:	e7ec      	b.n	8006c10 <_malloc_r+0xa0>
 8006c36:	4623      	mov	r3, r4
 8006c38:	6864      	ldr	r4, [r4, #4]
 8006c3a:	e7b2      	b.n	8006ba2 <_malloc_r+0x32>
 8006c3c:	4634      	mov	r4, r6
 8006c3e:	6876      	ldr	r6, [r6, #4]
 8006c40:	e7b9      	b.n	8006bb6 <_malloc_r+0x46>
 8006c42:	230c      	movs	r3, #12
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4638      	mov	r0, r7
 8006c48:	f000 f84c 	bl	8006ce4 <__malloc_unlock>
 8006c4c:	e7a1      	b.n	8006b92 <_malloc_r+0x22>
 8006c4e:	6025      	str	r5, [r4, #0]
 8006c50:	e7de      	b.n	8006c10 <_malloc_r+0xa0>
 8006c52:	bf00      	nop
 8006c54:	20000644 	.word	0x20000644

08006c58 <_realloc_r>:
 8006c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	4614      	mov	r4, r2
 8006c60:	460e      	mov	r6, r1
 8006c62:	b921      	cbnz	r1, 8006c6e <_realloc_r+0x16>
 8006c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c68:	4611      	mov	r1, r2
 8006c6a:	f7ff bf81 	b.w	8006b70 <_malloc_r>
 8006c6e:	b92a      	cbnz	r2, 8006c7c <_realloc_r+0x24>
 8006c70:	f7ff ff12 	bl	8006a98 <_free_r>
 8006c74:	4625      	mov	r5, r4
 8006c76:	4628      	mov	r0, r5
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	f000 f838 	bl	8006cf0 <_malloc_usable_size_r>
 8006c80:	4284      	cmp	r4, r0
 8006c82:	4607      	mov	r7, r0
 8006c84:	d802      	bhi.n	8006c8c <_realloc_r+0x34>
 8006c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c8a:	d812      	bhi.n	8006cb2 <_realloc_r+0x5a>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4640      	mov	r0, r8
 8006c90:	f7ff ff6e 	bl	8006b70 <_malloc_r>
 8006c94:	4605      	mov	r5, r0
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0ed      	beq.n	8006c76 <_realloc_r+0x1e>
 8006c9a:	42bc      	cmp	r4, r7
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	bf28      	it	cs
 8006ca2:	463a      	movcs	r2, r7
 8006ca4:	f7ff fed0 	bl	8006a48 <memcpy>
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4640      	mov	r0, r8
 8006cac:	f7ff fef4 	bl	8006a98 <_free_r>
 8006cb0:	e7e1      	b.n	8006c76 <_realloc_r+0x1e>
 8006cb2:	4635      	mov	r5, r6
 8006cb4:	e7df      	b.n	8006c76 <_realloc_r+0x1e>
	...

08006cb8 <_sbrk_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d06      	ldr	r5, [pc, #24]	; (8006cd4 <_sbrk_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	f7fa fdbe 	bl	8001844 <_sbrk>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_sbrk_r+0x1a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_sbrk_r+0x1a>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	2000064c 	.word	0x2000064c

08006cd8 <__malloc_lock>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	; (8006ce0 <__malloc_lock+0x8>)
 8006cda:	f000 b811 	b.w	8006d00 <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	20000650 	.word	0x20000650

08006ce4 <__malloc_unlock>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <__malloc_unlock+0x8>)
 8006ce6:	f000 b80c 	b.w	8006d02 <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	20000650 	.word	0x20000650

08006cf0 <_malloc_usable_size_r>:
 8006cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf4:	1f18      	subs	r0, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bfbc      	itt	lt
 8006cfa:	580b      	ldrlt	r3, [r1, r0]
 8006cfc:	18c0      	addlt	r0, r0, r3
 8006cfe:	4770      	bx	lr

08006d00 <__retarget_lock_acquire_recursive>:
 8006d00:	4770      	bx	lr

08006d02 <__retarget_lock_release_recursive>:
 8006d02:	4770      	bx	lr

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
