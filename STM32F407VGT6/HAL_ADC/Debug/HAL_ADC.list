
HAL_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da8  08004f60  08004f60  00014f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d10  08005d10  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d14  08005d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000004d8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009725  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b1  00000000  00000000  000297cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000830  00000000  00000000  0002ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224c5  00000000  00000000  0002c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c176  00000000  00000000  0004e775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0267  00000000  00000000  0005a8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ab52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ba8  00000000  00000000  0012aba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f44 	.word	0x08004f44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08004f44 	.word	0x08004f44

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b974 	b.w	8000de0 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468e      	mov	lr, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d14d      	bne.n	8000bba <__udivmoddi4+0xaa>
 8000b1e:	428a      	cmp	r2, r1
 8000b20:	4694      	mov	ip, r2
 8000b22:	d969      	bls.n	8000bf8 <__udivmoddi4+0xe8>
 8000b24:	fab2 f282 	clz	r2, r2
 8000b28:	b152      	cbz	r2, 8000b40 <__udivmoddi4+0x30>
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	f1c2 0120 	rsb	r1, r2, #32
 8000b32:	fa20 f101 	lsr.w	r1, r0, r1
 8000b36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3e:	4094      	lsls	r4, r2
 8000b40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b44:	0c21      	lsrs	r1, r4, #16
 8000b46:	fbbe f6f8 	udiv	r6, lr, r8
 8000b4a:	fa1f f78c 	uxth.w	r7, ip
 8000b4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b56:	fb06 f107 	mul.w	r1, r6, r7
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x64>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b66:	f080 811f 	bcs.w	8000da8 <__udivmoddi4+0x298>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 811c 	bls.w	8000da8 <__udivmoddi4+0x298>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b84:	fb00 f707 	mul.w	r7, r0, r7
 8000b88:	42a7      	cmp	r7, r4
 8000b8a:	d90a      	bls.n	8000ba2 <__udivmoddi4+0x92>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b94:	f080 810a 	bcs.w	8000dac <__udivmoddi4+0x29c>
 8000b98:	42a7      	cmp	r7, r4
 8000b9a:	f240 8107 	bls.w	8000dac <__udivmoddi4+0x29c>
 8000b9e:	4464      	add	r4, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba6:	1be4      	subs	r4, r4, r7
 8000ba8:	2600      	movs	r6, #0
 8000baa:	b11d      	cbz	r5, 8000bb4 <__udivmoddi4+0xa4>
 8000bac:	40d4      	lsrs	r4, r2
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0xc2>
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	f000 80ef 	beq.w	8000da2 <__udivmoddi4+0x292>
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bca:	4630      	mov	r0, r6
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	fab3 f683 	clz	r6, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d14a      	bne.n	8000c70 <__udivmoddi4+0x160>
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d302      	bcc.n	8000be4 <__udivmoddi4+0xd4>
 8000bde:	4282      	cmp	r2, r0
 8000be0:	f200 80f9 	bhi.w	8000dd6 <__udivmoddi4+0x2c6>
 8000be4:	1a84      	subs	r4, r0, r2
 8000be6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bea:	2001      	movs	r0, #1
 8000bec:	469e      	mov	lr, r3
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d0e0      	beq.n	8000bb4 <__udivmoddi4+0xa4>
 8000bf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf6:	e7dd      	b.n	8000bb4 <__udivmoddi4+0xa4>
 8000bf8:	b902      	cbnz	r2, 8000bfc <__udivmoddi4+0xec>
 8000bfa:	deff      	udf	#255	; 0xff
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	f040 8092 	bne.w	8000d2a <__udivmoddi4+0x21a>
 8000c06:	eba1 010c 	sub.w	r1, r1, ip
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f fe8c 	uxth.w	lr, ip
 8000c12:	2601      	movs	r6, #1
 8000c14:	0c20      	lsrs	r0, r4, #16
 8000c16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c22:	fb0e f003 	mul.w	r0, lr, r3
 8000c26:	4288      	cmp	r0, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x12c>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x12a>
 8000c34:	4288      	cmp	r0, r1
 8000c36:	f200 80cb 	bhi.w	8000dd0 <__udivmoddi4+0x2c0>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c44:	fb07 1110 	mls	r1, r7, r0, r1
 8000c48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x156>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x154>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f200 80bb 	bhi.w	8000dda <__udivmoddi4+0x2ca>
 8000c64:	4608      	mov	r0, r1
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6e:	e79c      	b.n	8000baa <__udivmoddi4+0x9a>
 8000c70:	f1c6 0720 	rsb	r7, r6, #32
 8000c74:	40b3      	lsls	r3, r6
 8000c76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c82:	fa01 f306 	lsl.w	r3, r1, r6
 8000c86:	431c      	orrs	r4, r3
 8000c88:	40f9      	lsrs	r1, r7
 8000c8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c96:	0c20      	lsrs	r0, r4, #16
 8000c98:	fa1f fe8c 	uxth.w	lr, ip
 8000c9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000ca0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca4:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	fa02 f206 	lsl.w	r2, r2, r6
 8000cae:	d90b      	bls.n	8000cc8 <__udivmoddi4+0x1b8>
 8000cb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb8:	f080 8088 	bcs.w	8000dcc <__udivmoddi4+0x2bc>
 8000cbc:	4288      	cmp	r0, r1
 8000cbe:	f240 8085 	bls.w	8000dcc <__udivmoddi4+0x2bc>
 8000cc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc6:	4461      	add	r1, ip
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cdc:	458e      	cmp	lr, r1
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x1e2>
 8000ce0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce8:	d26c      	bcs.n	8000dc4 <__udivmoddi4+0x2b4>
 8000cea:	458e      	cmp	lr, r1
 8000cec:	d96a      	bls.n	8000dc4 <__udivmoddi4+0x2b4>
 8000cee:	3802      	subs	r0, #2
 8000cf0:	4461      	add	r1, ip
 8000cf2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cfa:	eba1 010e 	sub.w	r1, r1, lr
 8000cfe:	42a1      	cmp	r1, r4
 8000d00:	46c8      	mov	r8, r9
 8000d02:	46a6      	mov	lr, r4
 8000d04:	d356      	bcc.n	8000db4 <__udivmoddi4+0x2a4>
 8000d06:	d053      	beq.n	8000db0 <__udivmoddi4+0x2a0>
 8000d08:	b15d      	cbz	r5, 8000d22 <__udivmoddi4+0x212>
 8000d0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d12:	fa01 f707 	lsl.w	r7, r1, r7
 8000d16:	fa22 f306 	lsr.w	r3, r2, r6
 8000d1a:	40f1      	lsrs	r1, r6
 8000d1c:	431f      	orrs	r7, r3
 8000d1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d22:	2600      	movs	r6, #0
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	f1c2 0320 	rsb	r3, r2, #32
 8000d2e:	40d8      	lsrs	r0, r3
 8000d30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d34:	fa21 f303 	lsr.w	r3, r1, r3
 8000d38:	4091      	lsls	r1, r2
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d40:	fa1f fe8c 	uxth.w	lr, ip
 8000d44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d48:	fb07 3610 	mls	r6, r7, r0, r3
 8000d4c:	0c0b      	lsrs	r3, r1, #16
 8000d4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d52:	fb00 f60e 	mul.w	r6, r0, lr
 8000d56:	429e      	cmp	r6, r3
 8000d58:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x260>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d66:	d22f      	bcs.n	8000dc8 <__udivmoddi4+0x2b8>
 8000d68:	429e      	cmp	r6, r3
 8000d6a:	d92d      	bls.n	8000dc8 <__udivmoddi4+0x2b8>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4463      	add	r3, ip
 8000d70:	1b9b      	subs	r3, r3, r6
 8000d72:	b289      	uxth	r1, r1
 8000d74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d78:	fb07 3316 	mls	r3, r7, r6, r3
 8000d7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d80:	fb06 f30e 	mul.w	r3, r6, lr
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d908      	bls.n	8000d9a <__udivmoddi4+0x28a>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d90:	d216      	bcs.n	8000dc0 <__udivmoddi4+0x2b0>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d914      	bls.n	8000dc0 <__udivmoddi4+0x2b0>
 8000d96:	3e02      	subs	r6, #2
 8000d98:	4461      	add	r1, ip
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000da0:	e738      	b.n	8000c14 <__udivmoddi4+0x104>
 8000da2:	462e      	mov	r6, r5
 8000da4:	4628      	mov	r0, r5
 8000da6:	e705      	b.n	8000bb4 <__udivmoddi4+0xa4>
 8000da8:	4606      	mov	r6, r0
 8000daa:	e6e3      	b.n	8000b74 <__udivmoddi4+0x64>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6f8      	b.n	8000ba2 <__udivmoddi4+0x92>
 8000db0:	454b      	cmp	r3, r9
 8000db2:	d2a9      	bcs.n	8000d08 <__udivmoddi4+0x1f8>
 8000db4:	ebb9 0802 	subs.w	r8, r9, r2
 8000db8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7a3      	b.n	8000d08 <__udivmoddi4+0x1f8>
 8000dc0:	4646      	mov	r6, r8
 8000dc2:	e7ea      	b.n	8000d9a <__udivmoddi4+0x28a>
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	e794      	b.n	8000cf2 <__udivmoddi4+0x1e2>
 8000dc8:	4640      	mov	r0, r8
 8000dca:	e7d1      	b.n	8000d70 <__udivmoddi4+0x260>
 8000dcc:	46d0      	mov	r8, sl
 8000dce:	e77b      	b.n	8000cc8 <__udivmoddi4+0x1b8>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	e732      	b.n	8000c3c <__udivmoddi4+0x12c>
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	e709      	b.n	8000bee <__udivmoddi4+0xde>
 8000dda:	4464      	add	r4, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e742      	b.n	8000c66 <__udivmoddi4+0x156>

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	0000      	movs	r0, r0
	...

08000de8 <float_to_char>:

/**
 * Функция перевода из флоат в строку (выходная строка, число типа флоат, количество знаков после запятой)
 */
void float_to_char(uint8_t *out, float x, int decimalPoin)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	ed87 0a02 	vstr	s0, [r7, #8]
 8000df4:	6079      	str	r1, [r7, #4]
	int decimalPoint = decimalPoin + 1;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t absval = fabs(x);
 8000dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e00:	eef0 7ae7 	vabs.f32	s15, s15
 8000e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e08:	ee17 3a90 	vmov	r3, s15
 8000e0c:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t absvalcopy = absval;
 8000e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e10:	86fb      	strh	r3, [r7, #54]	; 0x36

    int decimalcount = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30

    while (absvalcopy != 0)
 8000e16:	e008      	b.n	8000e2a <float_to_char+0x42>
    {
        absvalcopy /= 10;
 8000e18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e1a:	4a79      	ldr	r2, [pc, #484]	; (8001000 <float_to_char+0x218>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	86fb      	strh	r3, [r7, #54]	; 0x36
        decimalcount++;
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	3301      	adds	r3, #1
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
    while (absvalcopy != 0)
 8000e2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f3      	bne.n	8000e18 <float_to_char+0x30>
    }

    uint8_t *absbuffer = malloc(sizeof(uint8_t) * (decimalcount + decimalPoint + 3)); // Увеличиваем размер на 2 для дополнительных символов (точка и два знака после запятой)
 8000e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	4413      	add	r3, r2
 8000e36:	3303      	adds	r3, #3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 f897 	bl	8003f6c <malloc>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	61fb      	str	r3, [r7, #28]
    int absbufferindex = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    absvalcopy = absval;
 8000e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e48:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint8_t temp;

    int i = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (x < 1 && x > -1) // Проверяем, меньше ли число 1
 8000e4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5e:	d510      	bpl.n	8000e82 <float_to_char+0x9a>
 8000e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e70:	dd07      	ble.n	8000e82 <float_to_char+0x9a>
    {
        *(absbuffer + absbufferindex) = '0'; // Добавляем ведущий ноль перед точкой
 8000e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	4413      	add	r3, r2
 8000e78:	2230      	movs	r2, #48	; 0x30
 8000e7a:	701a      	strb	r2, [r3, #0]
        absbufferindex++;
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	3301      	adds	r3, #1
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    for (i = decimalcount; i > 0; i--)
 8000e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e86:	e039      	b.n	8000efc <float_to_char+0x114>
    {
        uint16_t frst1 = fabs((absvalcopy / pow(10.0, i - 1)));
 8000e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff faee 	bl	800046c <__aeabi_i2d>
 8000e90:	4604      	mov	r4, r0
 8000e92:	460d      	mov	r5, r1
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fae7 	bl	800046c <__aeabi_i2d>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	ec43 2b11 	vmov	d1, r2, r3
 8000ea6:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8000ff8 <float_to_char+0x210>
 8000eaa:	f003 f92f 	bl	800410c <pow>
 8000eae:	ec53 2b10 	vmov	r2, r3, d0
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	f7ff fc6d 	bl	8000794 <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fded 	bl	8000aa0 <__aeabi_d2uiz>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	82fb      	strh	r3, [r7, #22]
        temp = (frst1 % 10) + 0x30;
 8000eca:	8afa      	ldrh	r2, [r7, #22]
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <float_to_char+0x218>)
 8000ece:	fba3 1302 	umull	r1, r3, r3, r2
 8000ed2:	08d9      	lsrs	r1, r3, #3
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3330      	adds	r3, #48	; 0x30
 8000ee4:	757b      	strb	r3, [r7, #21]
        *(absbuffer + absbufferindex) = temp;
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	4413      	add	r3, r2
 8000eec:	7d7a      	ldrb	r2, [r7, #21]
 8000eee:	701a      	strb	r2, [r3, #0]
        absbufferindex++;
 8000ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = decimalcount; i > 0; i--)
 8000ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dcc2      	bgt.n	8000e88 <float_to_char+0xa0>
    }

    if (decimalPoint > 0)
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd4d      	ble.n	8000fa4 <float_to_char+0x1bc>
    {
        *(absbuffer + absbufferindex) = '.';
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	222e      	movs	r2, #46	; 0x2e
 8000f10:	701a      	strb	r2, [r3, #0]
        absbufferindex++;
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	3301      	adds	r3, #1
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c

        //------------------- Decimal Extractor ---------------------//
        for (i = 1; i < decimalPoint + 1; i++)
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f1c:	e03e      	b.n	8000f9c <float_to_char+0x1b4>
        {
            uint32_t valueFloat = (x - (float)absval) * pow(10, i);
 8000f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f28:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f30:	ee17 0a90 	vmov	r0, s15
 8000f34:	f7ff faac 	bl	8000490 <__aeabi_f2d>
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460d      	mov	r5, r1
 8000f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f3e:	f7ff fa95 	bl	800046c <__aeabi_i2d>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	ec43 2b11 	vmov	d1, r2, r3
 8000f4a:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8000ff8 <float_to_char+0x210>
 8000f4e:	f003 f8dd 	bl	800410c <pow>
 8000f52:	ec53 2b10 	vmov	r2, r3, d0
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff faf1 	bl	8000540 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fd9b 	bl	8000aa0 <__aeabi_d2uiz>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	61bb      	str	r3, [r7, #24]
            *(absbuffer + absbufferindex) = ((valueFloat) % 10) + 0x30;
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <float_to_char+0x218>)
 8000f72:	fba3 2301 	umull	r2, r3, r3, r1
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	1aca      	subs	r2, r1, r3
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f86:	69f9      	ldr	r1, [r7, #28]
 8000f88:	440b      	add	r3, r1
 8000f8a:	3230      	adds	r2, #48	; 0x30
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
            absbufferindex++;
 8000f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f92:	3301      	adds	r3, #1
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = 1; i < decimalPoint + 1; i++)
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	3301      	adds	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dabc      	bge.n	8000f1e <float_to_char+0x136>
        }
    }

    for (i = 0; i < (decimalcount + decimalPoint + 1); i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa8:	e00a      	b.n	8000fc0 <float_to_char+0x1d8>
    {
        *(out + i) = *(absbuffer + i);
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	441a      	add	r2, r3
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	68f9      	ldr	r1, [r7, #12]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (decimalcount + decimalPoint + 1); i++)
 8000fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	4413      	add	r3, r2
 8000fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	ddee      	ble.n	8000faa <float_to_char+0x1c2>
    }

    i = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
    if (decimalPoint > 0)
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	dd01      	ble.n	8000fda <float_to_char+0x1f2>
        i = 1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    *(out + decimalcount + decimalPoint + i) = 0;
 8000fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	441a      	add	r2, r3
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	4413      	add	r3, r2
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
}
 8000fec:	bf00      	nop
 8000fee:	3738      	adds	r7, #56	; 0x38
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40240000 	.word	0x40240000
 8001000:	cccccccd 	.word	0xcccccccd

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b097      	sub	sp, #92	; 0x5c
 8001008:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	char str[8] = {0};
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f000 feab 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f857 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101a:	f000 f933 	bl	8001284 <MX_GPIO_Init>
  MX_ADC1_Init();
 800101e:	f000 f8b1 	bl	8001184 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001022:	f000 f901 	bl	8001228 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(hi2c1);
 8001026:	4c24      	ldr	r4, [pc, #144]	; (80010b8 <main+0xb4>)
 8001028:	4668      	mov	r0, sp
 800102a:	f104 0310 	add.w	r3, r4, #16
 800102e:	2244      	movs	r2, #68	; 0x44
 8001030:	4619      	mov	r1, r3
 8001032:	f002 ffa3 	bl	8003f7c <memcpy>
 8001036:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800103a:	f000 f95f 	bl	80012fc <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <main+0xb8>)
 8001040:	f000 ff6e 	bl	8001f20 <HAL_ADC_Start>
	  // нужно дождаться конца преобразования.
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001044:	2164      	movs	r1, #100	; 0x64
 8001046:	481d      	ldr	r0, [pc, #116]	; (80010bc <main+0xb8>)
 8001048:	f001 f86f 	bl	800212a <HAL_ADC_PollForConversion>
	  // Возьмем результат и сохраним его в переменную
	  u = ((float)HAL_ADC_GetValue(&hadc1))*3/4096;
 800104c:	481b      	ldr	r0, [pc, #108]	; (80010bc <main+0xb8>)
 800104e:	f001 f8f7 	bl	8002240 <HAL_ADC_GetValue>
 8001052:	ee07 0a90 	vmov	s15, r0
 8001056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800105e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001062:	eddf 6a17 	vldr	s13, [pc, #92]	; 80010c0 <main+0xbc>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	edc7 7a03 	vstr	s15, [r7, #12]
	  // Остановим преобразования
	  HAL_ADC_Stop(&hadc1);
 800106e:	4813      	ldr	r0, [pc, #76]	; (80010bc <main+0xb8>)
 8001070:	f001 f828 	bl	80020c4 <HAL_ADC_Stop>
//	  uint8_t result;
//	  sprintf(str, "%04d", i);
	  float_to_char(&str, u, 5);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2105      	movs	r1, #5
 8001078:	ed97 0a03 	vldr	s0, [r7, #12]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff feb3 	bl	8000de8 <float_to_char>
	  // Указаываю координаты символа
	  SSD1306_GotoXY(35, 0);
 8001082:	2100      	movs	r1, #0
 8001084:	2023      	movs	r0, #35	; 0x23
 8001086:	f000 fbc9 	bl	800181c <SSD1306_GotoXY>
	  // передаю строку
	  SSD1306_Puts(str,  &Font_11x18, 1);
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2201      	movs	r2, #1
 800108e:	490d      	ldr	r1, [pc, #52]	; (80010c4 <main+0xc0>)
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fc59 	bl	8001948 <SSD1306_Puts>
	  // обновляю экран
	  SSD1306_UpdateScreen(hi2c1);
 8001096:	4c08      	ldr	r4, [pc, #32]	; (80010b8 <main+0xb4>)
 8001098:	4668      	mov	r0, sp
 800109a:	f104 0310 	add.w	r3, r4, #16
 800109e:	2244      	movs	r2, #68	; 0x44
 80010a0:	4619      	mov	r1, r3
 80010a2:	f002 ff6b 	bl	8003f7c <memcpy>
 80010a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010aa:	f000 fae3 	bl	8001674 <SSD1306_UpdateScreen>
	  HAL_Delay(500);
 80010ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b2:	f000 fecd 	bl	8001e50 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80010b6:	e7c2      	b.n	800103e <main+0x3a>
 80010b8:	200000dc 	.word	0x200000dc
 80010bc:	20000094 	.word	0x20000094
 80010c0:	45800000 	.word	0x45800000
 80010c4:	20000000 	.word	0x20000000

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 ff5e 	bl	8003f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <SystemClock_Config+0xb4>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <SystemClock_Config+0xb4>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <SystemClock_Config+0xb4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <SystemClock_Config+0xb8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <SystemClock_Config+0xb8>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <SystemClock_Config+0xb8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f002 faa9 	bl	8003690 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001144:	f000 f8d4 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fd0c 	bl	8003b80 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800116e:	f000 f8bf 	bl	80012f0 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	; 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <MX_ADC1_Init+0x98>)
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <MX_ADC1_Init+0x9c>)
 800119a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_ADC1_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_ADC1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_ADC1_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_ADC1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_ADC1_Init+0x98>)
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <MX_ADC1_Init+0xa0>)
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_ADC1_Init+0x98>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_ADC1_Init+0x98>)
 80011de:	2201      	movs	r2, #1
 80011e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <MX_ADC1_Init+0x98>)
 80011e4:	f000 fe58 	bl	8001e98 <HAL_ADC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f000 f87f 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011f2:	2305      	movs	r3, #5
 80011f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_ADC1_Init+0x98>)
 8001204:	f001 f82a 	bl	800225c <HAL_ADC_ConfigChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800120e:	f000 f86f 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000094 	.word	0x20000094
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001

08001228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <MX_I2C1_Init+0x50>)
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_I2C1_Init+0x54>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_I2C1_Init+0x50>)
 8001234:	4a12      	ldr	r2, [pc, #72]	; (8001280 <MX_I2C1_Init+0x58>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_I2C1_Init+0x50>)
 8001246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_I2C1_Init+0x50>)
 8001266:	f001 fc99 	bl	8002b9c <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001270:	f000 f83e 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	200000dc 	.word	0x200000dc
 800127c:	40005400 	.word	0x40005400
 8001280:	00061a80 	.word	0x00061a80

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <MX_GPIO_Init+0x68>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a16      	ldr	r2, [pc, #88]	; (80012ec <MX_GPIO_Init+0x68>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_GPIO_Init+0x68>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_GPIO_Init+0x68>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <MX_GPIO_Init+0x68>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_GPIO_Init+0x68>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_GPIO_Init+0x68>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <MX_GPIO_Init+0x68>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_GPIO_Init+0x68>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <SSD1306_Init>:





uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c) {
 80012fc:	b084      	sub	sp, #16
 80012fe:	b580      	push	{r7, lr}
 8001300:	b096      	sub	sp, #88	; 0x58
 8001302:	af14      	add	r7, sp, #80	; 0x50
 8001304:	f107 0c10 	add.w	ip, r7, #16
 8001308:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 800130c:	f000 fb42 	bl	8001994 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001310:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001314:	2201      	movs	r2, #1
 8001316:	2178      	movs	r1, #120	; 0x78
 8001318:	f107 0010 	add.w	r0, r7, #16
 800131c:	f001 fe80 	bl	8003020 <HAL_I2C_IsDeviceReady>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SSD1306_Init+0x2e>
		/* Return false */
		return 0;
 8001326:	2300      	movs	r3, #0
 8001328:	e19b      	b.n	8001662 <SSD1306_Init+0x366>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800132a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800132e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001330:	e002      	b.n	8001338 <SSD1306_Init+0x3c>
		p--;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3b01      	subs	r3, #1
 8001336:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <SSD1306_Init+0x36>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE, hi2c); //display off
 800133e:	4668      	mov	r0, sp
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2250      	movs	r2, #80	; 0x50
 8001346:	4619      	mov	r1, r3
 8001348:	f002 fe18 	bl	8003f7c <memcpy>
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	22ae      	movs	r2, #174	; 0xae
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	; 0x78
 8001354:	f000 fb99 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20, hi2c); //Set Memory Addressing Mode
 8001358:	4668      	mov	r0, sp
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2250      	movs	r2, #80	; 0x50
 8001360:	4619      	mov	r1, r3
 8001362:	f002 fe0b 	bl	8003f7c <memcpy>
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2220      	movs	r2, #32
 800136a:	2100      	movs	r1, #0
 800136c:	2078      	movs	r0, #120	; 0x78
 800136e:	f000 fb8c 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10, hi2c); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001372:	4668      	mov	r0, sp
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2250      	movs	r2, #80	; 0x50
 800137a:	4619      	mov	r1, r3
 800137c:	f002 fdfe 	bl	8003f7c <memcpy>
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2210      	movs	r2, #16
 8001384:	2100      	movs	r1, #0
 8001386:	2078      	movs	r0, #120	; 0x78
 8001388:	f000 fb7f 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0, hi2c); //Set Page Start Address for Page Addressing Mode,0-7
 800138c:	4668      	mov	r0, sp
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2250      	movs	r2, #80	; 0x50
 8001394:	4619      	mov	r1, r3
 8001396:	f002 fdf1 	bl	8003f7c <memcpy>
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	22b0      	movs	r2, #176	; 0xb0
 800139e:	2100      	movs	r1, #0
 80013a0:	2078      	movs	r0, #120	; 0x78
 80013a2:	f000 fb72 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8, hi2c); //Set COM Output Scan Direction
 80013a6:	4668      	mov	r0, sp
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2250      	movs	r2, #80	; 0x50
 80013ae:	4619      	mov	r1, r3
 80013b0:	f002 fde4 	bl	8003f7c <memcpy>
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	22c8      	movs	r2, #200	; 0xc8
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	; 0x78
 80013bc:	f000 fb65 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00, hi2c); //---set low column address
 80013c0:	4668      	mov	r0, sp
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2250      	movs	r2, #80	; 0x50
 80013c8:	4619      	mov	r1, r3
 80013ca:	f002 fdd7 	bl	8003f7c <memcpy>
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2078      	movs	r0, #120	; 0x78
 80013d6:	f000 fb58 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10, hi2c); //---set high column address
 80013da:	4668      	mov	r0, sp
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	2250      	movs	r2, #80	; 0x50
 80013e2:	4619      	mov	r1, r3
 80013e4:	f002 fdca 	bl	8003f7c <memcpy>
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2210      	movs	r2, #16
 80013ec:	2100      	movs	r1, #0
 80013ee:	2078      	movs	r0, #120	; 0x78
 80013f0:	f000 fb4b 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40, hi2c); //--set start line address
 80013f4:	4668      	mov	r0, sp
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2250      	movs	r2, #80	; 0x50
 80013fc:	4619      	mov	r1, r3
 80013fe:	f002 fdbd 	bl	8003f7c <memcpy>
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	2100      	movs	r1, #0
 8001408:	2078      	movs	r0, #120	; 0x78
 800140a:	f000 fb3e 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81, hi2c); //--set contrast control register
 800140e:	4668      	mov	r0, sp
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2250      	movs	r2, #80	; 0x50
 8001416:	4619      	mov	r1, r3
 8001418:	f002 fdb0 	bl	8003f7c <memcpy>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2281      	movs	r2, #129	; 0x81
 8001420:	2100      	movs	r1, #0
 8001422:	2078      	movs	r0, #120	; 0x78
 8001424:	f000 fb31 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF, hi2c);
 8001428:	4668      	mov	r0, sp
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2250      	movs	r2, #80	; 0x50
 8001430:	4619      	mov	r1, r3
 8001432:	f002 fda3 	bl	8003f7c <memcpy>
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	22ff      	movs	r2, #255	; 0xff
 800143a:	2100      	movs	r1, #0
 800143c:	2078      	movs	r0, #120	; 0x78
 800143e:	f000 fb24 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1, hi2c); //--set segment re-map 0 to 127
 8001442:	4668      	mov	r0, sp
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2250      	movs	r2, #80	; 0x50
 800144a:	4619      	mov	r1, r3
 800144c:	f002 fd96 	bl	8003f7c <memcpy>
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	22a1      	movs	r2, #161	; 0xa1
 8001454:	2100      	movs	r1, #0
 8001456:	2078      	movs	r0, #120	; 0x78
 8001458:	f000 fb17 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6, hi2c); //--set normal display
 800145c:	4668      	mov	r0, sp
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2250      	movs	r2, #80	; 0x50
 8001464:	4619      	mov	r1, r3
 8001466:	f002 fd89 	bl	8003f7c <memcpy>
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	22a6      	movs	r2, #166	; 0xa6
 800146e:	2100      	movs	r1, #0
 8001470:	2078      	movs	r0, #120	; 0x78
 8001472:	f000 fb0a 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8, hi2c); //--set multiplex ratio(1 to 64)
 8001476:	4668      	mov	r0, sp
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2250      	movs	r2, #80	; 0x50
 800147e:	4619      	mov	r1, r3
 8001480:	f002 fd7c 	bl	8003f7c <memcpy>
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	22a8      	movs	r2, #168	; 0xa8
 8001488:	2100      	movs	r1, #0
 800148a:	2078      	movs	r0, #120	; 0x78
 800148c:	f000 fafd 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F, hi2c); //
 8001490:	4668      	mov	r0, sp
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2250      	movs	r2, #80	; 0x50
 8001498:	4619      	mov	r1, r3
 800149a:	f002 fd6f 	bl	8003f7c <memcpy>
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	223f      	movs	r2, #63	; 0x3f
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	; 0x78
 80014a6:	f000 faf0 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4, hi2c); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014aa:	4668      	mov	r0, sp
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2250      	movs	r2, #80	; 0x50
 80014b2:	4619      	mov	r1, r3
 80014b4:	f002 fd62 	bl	8003f7c <memcpy>
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	22a4      	movs	r2, #164	; 0xa4
 80014bc:	2100      	movs	r1, #0
 80014be:	2078      	movs	r0, #120	; 0x78
 80014c0:	f000 fae3 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3, hi2c); //-set display offset
 80014c4:	4668      	mov	r0, sp
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2250      	movs	r2, #80	; 0x50
 80014cc:	4619      	mov	r1, r3
 80014ce:	f002 fd55 	bl	8003f7c <memcpy>
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	22d3      	movs	r2, #211	; 0xd3
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f000 fad6 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00, hi2c); //-not offset
 80014de:	4668      	mov	r0, sp
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2250      	movs	r2, #80	; 0x50
 80014e6:	4619      	mov	r1, r3
 80014e8:	f002 fd48 	bl	8003f7c <memcpy>
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	; 0x78
 80014f4:	f000 fac9 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5, hi2c); //--set display clock divide ratio/oscillator frequency
 80014f8:	4668      	mov	r0, sp
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2250      	movs	r2, #80	; 0x50
 8001500:	4619      	mov	r1, r3
 8001502:	f002 fd3b 	bl	8003f7c <memcpy>
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	22d5      	movs	r2, #213	; 0xd5
 800150a:	2100      	movs	r1, #0
 800150c:	2078      	movs	r0, #120	; 0x78
 800150e:	f000 fabc 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0, hi2c); //--set divide ratio
 8001512:	4668      	mov	r0, sp
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2250      	movs	r2, #80	; 0x50
 800151a:	4619      	mov	r1, r3
 800151c:	f002 fd2e 	bl	8003f7c <memcpy>
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	22f0      	movs	r2, #240	; 0xf0
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	; 0x78
 8001528:	f000 faaf 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9, hi2c); //--set pre-charge period
 800152c:	4668      	mov	r0, sp
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2250      	movs	r2, #80	; 0x50
 8001534:	4619      	mov	r1, r3
 8001536:	f002 fd21 	bl	8003f7c <memcpy>
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	22d9      	movs	r2, #217	; 0xd9
 800153e:	2100      	movs	r1, #0
 8001540:	2078      	movs	r0, #120	; 0x78
 8001542:	f000 faa2 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22, hi2c); //
 8001546:	4668      	mov	r0, sp
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2250      	movs	r2, #80	; 0x50
 800154e:	4619      	mov	r1, r3
 8001550:	f002 fd14 	bl	8003f7c <memcpy>
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2222      	movs	r2, #34	; 0x22
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f000 fa95 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA, hi2c); //--set com pins hardware configuration
 8001560:	4668      	mov	r0, sp
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2250      	movs	r2, #80	; 0x50
 8001568:	4619      	mov	r1, r3
 800156a:	f002 fd07 	bl	8003f7c <memcpy>
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	22da      	movs	r2, #218	; 0xda
 8001572:	2100      	movs	r1, #0
 8001574:	2078      	movs	r0, #120	; 0x78
 8001576:	f000 fa88 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12, hi2c);
 800157a:	4668      	mov	r0, sp
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2250      	movs	r2, #80	; 0x50
 8001582:	4619      	mov	r1, r3
 8001584:	f002 fcfa 	bl	8003f7c <memcpy>
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2212      	movs	r2, #18
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	; 0x78
 8001590:	f000 fa7b 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB, hi2c); //--set vcomh
 8001594:	4668      	mov	r0, sp
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2250      	movs	r2, #80	; 0x50
 800159c:	4619      	mov	r1, r3
 800159e:	f002 fced 	bl	8003f7c <memcpy>
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	22db      	movs	r2, #219	; 0xdb
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fa6e 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20, hi2c); //0x20,0.77xVcc
 80015ae:	4668      	mov	r0, sp
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2250      	movs	r2, #80	; 0x50
 80015b6:	4619      	mov	r1, r3
 80015b8:	f002 fce0 	bl	8003f7c <memcpy>
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2220      	movs	r2, #32
 80015c0:	2100      	movs	r1, #0
 80015c2:	2078      	movs	r0, #120	; 0x78
 80015c4:	f000 fa61 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D, hi2c); //--set DC-DC enable
 80015c8:	4668      	mov	r0, sp
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	2250      	movs	r2, #80	; 0x50
 80015d0:	4619      	mov	r1, r3
 80015d2:	f002 fcd3 	bl	8003f7c <memcpy>
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	228d      	movs	r2, #141	; 0x8d
 80015da:	2100      	movs	r1, #0
 80015dc:	2078      	movs	r0, #120	; 0x78
 80015de:	f000 fa54 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14, hi2c); //
 80015e2:	4668      	mov	r0, sp
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2250      	movs	r2, #80	; 0x50
 80015ea:	4619      	mov	r1, r3
 80015ec:	f002 fcc6 	bl	8003f7c <memcpy>
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2214      	movs	r2, #20
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	; 0x78
 80015f8:	f000 fa47 	bl	8001a8a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF, hi2c); //--turn on SSD1306 panel
 80015fc:	4668      	mov	r0, sp
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2250      	movs	r2, #80	; 0x50
 8001604:	4619      	mov	r1, r3
 8001606:	f002 fcb9 	bl	8003f7c <memcpy>
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	22af      	movs	r2, #175	; 0xaf
 800160e:	2100      	movs	r1, #0
 8001610:	2078      	movs	r0, #120	; 0x78
 8001612:	f000 fa3a 	bl	8001a8a <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL, hi2c);
 8001616:	4668      	mov	r0, sp
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2250      	movs	r2, #80	; 0x50
 800161e:	4619      	mov	r1, r3
 8001620:	f002 fcac 	bl	8003f7c <memcpy>
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	222e      	movs	r2, #46	; 0x2e
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 fa2d 	bl	8001a8a <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001630:	2000      	movs	r0, #0
 8001632:	f000 f87b 	bl	800172c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(hi2c);
 8001636:	4668      	mov	r0, sp
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	2244      	movs	r2, #68	; 0x44
 800163e:	4619      	mov	r1, r3
 8001640:	f002 fc9c 	bl	8003f7c <memcpy>
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164a:	f000 f813 	bl	8001674 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <SSD1306_Init+0x374>)
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <SSD1306_Init+0x374>)
 8001656:	2200      	movs	r2, #0
 8001658:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SSD1306_Init+0x374>)
 800165c:	2201      	movs	r2, #1
 800165e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800166c:	b004      	add	sp, #16
 800166e:	4770      	bx	lr
 8001670:	20000530 	.word	0x20000530

08001674 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(I2C_HandleTypeDef hi2c) {
 8001674:	b084      	sub	sp, #16
 8001676:	b590      	push	{r4, r7, lr}
 8001678:	b099      	sub	sp, #100	; 0x64
 800167a:	af16      	add	r7, sp, #88	; 0x58
 800167c:	f107 0418 	add.w	r4, r7, #24
 8001680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001684:	2300      	movs	r3, #0
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	e03d      	b.n	8001706 <SSD1306_UpdateScreen+0x92>
		SSD1306_WRITECOMMAND(0xB0 + m, hi2c);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	3b50      	subs	r3, #80	; 0x50
 800168e:	b2dc      	uxtb	r4, r3
 8001690:	4668      	mov	r0, sp
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2250      	movs	r2, #80	; 0x50
 8001698:	4619      	mov	r1, r3
 800169a:	f002 fc6f 	bl	8003f7c <memcpy>
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4622      	mov	r2, r4
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	; 0x78
 80016a6:	f000 f9f0 	bl	8001a8a <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00, hi2c);
 80016aa:	4668      	mov	r0, sp
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2250      	movs	r2, #80	; 0x50
 80016b2:	4619      	mov	r1, r3
 80016b4:	f002 fc62 	bl	8003f7c <memcpy>
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	; 0x78
 80016c0:	f000 f9e3 	bl	8001a8a <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10, hi2c);
 80016c4:	4668      	mov	r0, sp
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	2250      	movs	r2, #80	; 0x50
 80016cc:	4619      	mov	r1, r3
 80016ce:	f002 fc55 	bl	8003f7c <memcpy>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2210      	movs	r2, #16
 80016d6:	2100      	movs	r1, #0
 80016d8:	2078      	movs	r0, #120	; 0x78
 80016da:	f000 f9d6 	bl	8001a8a <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH, hi2c);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	01db      	lsls	r3, r3, #7
 80016e2:	4a11      	ldr	r2, [pc, #68]	; (8001728 <SSD1306_UpdateScreen+0xb4>)
 80016e4:	189c      	adds	r4, r3, r2
 80016e6:	466b      	mov	r3, sp
 80016e8:	f107 0118 	add.w	r1, r7, #24
 80016ec:	2254      	movs	r2, #84	; 0x54
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fc44 	bl	8003f7c <memcpy>
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	4622      	mov	r2, r4
 80016f8:	2140      	movs	r1, #64	; 0x40
 80016fa:	2078      	movs	r0, #120	; 0x78
 80016fc:	f000 f960 	bl	80019c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	3301      	adds	r3, #1
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b07      	cmp	r3, #7
 800170a:	d9be      	bls.n	800168a <SSD1306_UpdateScreen+0x16>

	}
	memset(&SSD1306_Buffer, 0, sizeof(SSD1306_Buffer));
 800170c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001710:	2100      	movs	r1, #0
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <SSD1306_UpdateScreen+0xb4>)
 8001714:	f002 fc40 	bl	8003f98 <memset>
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001722:	b004      	add	sp, #16
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000130 	.word	0x20000130

0800172c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <SSD1306_Fill+0x14>
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <SSD1306_Fill+0x16>
 8001740:	23ff      	movs	r3, #255	; 0xff
 8001742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001746:	4619      	mov	r1, r3
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <SSD1306_Fill+0x2c>)
 800174a:	f002 fc25 	bl	8003f98 <memset>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000130 	.word	0x20000130

0800175c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
 8001766:	460b      	mov	r3, r1
 8001768:	80bb      	strh	r3, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	70fb      	strb	r3, [r7, #3]
	if (
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	2b7f      	cmp	r3, #127	; 0x7f
 8001772:	d848      	bhi.n	8001806 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	2b3f      	cmp	r3, #63	; 0x3f
 8001778:	d845      	bhi.n	8001806 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <SSD1306_DrawPixel+0xb8>)
 800177c:	791b      	ldrb	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d11a      	bne.n	80017cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	88bb      	ldrh	r3, [r7, #4]
 800179a:	08db      	lsrs	r3, r3, #3
 800179c:	b298      	uxth	r0, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	01db      	lsls	r3, r3, #7
 80017a2:	4413      	add	r3, r2
 80017a4:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <SSD1306_DrawPixel+0xbc>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	b25a      	sxtb	r2, r3
 80017aa:	88bb      	ldrh	r3, [r7, #4]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b259      	sxtb	r1, r3
 80017bc:	88fa      	ldrh	r2, [r7, #6]
 80017be:	4603      	mov	r3, r0
 80017c0:	01db      	lsls	r3, r3, #7
 80017c2:	4413      	add	r3, r2
 80017c4:	b2c9      	uxtb	r1, r1
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <SSD1306_DrawPixel+0xbc>)
 80017c8:	54d1      	strb	r1, [r2, r3]
 80017ca:	e01d      	b.n	8001808 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017cc:	88fa      	ldrh	r2, [r7, #6]
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	b298      	uxth	r0, r3
 80017d4:	4603      	mov	r3, r0
 80017d6:	01db      	lsls	r3, r3, #7
 80017d8:	4413      	add	r3, r2
 80017da:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <SSD1306_DrawPixel+0xbc>)
 80017dc:	5cd3      	ldrb	r3, [r2, r3]
 80017de:	b25a      	sxtb	r2, r3
 80017e0:	88bb      	ldrh	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	4013      	ands	r3, r2
 80017f4:	b259      	sxtb	r1, r3
 80017f6:	88fa      	ldrh	r2, [r7, #6]
 80017f8:	4603      	mov	r3, r0
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	4413      	add	r3, r2
 80017fe:	b2c9      	uxtb	r1, r1
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SSD1306_DrawPixel+0xbc>)
 8001802:	54d1      	strb	r1, [r2, r3]
 8001804:	e000      	b.n	8001808 <SSD1306_DrawPixel+0xac>
		return;
 8001806:	bf00      	nop
	}
}
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000530 	.word	0x20000530
 8001818:	20000130 	.word	0x20000130

0800181c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	80fb      	strh	r3, [r7, #6]
 8001828:	4613      	mov	r3, r2
 800182a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800182c:	4a05      	ldr	r2, [pc, #20]	; (8001844 <SSD1306_GotoXY+0x28>)
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <SSD1306_GotoXY+0x28>)
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	8053      	strh	r3, [r2, #2]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	20000530 	.word	0x20000530

08001848 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
 8001854:	4613      	mov	r3, r2
 8001856:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001858:	4b3a      	ldr	r3, [pc, #232]	; (8001944 <SSD1306_Putc+0xfc>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
	if (
 8001864:	2b7f      	cmp	r3, #127	; 0x7f
 8001866:	dc07      	bgt.n	8001878 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001868:	4b36      	ldr	r3, [pc, #216]	; (8001944 <SSD1306_Putc+0xfc>)
 800186a:	885b      	ldrh	r3, [r3, #2]
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	785b      	ldrb	r3, [r3, #1]
 8001872:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001874:	2b3f      	cmp	r3, #63	; 0x3f
 8001876:	dd01      	ble.n	800187c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001878:	2300      	movs	r3, #0
 800187a:	e05e      	b.n	800193a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e04b      	b.n	800191a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	3b20      	subs	r3, #32
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	7849      	ldrb	r1, [r1, #1]
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4619      	mov	r1, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	440b      	add	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e030      	b.n	8001908 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <SSD1306_Putc+0xfc>)
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b298      	uxth	r0, r3
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <SSD1306_Putc+0xfc>)
 80018c4:	885a      	ldrh	r2, [r3, #2]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	79ba      	ldrb	r2, [r7, #6]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff ff43 	bl	800175c <SSD1306_DrawPixel>
 80018d6:	e014      	b.n	8001902 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <SSD1306_Putc+0xfc>)
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b298      	uxth	r0, r3
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <SSD1306_Putc+0xfc>)
 80018e6:	885a      	ldrh	r2, [r3, #2]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	b299      	uxth	r1, r3
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	f7ff ff2d 	bl	800175c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3301      	adds	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4293      	cmp	r3, r2
 8001912:	d3c8      	bcc.n	80018a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	461a      	mov	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4293      	cmp	r3, r2
 8001924:	d3ad      	bcc.n	8001882 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <SSD1306_Putc+0xfc>)
 8001928:	881a      	ldrh	r2, [r3, #0]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <SSD1306_Putc+0xfc>)
 8001936:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001938:	79fb      	ldrb	r3, [r7, #7]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000530 	.word	0x20000530

08001948 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001956:	e012      	b.n	800197e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff71 	bl	8001848 <SSD1306_Putc>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d002      	beq.n	8001978 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	e008      	b.n	800198a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1e8      	bne.n	8001958 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	781b      	ldrb	r3, [r3, #0]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <ssd1306_I2C_Init+0x28>)
 800199c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800199e:	e002      	b.n	80019a6 <ssd1306_I2C_Init+0x12>
		p--;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f9      	bne.n	80019a0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--
	//MX_I2C1_Init();
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	0003d090 	.word	0x0003d090

080019c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count, I2C_HandleTypeDef hi2c) {
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b0c7      	sub	sp, #284	; 0x11c
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80019ce:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80019d2:	600a      	str	r2, [r1, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019de:	4622      	mov	r2, r4
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019e6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019ea:	4602      	mov	r2, r0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019f6:	460a      	mov	r2, r1
 80019f8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a06:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++) {
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a14:	e015      	b.n	8001a42 <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8001a16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a1a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a1e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	441a      	add	r2, r3
 8001a26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	7811      	ldrb	r1, [r2, #0]
 8001a2e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a32:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001a36:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++) {
 8001a38:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a42:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001a4c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001a50:	8812      	ldrh	r2, [r2, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d8df      	bhi.n	8001a16 <ssd1306_I2C_WriteMulti+0x56>
}
HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8001a56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a5a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b299      	uxth	r1, r3
 8001a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	200a      	movs	r0, #10
 8001a76:	9000      	str	r0, [sp, #0]
 8001a78:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8001a7c:	f001 f9d2 	bl	8002e24 <HAL_I2C_Master_Transmit>
}
 8001a80:	bf00      	nop
 8001a82:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd90      	pop	{r4, r7, pc}

08001a8a <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data, I2C_HandleTypeDef hi2c) {
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	71bb      	strb	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001aa4:	797b      	ldrb	r3, [r7, #5]
 8001aa6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	f107 020c 	add.w	r2, r7, #12
 8001ab0:	f107 001c 	add.w	r0, r7, #28
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f001 f9b3 	bl	8002e24 <HAL_I2C_Master_Transmit>
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ac8:	b002      	add	sp, #8
 8001aca:	4770      	bx	lr

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_MspInit+0x4c>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <HAL_ADC_MspInit+0x7c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d127      	bne.n	8001b8e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_ADC_MspInit+0x80>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <HAL_ADC_MspInit+0x80>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_ADC_MspInit+0x80>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_ADC_MspInit+0x80>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_ADC_MspInit+0x80>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_ADC_MspInit+0x80>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b76:	2320      	movs	r3, #32
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_ADC_MspInit+0x84>)
 8001b8a:	f000 fe6b 	bl	8002864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40012000 	.word	0x40012000
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_I2C_MspInit+0x84>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12b      	bne.n	8001c1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001be2:	23c0      	movs	r3, #192	; 0xc0
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be6:	2312      	movs	r3, #18
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <HAL_I2C_MspInit+0x8c>)
 8001bfe:	f000 fe31 	bl	8002864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40005400 	.word	0x40005400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <NMI_Handler+0x4>

08001c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <HardFault_Handler+0x4>

08001c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <MemManage_Handler+0x4>

08001c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c80:	f000 f8c6 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <_sbrk+0x5c>)
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <_sbrk+0x60>)
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x64>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <_sbrk+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb8:	f002 f92e 	bl	8003f18 <__errno>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e009      	b.n	8001cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <_sbrk+0x64>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <_sbrk+0x64>)
 8001cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20020000 	.word	0x20020000
 8001ce8:	00000400 	.word	0x00000400
 8001cec:	20000538 	.word	0x20000538
 8001cf0:	20000550 	.word	0x20000550

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <SystemInit+0x20>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <SystemInit+0x20>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d1c:	480d      	ldr	r0, [pc, #52]	; (8001d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d1e:	490e      	ldr	r1, [pc, #56]	; (8001d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d34:	4c0b      	ldr	r4, [pc, #44]	; (8001d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d42:	f7ff ffd7 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f002 f8ed 	bl	8003f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff f95b 	bl	8001004 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d5c:	08005d18 	.word	0x08005d18
  ldr r2, =_sbss
 8001d60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d64:	20000550 	.word	0x20000550

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 fd31 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fe94 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fd3b 	bl	800284a <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 fd11 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010
 8001e34:	2000053c 	.word	0x2000053c

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	2000053c 	.word	0x2000053c

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_Delay+0x44>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000010 	.word	0x20000010

08001e98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e033      	b.n	8001f16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fe30 	bl	8001b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d118      	bne.n	8001f08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ede:	f023 0302 	bic.w	r3, r3, #2
 8001ee2:	f043 0202 	orr.w	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fad8 	bl	80024a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
 8001f06:	e001      	b.n	8001f0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Start+0x1a>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0b2      	b.n	80020a0 <HAL_ADC_Start+0x180>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d018      	beq.n	8001f82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f60:	4b52      	ldr	r3, [pc, #328]	; (80020ac <HAL_ADC_Start+0x18c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a52      	ldr	r2, [pc, #328]	; (80020b0 <HAL_ADC_Start+0x190>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0c9a      	lsrs	r2, r3, #18
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f74:	e002      	b.n	8001f7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f9      	bne.n	8001f76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d17a      	bne.n	8002086 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f98:	f023 0301 	bic.w	r3, r3, #1
 8001f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fce:	d106      	bne.n	8001fde <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f023 0206 	bic.w	r2, r3, #6
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
 8001fdc:	e002      	b.n	8001fe4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_ADC_Start+0x194>)
 8001fee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ff8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	2b00      	cmp	r3, #0
 8002004:	d12a      	bne.n	800205c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <HAL_ADC_Start+0x198>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d015      	beq.n	800203c <HAL_ADC_Start+0x11c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <HAL_ADC_Start+0x19c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d105      	bne.n	8002026 <HAL_ADC_Start+0x106>
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_ADC_Start+0x194>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a25      	ldr	r2, [pc, #148]	; (80020c0 <HAL_ADC_Start+0x1a0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d136      	bne.n	800209e <HAL_ADC_Start+0x17e>
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_ADC_Start+0x194>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d130      	bne.n	800209e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d129      	bne.n	800209e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	e020      	b.n	800209e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <HAL_ADC_Start+0x198>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d11b      	bne.n	800209e <HAL_ADC_Start+0x17e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d114      	bne.n	800209e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e00b      	b.n	800209e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f043 0210 	orr.w	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	20000008 	.word	0x20000008
 80020b0:	431bde83 	.word	0x431bde83
 80020b4:	40012300 	.word	0x40012300
 80020b8:	40012000 	.word	0x40012000
 80020bc:	40012100 	.word	0x40012100
 80020c0:	40012200 	.word	0x40012200

080020c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Stop+0x16>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e021      	b.n	800211e <HAL_ADC_Stop+0x5a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002146:	d113      	bne.n	8002170 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002156:	d10b      	bne.n	8002170 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0220 	orr.w	r2, r3, #32
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e063      	b.n	8002238 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002170:	f7ff fe62 	bl	8001e38 <HAL_GetTick>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002176:	e021      	b.n	80021bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d01d      	beq.n	80021bc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_ADC_PollForConversion+0x6c>
 8002186:	f7ff fe57 	bl	8001e38 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d212      	bcs.n	80021bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d00b      	beq.n	80021bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f043 0204 	orr.w	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e03d      	b.n	8002238 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d1d6      	bne.n	8002178 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0212 	mvn.w	r2, #18
 80021d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d123      	bne.n	8002236 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11f      	bne.n	8002236 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d111      	bne.n	8002236 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d105      	bne.n	8002236 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1c>
 8002274:	2302      	movs	r3, #2
 8002276:	e105      	b.n	8002484 <HAL_ADC_ConfigChannel+0x228>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b09      	cmp	r3, #9
 8002286:	d925      	bls.n	80022d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	3b1e      	subs	r3, #30
 800229e:	2207      	movs	r2, #7
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43da      	mvns	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	400a      	ands	r2, r1
 80022ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68d9      	ldr	r1, [r3, #12]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4403      	add	r3, r0
 80022c6:	3b1e      	subs	r3, #30
 80022c8:	409a      	lsls	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	e022      	b.n	800231a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6919      	ldr	r1, [r3, #16]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	2207      	movs	r2, #7
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	400a      	ands	r2, r1
 80022f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	4603      	mov	r3, r0
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4403      	add	r3, r0
 8002310:	409a      	lsls	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b06      	cmp	r3, #6
 8002320:	d824      	bhi.n	800236c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	3b05      	subs	r3, #5
 8002334:	221f      	movs	r2, #31
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	400a      	ands	r2, r1
 8002342:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	4618      	mov	r0, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	3b05      	subs	r3, #5
 800235e:	fa00 f203 	lsl.w	r2, r0, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
 800236a:	e04c      	b.n	8002406 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d824      	bhi.n	80023be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b23      	subs	r3, #35	; 0x23
 8002386:	221f      	movs	r2, #31
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43da      	mvns	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	400a      	ands	r2, r1
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b23      	subs	r3, #35	; 0x23
 80023b0:	fa00 f203 	lsl.w	r2, r0, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
 80023bc:	e023      	b.n	8002406 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	3b41      	subs	r3, #65	; 0x41
 80023d0:	221f      	movs	r2, #31
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	400a      	ands	r2, r1
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3b41      	subs	r3, #65	; 0x41
 80023fa:	fa00 f203 	lsl.w	r2, r0, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_ADC_ConfigChannel+0x234>)
 8002408:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_ADC_ConfigChannel+0x238>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d109      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1cc>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b12      	cmp	r3, #18
 800241a:	d105      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	; (8002494 <HAL_ADC_ConfigChannel+0x238>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d123      	bne.n	800247a <HAL_ADC_ConfigChannel+0x21e>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b10      	cmp	r3, #16
 8002438:	d003      	beq.n	8002442 <HAL_ADC_ConfigChannel+0x1e6>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b11      	cmp	r3, #17
 8002440:	d11b      	bne.n	800247a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d111      	bne.n	800247a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_ADC_ConfigChannel+0x23c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_ADC_ConfigChannel+0x240>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0c9a      	lsrs	r2, r3, #18
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800246c:	e002      	b.n	8002474 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f9      	bne.n	800246e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40012300 	.word	0x40012300
 8002494:	40012000 	.word	0x40012000
 8002498:	20000008 	.word	0x20000008
 800249c:	431bde83 	.word	0x431bde83

080024a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a8:	4b79      	ldr	r3, [pc, #484]	; (8002690 <ADC_Init+0x1f0>)
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	021a      	lsls	r2, r3, #8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6899      	ldr	r1, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	4a58      	ldr	r2, [pc, #352]	; (8002694 <ADC_Init+0x1f4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d022      	beq.n	800257e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002546:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6899      	ldr	r1, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6899      	ldr	r1, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	e00f      	b.n	800259e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800258c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800259c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0202 	bic.w	r2, r2, #2
 80025ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e1b      	ldrb	r3, [r3, #24]
 80025b8:	005a      	lsls	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	3b01      	subs	r3, #1
 80025f8:	035a      	lsls	r2, r3, #13
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	e007      	b.n	8002614 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002612:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	3b01      	subs	r3, #1
 8002630:	051a      	lsls	r2, r3, #20
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002656:	025a      	lsls	r2, r3, #9
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6899      	ldr	r1, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	029a      	lsls	r2, r3, #10
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40012300 	.word	0x40012300
 8002694:	0f000001 	.word	0x0f000001

08002698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b4:	4013      	ands	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <__NVIC_SetPriorityGrouping+0x44>)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60d3      	str	r3, [r2, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <__NVIC_GetPriorityGrouping+0x18>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	f003 0307 	and.w	r3, r3, #7
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff8e 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff47 	bl	8002698 <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff5c 	bl	80026e0 <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff8e 	bl	8002750 <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5d 	bl	80026fc <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffb0 	bl	80027b8 <SysTick_Config>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e16b      	b.n	8002b58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002880:	2201      	movs	r2, #1
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	f040 815a 	bne.w	8002b52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d130      	bne.n	8002918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 0201 	and.w	r2, r3, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b03      	cmp	r3, #3
 8002922:	d017      	beq.n	8002954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d123      	bne.n	80029a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	08da      	lsrs	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3208      	adds	r2, #8
 8002968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80b4 	beq.w	8002b52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <HAL_GPIO_Init+0x30c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a5f      	ldr	r2, [pc, #380]	; (8002b70 <HAL_GPIO_Init+0x30c>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_GPIO_Init+0x30c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a06:	4a5b      	ldr	r2, [pc, #364]	; (8002b74 <HAL_GPIO_Init+0x310>)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	089b      	lsrs	r3, r3, #2
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_GPIO_Init+0x314>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d02b      	beq.n	8002a8a <HAL_GPIO_Init+0x226>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a51      	ldr	r2, [pc, #324]	; (8002b7c <HAL_GPIO_Init+0x318>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d025      	beq.n	8002a86 <HAL_GPIO_Init+0x222>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a50      	ldr	r2, [pc, #320]	; (8002b80 <HAL_GPIO_Init+0x31c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01f      	beq.n	8002a82 <HAL_GPIO_Init+0x21e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <HAL_GPIO_Init+0x320>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d019      	beq.n	8002a7e <HAL_GPIO_Init+0x21a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a4e      	ldr	r2, [pc, #312]	; (8002b88 <HAL_GPIO_Init+0x324>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_GPIO_Init+0x216>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <HAL_GPIO_Init+0x328>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00d      	beq.n	8002a76 <HAL_GPIO_Init+0x212>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4c      	ldr	r2, [pc, #304]	; (8002b90 <HAL_GPIO_Init+0x32c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <HAL_GPIO_Init+0x20e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <HAL_GPIO_Init+0x330>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_GPIO_Init+0x20a>
 8002a6a:	2307      	movs	r3, #7
 8002a6c:	e00e      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a6e:	2308      	movs	r3, #8
 8002a70:	e00c      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a72:	2306      	movs	r3, #6
 8002a74:	e00a      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x228>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9c:	4935      	ldr	r1, [pc, #212]	; (8002b74 <HAL_GPIO_Init+0x310>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ace:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad4:	4b30      	ldr	r3, [pc, #192]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f ae90 	bls.w	8002880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40021400 	.word	0x40021400
 8002b90:	40021800 	.word	0x40021800
 8002b94:	40021c00 	.word	0x40021c00
 8002b98:	40013c00 	.word	0x40013c00

08002b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e12b      	b.n	8002e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe ffee 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2224      	movs	r2, #36	; 0x24
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c00:	f001 f976 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8002c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a81      	ldr	r2, [pc, #516]	; (8002e10 <HAL_I2C_Init+0x274>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d807      	bhi.n	8002c20 <HAL_I2C_Init+0x84>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a80      	ldr	r2, [pc, #512]	; (8002e14 <HAL_I2C_Init+0x278>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	e006      	b.n	8002c2e <HAL_I2C_Init+0x92>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a7d      	ldr	r2, [pc, #500]	; (8002e18 <HAL_I2C_Init+0x27c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bf94      	ite	ls
 8002c28:	2301      	movls	r3, #1
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0e7      	b.n	8002e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a78      	ldr	r2, [pc, #480]	; (8002e1c <HAL_I2C_Init+0x280>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	0c9b      	lsrs	r3, r3, #18
 8002c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a6a      	ldr	r2, [pc, #424]	; (8002e10 <HAL_I2C_Init+0x274>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d802      	bhi.n	8002c70 <HAL_I2C_Init+0xd4>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	e009      	b.n	8002c84 <HAL_I2C_Init+0xe8>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	4a69      	ldr	r2, [pc, #420]	; (8002e20 <HAL_I2C_Init+0x284>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	3301      	adds	r3, #1
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	495c      	ldr	r1, [pc, #368]	; (8002e10 <HAL_I2C_Init+0x274>)
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	d819      	bhi.n	8002cd8 <HAL_I2C_Init+0x13c>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1e59      	subs	r1, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb2:	1c59      	adds	r1, r3, #1
 8002cb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb8:	400b      	ands	r3, r1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_I2C_Init+0x138>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e59      	subs	r1, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd2:	e051      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	e04f      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d111      	bne.n	8002d04 <HAL_I2C_Init+0x168>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e012      	b.n	8002d2a <HAL_I2C_Init+0x18e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1e58      	subs	r0, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	0099      	lsls	r1, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_I2C_Init+0x196>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e022      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10e      	bne.n	8002d58 <HAL_I2C_Init+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1e58      	subs	r0, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	440b      	add	r3, r1
 8002d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d56:	e00f      	b.n	8002d78 <HAL_I2C_Init+0x1dc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	0099      	lsls	r1, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	6809      	ldr	r1, [r1, #0]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6911      	ldr	r1, [r2, #16]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68d2      	ldr	r2, [r2, #12]
 8002db2:	4311      	orrs	r1, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	000186a0 	.word	0x000186a0
 8002e14:	001e847f 	.word	0x001e847f
 8002e18:	003d08ff 	.word	0x003d08ff
 8002e1c:	431bde83 	.word	0x431bde83
 8002e20:	10624dd3 	.word	0x10624dd3

08002e24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	460b      	mov	r3, r1
 8002e32:	817b      	strh	r3, [r7, #10]
 8002e34:	4613      	mov	r3, r2
 8002e36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7fe fffe 	bl	8001e38 <HAL_GetTick>
 8002e3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	f040 80e0 	bne.w	800300c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2319      	movs	r3, #25
 8002e52:	2201      	movs	r2, #1
 8002e54:	4970      	ldr	r1, [pc, #448]	; (8003018 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fa92 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e62:	2302      	movs	r3, #2
 8002e64:	e0d3      	b.n	800300e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_I2C_Master_Transmit+0x50>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0cc      	b.n	800300e <HAL_I2C_Master_Transmit+0x1ea>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d007      	beq.n	8002e9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0201 	orr.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2221      	movs	r2, #33	; 0x21
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	893a      	ldrh	r2, [r7, #8]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a50      	ldr	r2, [pc, #320]	; (800301c <HAL_I2C_Master_Transmit+0x1f8>)
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f9ca 	bl	800327c <I2C_MasterRequestWrite>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e08d      	b.n	800300e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f08:	e066      	b.n	8002fd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fb0c 	bl	800352c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00d      	beq.n	8002f36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d107      	bne.n	8002f32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06b      	b.n	800300e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d11b      	bne.n	8002fac <HAL_I2C_Master_Transmit+0x188>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d017      	beq.n	8002fac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	6a39      	ldr	r1, [r7, #32]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fafc 	bl	80035ae <I2C_WaitOnBTFFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00d      	beq.n	8002fd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d107      	bne.n	8002fd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e01a      	b.n	800300e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d194      	bne.n	8002f0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	00100002 	.word	0x00100002
 800301c:	ffff0000 	.word	0xffff0000

08003020 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7fe ff02 	bl	8001e38 <HAL_GetTick>
 8003034:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	f040 8111 	bne.w	800326a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2319      	movs	r3, #25
 800304e:	2201      	movs	r2, #1
 8003050:	4988      	ldr	r1, [pc, #544]	; (8003274 <HAL_I2C_IsDeviceReady+0x254>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f994 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	e104      	b.n	800326c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_I2C_IsDeviceReady+0x50>
 800306c:	2302      	movs	r3, #2
 800306e:	e0fd      	b.n	800326c <HAL_I2C_IsDeviceReady+0x24c>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d007      	beq.n	8003096 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2224      	movs	r2, #36	; 0x24
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a70      	ldr	r2, [pc, #448]	; (8003278 <HAL_I2C_IsDeviceReady+0x258>)
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f952 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d103      	bne.n	80030fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0b6      	b.n	800326c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800310c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800310e:	f7fe fe93 	bl	8001e38 <HAL_GetTick>
 8003112:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003142:	e025      	b.n	8003190 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003144:	f7fe fe78 	bl	8001e38 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <HAL_I2C_IsDeviceReady+0x13a>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	22a0      	movs	r2, #160	; 0xa0
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b02      	cmp	r3, #2
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2ba0      	cmp	r3, #160	; 0xa0
 800319a:	d005      	beq.n	80031a8 <HAL_I2C_IsDeviceReady+0x188>
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_I2C_IsDeviceReady+0x188>
 80031a2:	7dbb      	ldrb	r3, [r7, #22]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0cd      	beq.n	8003144 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d129      	bne.n	8003212 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2319      	movs	r3, #25
 80031ea:	2201      	movs	r2, #1
 80031ec:	4921      	ldr	r1, [pc, #132]	; (8003274 <HAL_I2C_IsDeviceReady+0x254>)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f8c6 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e036      	b.n	800326c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e02c      	b.n	800326c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003220:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800322a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2319      	movs	r3, #25
 8003232:	2201      	movs	r2, #1
 8003234:	490f      	ldr	r1, [pc, #60]	; (8003274 <HAL_I2C_IsDeviceReady+0x254>)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f8a2 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e012      	b.n	800326c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	3301      	adds	r3, #1
 800324a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	f4ff af32 	bcc.w	80030ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	00100002 	.word	0x00100002
 8003278:	ffff0000 	.word	0xffff0000

0800327c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	460b      	mov	r3, r1
 800328a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d006      	beq.n	80032a6 <I2C_MasterRequestWrite+0x2a>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d003      	beq.n	80032a6 <I2C_MasterRequestWrite+0x2a>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032a4:	d108      	bne.n	80032b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e00b      	b.n	80032d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b12      	cmp	r3, #18
 80032be:	d107      	bne.n	80032d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f84f 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f6:	d103      	bne.n	8003300 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e035      	b.n	8003370 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800330c:	d108      	bne.n	8003320 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	e01b      	b.n	8003358 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003320:	897b      	ldrh	r3, [r7, #10]
 8003322:	11db      	asrs	r3, r3, #7
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 0306 	and.w	r3, r3, #6
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f063 030f 	orn	r3, r3, #15
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	490e      	ldr	r1, [pc, #56]	; (8003378 <I2C_MasterRequestWrite+0xfc>)
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f875 	bl	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e010      	b.n	8003370 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4907      	ldr	r1, [pc, #28]	; (800337c <I2C_MasterRequestWrite+0x100>)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f865 	bl	800342e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	00010008 	.word	0x00010008
 800337c:	00010002 	.word	0x00010002

08003380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003390:	e025      	b.n	80033de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d021      	beq.n	80033de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fe fd4d 	bl	8001e38 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e023      	b.n	8003426 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10d      	bne.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	e00c      	b.n	800341e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	429a      	cmp	r2, r3
 8003422:	d0b6      	beq.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343c:	e051      	b.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344c:	d123      	bne.n	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003466:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0204 	orr.w	r2, r3, #4
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e046      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d021      	beq.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe fccb 	bl	8001e38 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d116      	bne.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e020      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10c      	bne.n	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e00b      	b.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d18d      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003538:	e02d      	b.n	8003596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f878 	bl	8003630 <I2C_IsAcknowledgeFailed>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e02d      	b.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d021      	beq.n	8003596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fc71 	bl	8001e38 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d116      	bne.n	8003596 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e007      	b.n	80035a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d1ca      	bne.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ba:	e02d      	b.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f837 	bl	8003630 <I2C_IsAcknowledgeFailed>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e02d      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d021      	beq.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7fe fc30 	bl	8001e38 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e007      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d1ca      	bne.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	d11b      	bne.n	8003680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f043 0204 	orr.w	r2, r3, #4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e267      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d075      	beq.n	800379a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ae:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d00c      	beq.n	80036d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ba:	4b85      	ldr	r3, [pc, #532]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d112      	bne.n	80036ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c6:	4b82      	ldr	r3, [pc, #520]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d2:	d10b      	bne.n	80036ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	4b7e      	ldr	r3, [pc, #504]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d05b      	beq.n	8003798 <HAL_RCC_OscConfig+0x108>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d157      	bne.n	8003798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e242      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d106      	bne.n	8003704 <HAL_RCC_OscConfig+0x74>
 80036f6:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e01d      	b.n	8003740 <HAL_RCC_OscConfig+0xb0>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x98>
 800370e:	4b70      	ldr	r3, [pc, #448]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6f      	ldr	r2, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b6d      	ldr	r3, [pc, #436]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a6c      	ldr	r2, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0xb0>
 8003728:	4b69      	ldr	r3, [pc, #420]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a68      	ldr	r2, [pc, #416]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800372e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4b66      	ldr	r3, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a65      	ldr	r2, [pc, #404]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800373a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800373e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe fb76 	bl	8001e38 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fb72 	bl	8001e38 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e207      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4b5b      	ldr	r3, [pc, #364]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0xc0>
 800376e:	e014      	b.n	800379a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe fb62 	bl	8001e38 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fb5e 	bl	8001e38 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e1f3      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0xe8>
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d063      	beq.n	800386e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d11c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037be:	4b44      	ldr	r3, [pc, #272]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d116      	bne.n	80037f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_RCC_OscConfig+0x152>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e1c7      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4937      	ldr	r1, [pc, #220]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	e03a      	b.n	800386e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCC_OscConfig+0x244>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fe fb17 	bl	8001e38 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380e:	f7fe fb13 	bl	8001e38 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e1a8      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4925      	ldr	r1, [pc, #148]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
 8003840:	e015      	b.n	800386e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x244>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe faf6 	bl	8001e38 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003850:	f7fe faf2 	bl	8001e38 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e187      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d036      	beq.n	80038e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_RCC_OscConfig+0x248>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe fad6 	bl	8001e38 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003890:	f7fe fad2 	bl	8001e38 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e167      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_OscConfig+0x240>)
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x200>
 80038ae:	e01b      	b.n	80038e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_OscConfig+0x248>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fe fabf 	bl	8001e38 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	e00e      	b.n	80038dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038be:	f7fe fabb 	bl	8001e38 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d907      	bls.n	80038dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e150      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	42470000 	.word	0x42470000
 80038d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	4b88      	ldr	r3, [pc, #544]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ea      	bne.n	80038be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8097 	beq.w	8003a24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fa:	4b81      	ldr	r3, [pc, #516]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	4b7d      	ldr	r3, [pc, #500]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4a7c      	ldr	r2, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	; 0x40
 8003916:	4b7a      	ldr	r3, [pc, #488]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b77      	ldr	r3, [pc, #476]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d118      	bne.n	8003964 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003932:	4b74      	ldr	r3, [pc, #464]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a73      	ldr	r2, [pc, #460]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393e:	f7fe fa7b 	bl	8001e38 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003946:	f7fe fa77 	bl	8001e38 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e10c      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCC_OscConfig+0x474>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x2ea>
 800396c:	4b64      	ldr	r3, [pc, #400]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a63      	ldr	r2, [pc, #396]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	e01c      	b.n	80039b4 <HAL_RCC_OscConfig+0x324>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x30c>
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a5e      	ldr	r2, [pc, #376]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a5b      	ldr	r2, [pc, #364]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0x324>
 800399c:	4b58      	ldr	r3, [pc, #352]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a57      	ldr	r2, [pc, #348]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	4b55      	ldr	r3, [pc, #340]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a54      	ldr	r2, [pc, #336]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe fa3c 	bl	8001e38 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe fa38 	bl	8001e38 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0cb      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ee      	beq.n	80039c4 <HAL_RCC_OscConfig+0x334>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fa26 	bl	8001e38 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fe fa22 	bl	8001e38 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0b5      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a38      	ldr	r2, [pc, #224]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80a1 	beq.w	8003b70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2e:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d05c      	beq.n	8003af4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d141      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCC_OscConfig+0x478>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fe f9f6 	bl	8001e38 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fe f9f2 	bl	8001e38 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e087      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	019b      	lsls	r3, r3, #6
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	491b      	ldr	r1, [pc, #108]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x478>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe f9cb 	bl	8001e38 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe f9c7 	bl	8001e38 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e05c      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x416>
 8003ac4:	e054      	b.n	8003b70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <HAL_RCC_OscConfig+0x478>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe f9b4 	bl	8001e38 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe f9b0 	bl	8001e38 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e045      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x444>
 8003af2:	e03d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e038      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40007000 	.word	0x40007000
 8003b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x4ec>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d028      	beq.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d121      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d11a      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d111      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	3b01      	subs	r3, #1
 8003b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800

08003b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0cc      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b68      	ldr	r3, [pc, #416]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d90c      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b65      	ldr	r3, [pc, #404]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0b8      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd4:	4b59      	ldr	r3, [pc, #356]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4a58      	ldr	r2, [pc, #352]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bec:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	494d      	ldr	r1, [pc, #308]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d044      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d119      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e07f      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e06f      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e067      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4934      	ldr	r1, [pc, #208]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fe f8e2 	bl	8001e38 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fe f8de 	bl	8001e38 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e04f      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b2b      	ldr	r3, [pc, #172]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d20c      	bcs.n	8003cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e032      	b.n	8003d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4916      	ldr	r1, [pc, #88]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	490e      	ldr	r1, [pc, #56]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d06:	f000 f821 	bl	8003d4c <HAL_RCC_GetSysClockFreq>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	490a      	ldr	r1, [pc, #40]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	5ccb      	ldrb	r3, [r1, r3]
 8003d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1e:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1c8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe f842 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40023c00 	.word	0x40023c00
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	08005cbc 	.word	0x08005cbc
 8003d44:	20000008 	.word	0x20000008
 8003d48:	2000000c 	.word	0x2000000c

08003d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d50:	b090      	sub	sp, #64	; 0x40
 8003d52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	2300      	movs	r3, #0
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d64:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d00d      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x40>
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	f200 80a1 	bhi.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x34>
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d7e:	e09b      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d80:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d84:	e09b      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d86:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d8a:	e098      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d96:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d028      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da2:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	2200      	movs	r2, #0
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	627a      	str	r2, [r7, #36]	; 0x24
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003db4:	2100      	movs	r1, #0
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003db8:	fb03 f201 	mul.w	r2, r3, r1
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	fb00 f303 	mul.w	r3, r0, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a43      	ldr	r2, [pc, #268]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dc6:	fba0 1202 	umull	r1, r2, r0, r2
 8003dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dcc:	460a      	mov	r2, r1
 8003dce:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd2:	4413      	add	r3, r2
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	2200      	movs	r2, #0
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	61fa      	str	r2, [r7, #28]
 8003dde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003de6:	f7fc fe7b 	bl	8000ae0 <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4613      	mov	r3, r2
 8003df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df2:	e053      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df4:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	099b      	lsrs	r3, r3, #6
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	617a      	str	r2, [r7, #20]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e06:	f04f 0b00 	mov.w	fp, #0
 8003e0a:	4652      	mov	r2, sl
 8003e0c:	465b      	mov	r3, fp
 8003e0e:	f04f 0000 	mov.w	r0, #0
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	0159      	lsls	r1, r3, #5
 8003e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e1c:	0150      	lsls	r0, r2, #5
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	ebb2 080a 	subs.w	r8, r2, sl
 8003e26:	eb63 090b 	sbc.w	r9, r3, fp
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003e42:	eb63 0509 	sbc.w	r5, r3, r9
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	00eb      	lsls	r3, r5, #3
 8003e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e54:	00e2      	lsls	r2, r4, #3
 8003e56:	4614      	mov	r4, r2
 8003e58:	461d      	mov	r5, r3
 8003e5a:	eb14 030a 	adds.w	r3, r4, sl
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	eb45 030b 	adc.w	r3, r5, fp
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e72:	4629      	mov	r1, r5
 8003e74:	028b      	lsls	r3, r1, #10
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	028a      	lsls	r2, r1, #10
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e86:	2200      	movs	r2, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	60fa      	str	r2, [r7, #12]
 8003e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e90:	f7fc fe26 	bl	8000ae0 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eb6:	e002      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3740      	adds	r7, #64	; 0x40
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	017d7840 	.word	0x017d7840

08003ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000008 	.word	0x20000008

08003ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ef4:	f7ff fff0 	bl	8003ed8 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0a9b      	lsrs	r3, r3, #10
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4903      	ldr	r1, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40023800 	.word	0x40023800
 8003f14:	08005ccc 	.word	0x08005ccc

08003f18 <__errno>:
 8003f18:	4b01      	ldr	r3, [pc, #4]	; (8003f20 <__errno+0x8>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000014 	.word	0x20000014

08003f24 <__libc_init_array>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	4d0d      	ldr	r5, [pc, #52]	; (8003f5c <__libc_init_array+0x38>)
 8003f28:	4c0d      	ldr	r4, [pc, #52]	; (8003f60 <__libc_init_array+0x3c>)
 8003f2a:	1b64      	subs	r4, r4, r5
 8003f2c:	10a4      	asrs	r4, r4, #2
 8003f2e:	2600      	movs	r6, #0
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	d109      	bne.n	8003f48 <__libc_init_array+0x24>
 8003f34:	4d0b      	ldr	r5, [pc, #44]	; (8003f64 <__libc_init_array+0x40>)
 8003f36:	4c0c      	ldr	r4, [pc, #48]	; (8003f68 <__libc_init_array+0x44>)
 8003f38:	f001 f804 	bl	8004f44 <_init>
 8003f3c:	1b64      	subs	r4, r4, r5
 8003f3e:	10a4      	asrs	r4, r4, #2
 8003f40:	2600      	movs	r6, #0
 8003f42:	42a6      	cmp	r6, r4
 8003f44:	d105      	bne.n	8003f52 <__libc_init_array+0x2e>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4c:	4798      	blx	r3
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7ee      	b.n	8003f30 <__libc_init_array+0xc>
 8003f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f56:	4798      	blx	r3
 8003f58:	3601      	adds	r6, #1
 8003f5a:	e7f2      	b.n	8003f42 <__libc_init_array+0x1e>
 8003f5c:	08005d10 	.word	0x08005d10
 8003f60:	08005d10 	.word	0x08005d10
 8003f64:	08005d10 	.word	0x08005d10
 8003f68:	08005d14 	.word	0x08005d14

08003f6c <malloc>:
 8003f6c:	4b02      	ldr	r3, [pc, #8]	; (8003f78 <malloc+0xc>)
 8003f6e:	4601      	mov	r1, r0
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	f000 b839 	b.w	8003fe8 <_malloc_r>
 8003f76:	bf00      	nop
 8003f78:	20000014 	.word	0x20000014

08003f7c <memcpy>:
 8003f7c:	440a      	add	r2, r1
 8003f7e:	4291      	cmp	r1, r2
 8003f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f84:	d100      	bne.n	8003f88 <memcpy+0xc>
 8003f86:	4770      	bx	lr
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f92:	4291      	cmp	r1, r2
 8003f94:	d1f9      	bne.n	8003f8a <memcpy+0xe>
 8003f96:	bd10      	pop	{r4, pc}

08003f98 <memset>:
 8003f98:	4402      	add	r2, r0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d100      	bne.n	8003fa2 <memset+0xa>
 8003fa0:	4770      	bx	lr
 8003fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa6:	e7f9      	b.n	8003f9c <memset+0x4>

08003fa8 <sbrk_aligned>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4e0e      	ldr	r6, [pc, #56]	; (8003fe4 <sbrk_aligned+0x3c>)
 8003fac:	460c      	mov	r4, r1
 8003fae:	6831      	ldr	r1, [r6, #0]
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	b911      	cbnz	r1, 8003fba <sbrk_aligned+0x12>
 8003fb4:	f000 f88c 	bl	80040d0 <_sbrk_r>
 8003fb8:	6030      	str	r0, [r6, #0]
 8003fba:	4621      	mov	r1, r4
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f000 f887 	bl	80040d0 <_sbrk_r>
 8003fc2:	1c43      	adds	r3, r0, #1
 8003fc4:	d00a      	beq.n	8003fdc <sbrk_aligned+0x34>
 8003fc6:	1cc4      	adds	r4, r0, #3
 8003fc8:	f024 0403 	bic.w	r4, r4, #3
 8003fcc:	42a0      	cmp	r0, r4
 8003fce:	d007      	beq.n	8003fe0 <sbrk_aligned+0x38>
 8003fd0:	1a21      	subs	r1, r4, r0
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f000 f87c 	bl	80040d0 <_sbrk_r>
 8003fd8:	3001      	adds	r0, #1
 8003fda:	d101      	bne.n	8003fe0 <sbrk_aligned+0x38>
 8003fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	20000544 	.word	0x20000544

08003fe8 <_malloc_r>:
 8003fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fec:	1ccd      	adds	r5, r1, #3
 8003fee:	f025 0503 	bic.w	r5, r5, #3
 8003ff2:	3508      	adds	r5, #8
 8003ff4:	2d0c      	cmp	r5, #12
 8003ff6:	bf38      	it	cc
 8003ff8:	250c      	movcc	r5, #12
 8003ffa:	2d00      	cmp	r5, #0
 8003ffc:	4607      	mov	r7, r0
 8003ffe:	db01      	blt.n	8004004 <_malloc_r+0x1c>
 8004000:	42a9      	cmp	r1, r5
 8004002:	d905      	bls.n	8004010 <_malloc_r+0x28>
 8004004:	230c      	movs	r3, #12
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	2600      	movs	r6, #0
 800400a:	4630      	mov	r0, r6
 800400c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004010:	4e2e      	ldr	r6, [pc, #184]	; (80040cc <_malloc_r+0xe4>)
 8004012:	f000 f86d 	bl	80040f0 <__malloc_lock>
 8004016:	6833      	ldr	r3, [r6, #0]
 8004018:	461c      	mov	r4, r3
 800401a:	bb34      	cbnz	r4, 800406a <_malloc_r+0x82>
 800401c:	4629      	mov	r1, r5
 800401e:	4638      	mov	r0, r7
 8004020:	f7ff ffc2 	bl	8003fa8 <sbrk_aligned>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	4604      	mov	r4, r0
 8004028:	d14d      	bne.n	80040c6 <_malloc_r+0xde>
 800402a:	6834      	ldr	r4, [r6, #0]
 800402c:	4626      	mov	r6, r4
 800402e:	2e00      	cmp	r6, #0
 8004030:	d140      	bne.n	80040b4 <_malloc_r+0xcc>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	4631      	mov	r1, r6
 8004036:	4638      	mov	r0, r7
 8004038:	eb04 0803 	add.w	r8, r4, r3
 800403c:	f000 f848 	bl	80040d0 <_sbrk_r>
 8004040:	4580      	cmp	r8, r0
 8004042:	d13a      	bne.n	80040ba <_malloc_r+0xd2>
 8004044:	6821      	ldr	r1, [r4, #0]
 8004046:	3503      	adds	r5, #3
 8004048:	1a6d      	subs	r5, r5, r1
 800404a:	f025 0503 	bic.w	r5, r5, #3
 800404e:	3508      	adds	r5, #8
 8004050:	2d0c      	cmp	r5, #12
 8004052:	bf38      	it	cc
 8004054:	250c      	movcc	r5, #12
 8004056:	4629      	mov	r1, r5
 8004058:	4638      	mov	r0, r7
 800405a:	f7ff ffa5 	bl	8003fa8 <sbrk_aligned>
 800405e:	3001      	adds	r0, #1
 8004060:	d02b      	beq.n	80040ba <_malloc_r+0xd2>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	442b      	add	r3, r5
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	e00e      	b.n	8004088 <_malloc_r+0xa0>
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	1b52      	subs	r2, r2, r5
 800406e:	d41e      	bmi.n	80040ae <_malloc_r+0xc6>
 8004070:	2a0b      	cmp	r2, #11
 8004072:	d916      	bls.n	80040a2 <_malloc_r+0xba>
 8004074:	1961      	adds	r1, r4, r5
 8004076:	42a3      	cmp	r3, r4
 8004078:	6025      	str	r5, [r4, #0]
 800407a:	bf18      	it	ne
 800407c:	6059      	strne	r1, [r3, #4]
 800407e:	6863      	ldr	r3, [r4, #4]
 8004080:	bf08      	it	eq
 8004082:	6031      	streq	r1, [r6, #0]
 8004084:	5162      	str	r2, [r4, r5]
 8004086:	604b      	str	r3, [r1, #4]
 8004088:	4638      	mov	r0, r7
 800408a:	f104 060b 	add.w	r6, r4, #11
 800408e:	f000 f835 	bl	80040fc <__malloc_unlock>
 8004092:	f026 0607 	bic.w	r6, r6, #7
 8004096:	1d23      	adds	r3, r4, #4
 8004098:	1af2      	subs	r2, r6, r3
 800409a:	d0b6      	beq.n	800400a <_malloc_r+0x22>
 800409c:	1b9b      	subs	r3, r3, r6
 800409e:	50a3      	str	r3, [r4, r2]
 80040a0:	e7b3      	b.n	800400a <_malloc_r+0x22>
 80040a2:	6862      	ldr	r2, [r4, #4]
 80040a4:	42a3      	cmp	r3, r4
 80040a6:	bf0c      	ite	eq
 80040a8:	6032      	streq	r2, [r6, #0]
 80040aa:	605a      	strne	r2, [r3, #4]
 80040ac:	e7ec      	b.n	8004088 <_malloc_r+0xa0>
 80040ae:	4623      	mov	r3, r4
 80040b0:	6864      	ldr	r4, [r4, #4]
 80040b2:	e7b2      	b.n	800401a <_malloc_r+0x32>
 80040b4:	4634      	mov	r4, r6
 80040b6:	6876      	ldr	r6, [r6, #4]
 80040b8:	e7b9      	b.n	800402e <_malloc_r+0x46>
 80040ba:	230c      	movs	r3, #12
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4638      	mov	r0, r7
 80040c0:	f000 f81c 	bl	80040fc <__malloc_unlock>
 80040c4:	e7a1      	b.n	800400a <_malloc_r+0x22>
 80040c6:	6025      	str	r5, [r4, #0]
 80040c8:	e7de      	b.n	8004088 <_malloc_r+0xa0>
 80040ca:	bf00      	nop
 80040cc:	20000540 	.word	0x20000540

080040d0 <_sbrk_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4d06      	ldr	r5, [pc, #24]	; (80040ec <_sbrk_r+0x1c>)
 80040d4:	2300      	movs	r3, #0
 80040d6:	4604      	mov	r4, r0
 80040d8:	4608      	mov	r0, r1
 80040da:	602b      	str	r3, [r5, #0]
 80040dc:	f7fd fdd4 	bl	8001c88 <_sbrk>
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	d102      	bne.n	80040ea <_sbrk_r+0x1a>
 80040e4:	682b      	ldr	r3, [r5, #0]
 80040e6:	b103      	cbz	r3, 80040ea <_sbrk_r+0x1a>
 80040e8:	6023      	str	r3, [r4, #0]
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	20000548 	.word	0x20000548

080040f0 <__malloc_lock>:
 80040f0:	4801      	ldr	r0, [pc, #4]	; (80040f8 <__malloc_lock+0x8>)
 80040f2:	f000 b809 	b.w	8004108 <__retarget_lock_acquire_recursive>
 80040f6:	bf00      	nop
 80040f8:	2000054c 	.word	0x2000054c

080040fc <__malloc_unlock>:
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <__malloc_unlock+0x8>)
 80040fe:	f000 b804 	b.w	800410a <__retarget_lock_release_recursive>
 8004102:	bf00      	nop
 8004104:	2000054c 	.word	0x2000054c

08004108 <__retarget_lock_acquire_recursive>:
 8004108:	4770      	bx	lr

0800410a <__retarget_lock_release_recursive>:
 800410a:	4770      	bx	lr

0800410c <pow>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	ed2d 8b02 	vpush	{d8}
 8004112:	eeb0 8a40 	vmov.f32	s16, s0
 8004116:	eef0 8a60 	vmov.f32	s17, s1
 800411a:	ec55 4b11 	vmov	r4, r5, d1
 800411e:	f000 f867 	bl	80041f0 <__ieee754_pow>
 8004122:	4622      	mov	r2, r4
 8004124:	462b      	mov	r3, r5
 8004126:	4620      	mov	r0, r4
 8004128:	4629      	mov	r1, r5
 800412a:	ec57 6b10 	vmov	r6, r7, d0
 800412e:	f7fc fca1 	bl	8000a74 <__aeabi_dcmpun>
 8004132:	2800      	cmp	r0, #0
 8004134:	d13b      	bne.n	80041ae <pow+0xa2>
 8004136:	ec51 0b18 	vmov	r0, r1, d8
 800413a:	2200      	movs	r2, #0
 800413c:	2300      	movs	r3, #0
 800413e:	f7fc fc67 	bl	8000a10 <__aeabi_dcmpeq>
 8004142:	b1b8      	cbz	r0, 8004174 <pow+0x68>
 8004144:	2200      	movs	r2, #0
 8004146:	2300      	movs	r3, #0
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc fc60 	bl	8000a10 <__aeabi_dcmpeq>
 8004150:	2800      	cmp	r0, #0
 8004152:	d146      	bne.n	80041e2 <pow+0xd6>
 8004154:	ec45 4b10 	vmov	d0, r4, r5
 8004158:	f000 fe63 	bl	8004e22 <finite>
 800415c:	b338      	cbz	r0, 80041ae <pow+0xa2>
 800415e:	2200      	movs	r2, #0
 8004160:	2300      	movs	r3, #0
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f7fc fc5d 	bl	8000a24 <__aeabi_dcmplt>
 800416a:	b300      	cbz	r0, 80041ae <pow+0xa2>
 800416c:	f7ff fed4 	bl	8003f18 <__errno>
 8004170:	2322      	movs	r3, #34	; 0x22
 8004172:	e01b      	b.n	80041ac <pow+0xa0>
 8004174:	ec47 6b10 	vmov	d0, r6, r7
 8004178:	f000 fe53 	bl	8004e22 <finite>
 800417c:	b9e0      	cbnz	r0, 80041b8 <pow+0xac>
 800417e:	eeb0 0a48 	vmov.f32	s0, s16
 8004182:	eef0 0a68 	vmov.f32	s1, s17
 8004186:	f000 fe4c 	bl	8004e22 <finite>
 800418a:	b1a8      	cbz	r0, 80041b8 <pow+0xac>
 800418c:	ec45 4b10 	vmov	d0, r4, r5
 8004190:	f000 fe47 	bl	8004e22 <finite>
 8004194:	b180      	cbz	r0, 80041b8 <pow+0xac>
 8004196:	4632      	mov	r2, r6
 8004198:	463b      	mov	r3, r7
 800419a:	4630      	mov	r0, r6
 800419c:	4639      	mov	r1, r7
 800419e:	f7fc fc69 	bl	8000a74 <__aeabi_dcmpun>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d0e2      	beq.n	800416c <pow+0x60>
 80041a6:	f7ff feb7 	bl	8003f18 <__errno>
 80041aa:	2321      	movs	r3, #33	; 0x21
 80041ac:	6003      	str	r3, [r0, #0]
 80041ae:	ecbd 8b02 	vpop	{d8}
 80041b2:	ec47 6b10 	vmov	d0, r6, r7
 80041b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b8:	2200      	movs	r2, #0
 80041ba:	2300      	movs	r3, #0
 80041bc:	4630      	mov	r0, r6
 80041be:	4639      	mov	r1, r7
 80041c0:	f7fc fc26 	bl	8000a10 <__aeabi_dcmpeq>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d0f2      	beq.n	80041ae <pow+0xa2>
 80041c8:	eeb0 0a48 	vmov.f32	s0, s16
 80041cc:	eef0 0a68 	vmov.f32	s1, s17
 80041d0:	f000 fe27 	bl	8004e22 <finite>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	d0ea      	beq.n	80041ae <pow+0xa2>
 80041d8:	ec45 4b10 	vmov	d0, r4, r5
 80041dc:	f000 fe21 	bl	8004e22 <finite>
 80041e0:	e7c3      	b.n	800416a <pow+0x5e>
 80041e2:	4f01      	ldr	r7, [pc, #4]	; (80041e8 <pow+0xdc>)
 80041e4:	2600      	movs	r6, #0
 80041e6:	e7e2      	b.n	80041ae <pow+0xa2>
 80041e8:	3ff00000 	.word	0x3ff00000
 80041ec:	00000000 	.word	0x00000000

080041f0 <__ieee754_pow>:
 80041f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f4:	ed2d 8b06 	vpush	{d8-d10}
 80041f8:	b089      	sub	sp, #36	; 0x24
 80041fa:	ed8d 1b00 	vstr	d1, [sp]
 80041fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004202:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004206:	ea58 0102 	orrs.w	r1, r8, r2
 800420a:	ec57 6b10 	vmov	r6, r7, d0
 800420e:	d115      	bne.n	800423c <__ieee754_pow+0x4c>
 8004210:	19b3      	adds	r3, r6, r6
 8004212:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004216:	4152      	adcs	r2, r2
 8004218:	4299      	cmp	r1, r3
 800421a:	4b89      	ldr	r3, [pc, #548]	; (8004440 <__ieee754_pow+0x250>)
 800421c:	4193      	sbcs	r3, r2
 800421e:	f080 84d2 	bcs.w	8004bc6 <__ieee754_pow+0x9d6>
 8004222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004226:	4630      	mov	r0, r6
 8004228:	4639      	mov	r1, r7
 800422a:	f7fb ffd3 	bl	80001d4 <__adddf3>
 800422e:	ec41 0b10 	vmov	d0, r0, r1
 8004232:	b009      	add	sp, #36	; 0x24
 8004234:	ecbd 8b06 	vpop	{d8-d10}
 8004238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423c:	4b81      	ldr	r3, [pc, #516]	; (8004444 <__ieee754_pow+0x254>)
 800423e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004242:	429c      	cmp	r4, r3
 8004244:	ee10 aa10 	vmov	sl, s0
 8004248:	463d      	mov	r5, r7
 800424a:	dc06      	bgt.n	800425a <__ieee754_pow+0x6a>
 800424c:	d101      	bne.n	8004252 <__ieee754_pow+0x62>
 800424e:	2e00      	cmp	r6, #0
 8004250:	d1e7      	bne.n	8004222 <__ieee754_pow+0x32>
 8004252:	4598      	cmp	r8, r3
 8004254:	dc01      	bgt.n	800425a <__ieee754_pow+0x6a>
 8004256:	d10f      	bne.n	8004278 <__ieee754_pow+0x88>
 8004258:	b172      	cbz	r2, 8004278 <__ieee754_pow+0x88>
 800425a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800425e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004262:	ea55 050a 	orrs.w	r5, r5, sl
 8004266:	d1dc      	bne.n	8004222 <__ieee754_pow+0x32>
 8004268:	e9dd 3200 	ldrd	r3, r2, [sp]
 800426c:	18db      	adds	r3, r3, r3
 800426e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004272:	4152      	adcs	r2, r2
 8004274:	429d      	cmp	r5, r3
 8004276:	e7d0      	b.n	800421a <__ieee754_pow+0x2a>
 8004278:	2d00      	cmp	r5, #0
 800427a:	da3b      	bge.n	80042f4 <__ieee754_pow+0x104>
 800427c:	4b72      	ldr	r3, [pc, #456]	; (8004448 <__ieee754_pow+0x258>)
 800427e:	4598      	cmp	r8, r3
 8004280:	dc51      	bgt.n	8004326 <__ieee754_pow+0x136>
 8004282:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004286:	4598      	cmp	r8, r3
 8004288:	f340 84ac 	ble.w	8004be4 <__ieee754_pow+0x9f4>
 800428c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004290:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004294:	2b14      	cmp	r3, #20
 8004296:	dd0f      	ble.n	80042b8 <__ieee754_pow+0xc8>
 8004298:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800429c:	fa22 f103 	lsr.w	r1, r2, r3
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	4293      	cmp	r3, r2
 80042a6:	f040 849d 	bne.w	8004be4 <__ieee754_pow+0x9f4>
 80042aa:	f001 0101 	and.w	r1, r1, #1
 80042ae:	f1c1 0302 	rsb	r3, r1, #2
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	b182      	cbz	r2, 80042d8 <__ieee754_pow+0xe8>
 80042b6:	e05f      	b.n	8004378 <__ieee754_pow+0x188>
 80042b8:	2a00      	cmp	r2, #0
 80042ba:	d15b      	bne.n	8004374 <__ieee754_pow+0x184>
 80042bc:	f1c3 0314 	rsb	r3, r3, #20
 80042c0:	fa48 f103 	asr.w	r1, r8, r3
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	4543      	cmp	r3, r8
 80042ca:	f040 8488 	bne.w	8004bde <__ieee754_pow+0x9ee>
 80042ce:	f001 0101 	and.w	r1, r1, #1
 80042d2:	f1c1 0302 	rsb	r3, r1, #2
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	4b5c      	ldr	r3, [pc, #368]	; (800444c <__ieee754_pow+0x25c>)
 80042da:	4598      	cmp	r8, r3
 80042dc:	d132      	bne.n	8004344 <__ieee754_pow+0x154>
 80042de:	f1b9 0f00 	cmp.w	r9, #0
 80042e2:	f280 8478 	bge.w	8004bd6 <__ieee754_pow+0x9e6>
 80042e6:	4959      	ldr	r1, [pc, #356]	; (800444c <__ieee754_pow+0x25c>)
 80042e8:	4632      	mov	r2, r6
 80042ea:	463b      	mov	r3, r7
 80042ec:	2000      	movs	r0, #0
 80042ee:	f7fc fa51 	bl	8000794 <__aeabi_ddiv>
 80042f2:	e79c      	b.n	800422e <__ieee754_pow+0x3e>
 80042f4:	2300      	movs	r3, #0
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	d13d      	bne.n	8004378 <__ieee754_pow+0x188>
 80042fc:	4b51      	ldr	r3, [pc, #324]	; (8004444 <__ieee754_pow+0x254>)
 80042fe:	4598      	cmp	r8, r3
 8004300:	d1ea      	bne.n	80042d8 <__ieee754_pow+0xe8>
 8004302:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004306:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800430a:	ea53 030a 	orrs.w	r3, r3, sl
 800430e:	f000 845a 	beq.w	8004bc6 <__ieee754_pow+0x9d6>
 8004312:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <__ieee754_pow+0x260>)
 8004314:	429c      	cmp	r4, r3
 8004316:	dd08      	ble.n	800432a <__ieee754_pow+0x13a>
 8004318:	f1b9 0f00 	cmp.w	r9, #0
 800431c:	f2c0 8457 	blt.w	8004bce <__ieee754_pow+0x9de>
 8004320:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004324:	e783      	b.n	800422e <__ieee754_pow+0x3e>
 8004326:	2302      	movs	r3, #2
 8004328:	e7e5      	b.n	80042f6 <__ieee754_pow+0x106>
 800432a:	f1b9 0f00 	cmp.w	r9, #0
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	f6bf af7a 	bge.w	800422e <__ieee754_pow+0x3e>
 800433a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800433e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004342:	e774      	b.n	800422e <__ieee754_pow+0x3e>
 8004344:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004348:	d106      	bne.n	8004358 <__ieee754_pow+0x168>
 800434a:	4632      	mov	r2, r6
 800434c:	463b      	mov	r3, r7
 800434e:	4630      	mov	r0, r6
 8004350:	4639      	mov	r1, r7
 8004352:	f7fc f8f5 	bl	8000540 <__aeabi_dmul>
 8004356:	e76a      	b.n	800422e <__ieee754_pow+0x3e>
 8004358:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <__ieee754_pow+0x264>)
 800435a:	4599      	cmp	r9, r3
 800435c:	d10c      	bne.n	8004378 <__ieee754_pow+0x188>
 800435e:	2d00      	cmp	r5, #0
 8004360:	db0a      	blt.n	8004378 <__ieee754_pow+0x188>
 8004362:	ec47 6b10 	vmov	d0, r6, r7
 8004366:	b009      	add	sp, #36	; 0x24
 8004368:	ecbd 8b06 	vpop	{d8-d10}
 800436c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	f000 bc6c 	b.w	8004c4c <__ieee754_sqrt>
 8004374:	2300      	movs	r3, #0
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	ec47 6b10 	vmov	d0, r6, r7
 800437c:	f000 fd48 	bl	8004e10 <fabs>
 8004380:	ec51 0b10 	vmov	r0, r1, d0
 8004384:	f1ba 0f00 	cmp.w	sl, #0
 8004388:	d129      	bne.n	80043de <__ieee754_pow+0x1ee>
 800438a:	b124      	cbz	r4, 8004396 <__ieee754_pow+0x1a6>
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <__ieee754_pow+0x25c>)
 800438e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004392:	429a      	cmp	r2, r3
 8004394:	d123      	bne.n	80043de <__ieee754_pow+0x1ee>
 8004396:	f1b9 0f00 	cmp.w	r9, #0
 800439a:	da05      	bge.n	80043a8 <__ieee754_pow+0x1b8>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	2000      	movs	r0, #0
 80043a2:	492a      	ldr	r1, [pc, #168]	; (800444c <__ieee754_pow+0x25c>)
 80043a4:	f7fc f9f6 	bl	8000794 <__aeabi_ddiv>
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	f6bf af40 	bge.w	800422e <__ieee754_pow+0x3e>
 80043ae:	9b04      	ldr	r3, [sp, #16]
 80043b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80043b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80043b8:	4323      	orrs	r3, r4
 80043ba:	d108      	bne.n	80043ce <__ieee754_pow+0x1de>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	f7fb ff04 	bl	80001d0 <__aeabi_dsub>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	e78f      	b.n	80042ee <__ieee754_pow+0xfe>
 80043ce:	9b04      	ldr	r3, [sp, #16]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f47f af2c 	bne.w	800422e <__ieee754_pow+0x3e>
 80043d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043da:	4619      	mov	r1, r3
 80043dc:	e727      	b.n	800422e <__ieee754_pow+0x3e>
 80043de:	0feb      	lsrs	r3, r5, #31
 80043e0:	3b01      	subs	r3, #1
 80043e2:	9306      	str	r3, [sp, #24]
 80043e4:	9a06      	ldr	r2, [sp, #24]
 80043e6:	9b04      	ldr	r3, [sp, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	d102      	bne.n	80043f2 <__ieee754_pow+0x202>
 80043ec:	4632      	mov	r2, r6
 80043ee:	463b      	mov	r3, r7
 80043f0:	e7e6      	b.n	80043c0 <__ieee754_pow+0x1d0>
 80043f2:	4b19      	ldr	r3, [pc, #100]	; (8004458 <__ieee754_pow+0x268>)
 80043f4:	4598      	cmp	r8, r3
 80043f6:	f340 80fb 	ble.w	80045f0 <__ieee754_pow+0x400>
 80043fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80043fe:	4598      	cmp	r8, r3
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <__ieee754_pow+0x260>)
 8004402:	dd0c      	ble.n	800441e <__ieee754_pow+0x22e>
 8004404:	429c      	cmp	r4, r3
 8004406:	dc0f      	bgt.n	8004428 <__ieee754_pow+0x238>
 8004408:	f1b9 0f00 	cmp.w	r9, #0
 800440c:	da0f      	bge.n	800442e <__ieee754_pow+0x23e>
 800440e:	2000      	movs	r0, #0
 8004410:	b009      	add	sp, #36	; 0x24
 8004412:	ecbd 8b06 	vpop	{d8-d10}
 8004416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f000 bcf0 	b.w	8004dfe <__math_oflow>
 800441e:	429c      	cmp	r4, r3
 8004420:	dbf2      	blt.n	8004408 <__ieee754_pow+0x218>
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <__ieee754_pow+0x25c>)
 8004424:	429c      	cmp	r4, r3
 8004426:	dd19      	ble.n	800445c <__ieee754_pow+0x26c>
 8004428:	f1b9 0f00 	cmp.w	r9, #0
 800442c:	dcef      	bgt.n	800440e <__ieee754_pow+0x21e>
 800442e:	2000      	movs	r0, #0
 8004430:	b009      	add	sp, #36	; 0x24
 8004432:	ecbd 8b06 	vpop	{d8-d10}
 8004436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f000 bcd7 	b.w	8004dec <__math_uflow>
 800443e:	bf00      	nop
 8004440:	fff00000 	.word	0xfff00000
 8004444:	7ff00000 	.word	0x7ff00000
 8004448:	433fffff 	.word	0x433fffff
 800444c:	3ff00000 	.word	0x3ff00000
 8004450:	3fefffff 	.word	0x3fefffff
 8004454:	3fe00000 	.word	0x3fe00000
 8004458:	41e00000 	.word	0x41e00000
 800445c:	4b60      	ldr	r3, [pc, #384]	; (80045e0 <__ieee754_pow+0x3f0>)
 800445e:	2200      	movs	r2, #0
 8004460:	f7fb feb6 	bl	80001d0 <__aeabi_dsub>
 8004464:	a354      	add	r3, pc, #336	; (adr r3, 80045b8 <__ieee754_pow+0x3c8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	4604      	mov	r4, r0
 800446c:	460d      	mov	r5, r1
 800446e:	f7fc f867 	bl	8000540 <__aeabi_dmul>
 8004472:	a353      	add	r3, pc, #332	; (adr r3, 80045c0 <__ieee754_pow+0x3d0>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	4606      	mov	r6, r0
 800447a:	460f      	mov	r7, r1
 800447c:	4620      	mov	r0, r4
 800447e:	4629      	mov	r1, r5
 8004480:	f7fc f85e 	bl	8000540 <__aeabi_dmul>
 8004484:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <__ieee754_pow+0x3f4>)
 8004486:	4682      	mov	sl, r0
 8004488:	468b      	mov	fp, r1
 800448a:	2200      	movs	r2, #0
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	f7fc f856 	bl	8000540 <__aeabi_dmul>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	a14b      	add	r1, pc, #300	; (adr r1, 80045c8 <__ieee754_pow+0x3d8>)
 800449a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800449e:	f7fb fe97 	bl	80001d0 <__aeabi_dsub>
 80044a2:	4622      	mov	r2, r4
 80044a4:	462b      	mov	r3, r5
 80044a6:	f7fc f84b 	bl	8000540 <__aeabi_dmul>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	2000      	movs	r0, #0
 80044b0:	494d      	ldr	r1, [pc, #308]	; (80045e8 <__ieee754_pow+0x3f8>)
 80044b2:	f7fb fe8d 	bl	80001d0 <__aeabi_dsub>
 80044b6:	4622      	mov	r2, r4
 80044b8:	4680      	mov	r8, r0
 80044ba:	4689      	mov	r9, r1
 80044bc:	462b      	mov	r3, r5
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fc f83d 	bl	8000540 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4640      	mov	r0, r8
 80044cc:	4649      	mov	r1, r9
 80044ce:	f7fc f837 	bl	8000540 <__aeabi_dmul>
 80044d2:	a33f      	add	r3, pc, #252	; (adr r3, 80045d0 <__ieee754_pow+0x3e0>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fc f832 	bl	8000540 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4650      	mov	r0, sl
 80044e2:	4659      	mov	r1, fp
 80044e4:	f7fb fe74 	bl	80001d0 <__aeabi_dsub>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4680      	mov	r8, r0
 80044ee:	4689      	mov	r9, r1
 80044f0:	4630      	mov	r0, r6
 80044f2:	4639      	mov	r1, r7
 80044f4:	f7fb fe6e 	bl	80001d4 <__adddf3>
 80044f8:	2000      	movs	r0, #0
 80044fa:	4632      	mov	r2, r6
 80044fc:	463b      	mov	r3, r7
 80044fe:	4604      	mov	r4, r0
 8004500:	460d      	mov	r5, r1
 8004502:	f7fb fe65 	bl	80001d0 <__aeabi_dsub>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4640      	mov	r0, r8
 800450c:	4649      	mov	r1, r9
 800450e:	f7fb fe5f 	bl	80001d0 <__aeabi_dsub>
 8004512:	9b04      	ldr	r3, [sp, #16]
 8004514:	9a06      	ldr	r2, [sp, #24]
 8004516:	3b01      	subs	r3, #1
 8004518:	4313      	orrs	r3, r2
 800451a:	4682      	mov	sl, r0
 800451c:	468b      	mov	fp, r1
 800451e:	f040 81e7 	bne.w	80048f0 <__ieee754_pow+0x700>
 8004522:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80045d8 <__ieee754_pow+0x3e8>
 8004526:	eeb0 8a47 	vmov.f32	s16, s14
 800452a:	eef0 8a67 	vmov.f32	s17, s15
 800452e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004532:	2600      	movs	r6, #0
 8004534:	4632      	mov	r2, r6
 8004536:	463b      	mov	r3, r7
 8004538:	e9dd 0100 	ldrd	r0, r1, [sp]
 800453c:	f7fb fe48 	bl	80001d0 <__aeabi_dsub>
 8004540:	4622      	mov	r2, r4
 8004542:	462b      	mov	r3, r5
 8004544:	f7fb fffc 	bl	8000540 <__aeabi_dmul>
 8004548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800454c:	4680      	mov	r8, r0
 800454e:	4689      	mov	r9, r1
 8004550:	4650      	mov	r0, sl
 8004552:	4659      	mov	r1, fp
 8004554:	f7fb fff4 	bl	8000540 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4640      	mov	r0, r8
 800455e:	4649      	mov	r1, r9
 8004560:	f7fb fe38 	bl	80001d4 <__adddf3>
 8004564:	4632      	mov	r2, r6
 8004566:	463b      	mov	r3, r7
 8004568:	4680      	mov	r8, r0
 800456a:	4689      	mov	r9, r1
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fb ffe6 	bl	8000540 <__aeabi_dmul>
 8004574:	460b      	mov	r3, r1
 8004576:	4604      	mov	r4, r0
 8004578:	460d      	mov	r5, r1
 800457a:	4602      	mov	r2, r0
 800457c:	4649      	mov	r1, r9
 800457e:	4640      	mov	r0, r8
 8004580:	f7fb fe28 	bl	80001d4 <__adddf3>
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <__ieee754_pow+0x3fc>)
 8004586:	4299      	cmp	r1, r3
 8004588:	ec45 4b19 	vmov	d9, r4, r5
 800458c:	4606      	mov	r6, r0
 800458e:	460f      	mov	r7, r1
 8004590:	468b      	mov	fp, r1
 8004592:	f340 82f1 	ble.w	8004b78 <__ieee754_pow+0x988>
 8004596:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800459a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800459e:	4303      	orrs	r3, r0
 80045a0:	f000 81e4 	beq.w	800496c <__ieee754_pow+0x77c>
 80045a4:	ec51 0b18 	vmov	r0, r1, d8
 80045a8:	2200      	movs	r2, #0
 80045aa:	2300      	movs	r3, #0
 80045ac:	f7fc fa3a 	bl	8000a24 <__aeabi_dcmplt>
 80045b0:	3800      	subs	r0, #0
 80045b2:	bf18      	it	ne
 80045b4:	2001      	movne	r0, #1
 80045b6:	e72b      	b.n	8004410 <__ieee754_pow+0x220>
 80045b8:	60000000 	.word	0x60000000
 80045bc:	3ff71547 	.word	0x3ff71547
 80045c0:	f85ddf44 	.word	0xf85ddf44
 80045c4:	3e54ae0b 	.word	0x3e54ae0b
 80045c8:	55555555 	.word	0x55555555
 80045cc:	3fd55555 	.word	0x3fd55555
 80045d0:	652b82fe 	.word	0x652b82fe
 80045d4:	3ff71547 	.word	0x3ff71547
 80045d8:	00000000 	.word	0x00000000
 80045dc:	bff00000 	.word	0xbff00000
 80045e0:	3ff00000 	.word	0x3ff00000
 80045e4:	3fd00000 	.word	0x3fd00000
 80045e8:	3fe00000 	.word	0x3fe00000
 80045ec:	408fffff 	.word	0x408fffff
 80045f0:	4bd5      	ldr	r3, [pc, #852]	; (8004948 <__ieee754_pow+0x758>)
 80045f2:	402b      	ands	r3, r5
 80045f4:	2200      	movs	r2, #0
 80045f6:	b92b      	cbnz	r3, 8004604 <__ieee754_pow+0x414>
 80045f8:	4bd4      	ldr	r3, [pc, #848]	; (800494c <__ieee754_pow+0x75c>)
 80045fa:	f7fb ffa1 	bl	8000540 <__aeabi_dmul>
 80045fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004602:	460c      	mov	r4, r1
 8004604:	1523      	asrs	r3, r4, #20
 8004606:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800460a:	4413      	add	r3, r2
 800460c:	9305      	str	r3, [sp, #20]
 800460e:	4bd0      	ldr	r3, [pc, #832]	; (8004950 <__ieee754_pow+0x760>)
 8004610:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004614:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004618:	429c      	cmp	r4, r3
 800461a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800461e:	dd08      	ble.n	8004632 <__ieee754_pow+0x442>
 8004620:	4bcc      	ldr	r3, [pc, #816]	; (8004954 <__ieee754_pow+0x764>)
 8004622:	429c      	cmp	r4, r3
 8004624:	f340 8162 	ble.w	80048ec <__ieee754_pow+0x6fc>
 8004628:	9b05      	ldr	r3, [sp, #20]
 800462a:	3301      	adds	r3, #1
 800462c:	9305      	str	r3, [sp, #20]
 800462e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004632:	2400      	movs	r4, #0
 8004634:	00e3      	lsls	r3, r4, #3
 8004636:	9307      	str	r3, [sp, #28]
 8004638:	4bc7      	ldr	r3, [pc, #796]	; (8004958 <__ieee754_pow+0x768>)
 800463a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800463e:	ed93 7b00 	vldr	d7, [r3]
 8004642:	4629      	mov	r1, r5
 8004644:	ec53 2b17 	vmov	r2, r3, d7
 8004648:	eeb0 9a47 	vmov.f32	s18, s14
 800464c:	eef0 9a67 	vmov.f32	s19, s15
 8004650:	4682      	mov	sl, r0
 8004652:	f7fb fdbd 	bl	80001d0 <__aeabi_dsub>
 8004656:	4652      	mov	r2, sl
 8004658:	4606      	mov	r6, r0
 800465a:	460f      	mov	r7, r1
 800465c:	462b      	mov	r3, r5
 800465e:	ec51 0b19 	vmov	r0, r1, d9
 8004662:	f7fb fdb7 	bl	80001d4 <__adddf3>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	2000      	movs	r0, #0
 800466c:	49bb      	ldr	r1, [pc, #748]	; (800495c <__ieee754_pow+0x76c>)
 800466e:	f7fc f891 	bl	8000794 <__aeabi_ddiv>
 8004672:	ec41 0b1a 	vmov	d10, r0, r1
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4630      	mov	r0, r6
 800467c:	4639      	mov	r1, r7
 800467e:	f7fb ff5f 	bl	8000540 <__aeabi_dmul>
 8004682:	2300      	movs	r3, #0
 8004684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004688:	9302      	str	r3, [sp, #8]
 800468a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800468e:	46ab      	mov	fp, r5
 8004690:	106d      	asrs	r5, r5, #1
 8004692:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004696:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800469a:	ec41 0b18 	vmov	d8, r0, r1
 800469e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80046a2:	2200      	movs	r2, #0
 80046a4:	4640      	mov	r0, r8
 80046a6:	4649      	mov	r1, r9
 80046a8:	4614      	mov	r4, r2
 80046aa:	461d      	mov	r5, r3
 80046ac:	f7fb ff48 	bl	8000540 <__aeabi_dmul>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4630      	mov	r0, r6
 80046b6:	4639      	mov	r1, r7
 80046b8:	f7fb fd8a 	bl	80001d0 <__aeabi_dsub>
 80046bc:	ec53 2b19 	vmov	r2, r3, d9
 80046c0:	4606      	mov	r6, r0
 80046c2:	460f      	mov	r7, r1
 80046c4:	4620      	mov	r0, r4
 80046c6:	4629      	mov	r1, r5
 80046c8:	f7fb fd82 	bl	80001d0 <__aeabi_dsub>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4650      	mov	r0, sl
 80046d2:	4659      	mov	r1, fp
 80046d4:	f7fb fd7c 	bl	80001d0 <__aeabi_dsub>
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	f7fb ff30 	bl	8000540 <__aeabi_dmul>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fb fd72 	bl	80001d0 <__aeabi_dsub>
 80046ec:	ec53 2b1a 	vmov	r2, r3, d10
 80046f0:	f7fb ff26 	bl	8000540 <__aeabi_dmul>
 80046f4:	ec53 2b18 	vmov	r2, r3, d8
 80046f8:	ec41 0b19 	vmov	d9, r0, r1
 80046fc:	ec51 0b18 	vmov	r0, r1, d8
 8004700:	f7fb ff1e 	bl	8000540 <__aeabi_dmul>
 8004704:	a37c      	add	r3, pc, #496	; (adr r3, 80048f8 <__ieee754_pow+0x708>)
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	4604      	mov	r4, r0
 800470c:	460d      	mov	r5, r1
 800470e:	f7fb ff17 	bl	8000540 <__aeabi_dmul>
 8004712:	a37b      	add	r3, pc, #492	; (adr r3, 8004900 <__ieee754_pow+0x710>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	f7fb fd5c 	bl	80001d4 <__adddf3>
 800471c:	4622      	mov	r2, r4
 800471e:	462b      	mov	r3, r5
 8004720:	f7fb ff0e 	bl	8000540 <__aeabi_dmul>
 8004724:	a378      	add	r3, pc, #480	; (adr r3, 8004908 <__ieee754_pow+0x718>)
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f7fb fd53 	bl	80001d4 <__adddf3>
 800472e:	4622      	mov	r2, r4
 8004730:	462b      	mov	r3, r5
 8004732:	f7fb ff05 	bl	8000540 <__aeabi_dmul>
 8004736:	a376      	add	r3, pc, #472	; (adr r3, 8004910 <__ieee754_pow+0x720>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb fd4a 	bl	80001d4 <__adddf3>
 8004740:	4622      	mov	r2, r4
 8004742:	462b      	mov	r3, r5
 8004744:	f7fb fefc 	bl	8000540 <__aeabi_dmul>
 8004748:	a373      	add	r3, pc, #460	; (adr r3, 8004918 <__ieee754_pow+0x728>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	f7fb fd41 	bl	80001d4 <__adddf3>
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	f7fb fef3 	bl	8000540 <__aeabi_dmul>
 800475a:	a371      	add	r3, pc, #452	; (adr r3, 8004920 <__ieee754_pow+0x730>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb fd38 	bl	80001d4 <__adddf3>
 8004764:	4622      	mov	r2, r4
 8004766:	4606      	mov	r6, r0
 8004768:	460f      	mov	r7, r1
 800476a:	462b      	mov	r3, r5
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f7fb fee6 	bl	8000540 <__aeabi_dmul>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	f7fb fee0 	bl	8000540 <__aeabi_dmul>
 8004780:	4642      	mov	r2, r8
 8004782:	4604      	mov	r4, r0
 8004784:	460d      	mov	r5, r1
 8004786:	464b      	mov	r3, r9
 8004788:	ec51 0b18 	vmov	r0, r1, d8
 800478c:	f7fb fd22 	bl	80001d4 <__adddf3>
 8004790:	ec53 2b19 	vmov	r2, r3, d9
 8004794:	f7fb fed4 	bl	8000540 <__aeabi_dmul>
 8004798:	4622      	mov	r2, r4
 800479a:	462b      	mov	r3, r5
 800479c:	f7fb fd1a 	bl	80001d4 <__adddf3>
 80047a0:	4642      	mov	r2, r8
 80047a2:	4682      	mov	sl, r0
 80047a4:	468b      	mov	fp, r1
 80047a6:	464b      	mov	r3, r9
 80047a8:	4640      	mov	r0, r8
 80047aa:	4649      	mov	r1, r9
 80047ac:	f7fb fec8 	bl	8000540 <__aeabi_dmul>
 80047b0:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <__ieee754_pow+0x770>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	f7fb fd0c 	bl	80001d4 <__adddf3>
 80047bc:	4652      	mov	r2, sl
 80047be:	465b      	mov	r3, fp
 80047c0:	f7fb fd08 	bl	80001d4 <__adddf3>
 80047c4:	2000      	movs	r0, #0
 80047c6:	4604      	mov	r4, r0
 80047c8:	460d      	mov	r5, r1
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4640      	mov	r0, r8
 80047d0:	4649      	mov	r1, r9
 80047d2:	f7fb feb5 	bl	8000540 <__aeabi_dmul>
 80047d6:	4b62      	ldr	r3, [pc, #392]	; (8004960 <__ieee754_pow+0x770>)
 80047d8:	4680      	mov	r8, r0
 80047da:	4689      	mov	r9, r1
 80047dc:	2200      	movs	r2, #0
 80047de:	4620      	mov	r0, r4
 80047e0:	4629      	mov	r1, r5
 80047e2:	f7fb fcf5 	bl	80001d0 <__aeabi_dsub>
 80047e6:	4632      	mov	r2, r6
 80047e8:	463b      	mov	r3, r7
 80047ea:	f7fb fcf1 	bl	80001d0 <__aeabi_dsub>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4650      	mov	r0, sl
 80047f4:	4659      	mov	r1, fp
 80047f6:	f7fb fceb 	bl	80001d0 <__aeabi_dsub>
 80047fa:	ec53 2b18 	vmov	r2, r3, d8
 80047fe:	f7fb fe9f 	bl	8000540 <__aeabi_dmul>
 8004802:	4622      	mov	r2, r4
 8004804:	4606      	mov	r6, r0
 8004806:	460f      	mov	r7, r1
 8004808:	462b      	mov	r3, r5
 800480a:	ec51 0b19 	vmov	r0, r1, d9
 800480e:	f7fb fe97 	bl	8000540 <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4630      	mov	r0, r6
 8004818:	4639      	mov	r1, r7
 800481a:	f7fb fcdb 	bl	80001d4 <__adddf3>
 800481e:	4606      	mov	r6, r0
 8004820:	460f      	mov	r7, r1
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4640      	mov	r0, r8
 8004828:	4649      	mov	r1, r9
 800482a:	f7fb fcd3 	bl	80001d4 <__adddf3>
 800482e:	a33e      	add	r3, pc, #248	; (adr r3, 8004928 <__ieee754_pow+0x738>)
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	2000      	movs	r0, #0
 8004836:	4604      	mov	r4, r0
 8004838:	460d      	mov	r5, r1
 800483a:	f7fb fe81 	bl	8000540 <__aeabi_dmul>
 800483e:	4642      	mov	r2, r8
 8004840:	ec41 0b18 	vmov	d8, r0, r1
 8004844:	464b      	mov	r3, r9
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fb fcc1 	bl	80001d0 <__aeabi_dsub>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4630      	mov	r0, r6
 8004854:	4639      	mov	r1, r7
 8004856:	f7fb fcbb 	bl	80001d0 <__aeabi_dsub>
 800485a:	a335      	add	r3, pc, #212	; (adr r3, 8004930 <__ieee754_pow+0x740>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fe6e 	bl	8000540 <__aeabi_dmul>
 8004864:	a334      	add	r3, pc, #208	; (adr r3, 8004938 <__ieee754_pow+0x748>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fe65 	bl	8000540 <__aeabi_dmul>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4630      	mov	r0, r6
 800487c:	4639      	mov	r1, r7
 800487e:	f7fb fca9 	bl	80001d4 <__adddf3>
 8004882:	9a07      	ldr	r2, [sp, #28]
 8004884:	4b37      	ldr	r3, [pc, #220]	; (8004964 <__ieee754_pow+0x774>)
 8004886:	4413      	add	r3, r2
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fca2 	bl	80001d4 <__adddf3>
 8004890:	4682      	mov	sl, r0
 8004892:	9805      	ldr	r0, [sp, #20]
 8004894:	468b      	mov	fp, r1
 8004896:	f7fb fde9 	bl	800046c <__aeabi_i2d>
 800489a:	9a07      	ldr	r2, [sp, #28]
 800489c:	4b32      	ldr	r3, [pc, #200]	; (8004968 <__ieee754_pow+0x778>)
 800489e:	4413      	add	r3, r2
 80048a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048a4:	4606      	mov	r6, r0
 80048a6:	460f      	mov	r7, r1
 80048a8:	4652      	mov	r2, sl
 80048aa:	465b      	mov	r3, fp
 80048ac:	ec51 0b18 	vmov	r0, r1, d8
 80048b0:	f7fb fc90 	bl	80001d4 <__adddf3>
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	f7fb fc8c 	bl	80001d4 <__adddf3>
 80048bc:	4632      	mov	r2, r6
 80048be:	463b      	mov	r3, r7
 80048c0:	f7fb fc88 	bl	80001d4 <__adddf3>
 80048c4:	2000      	movs	r0, #0
 80048c6:	4632      	mov	r2, r6
 80048c8:	463b      	mov	r3, r7
 80048ca:	4604      	mov	r4, r0
 80048cc:	460d      	mov	r5, r1
 80048ce:	f7fb fc7f 	bl	80001d0 <__aeabi_dsub>
 80048d2:	4642      	mov	r2, r8
 80048d4:	464b      	mov	r3, r9
 80048d6:	f7fb fc7b 	bl	80001d0 <__aeabi_dsub>
 80048da:	ec53 2b18 	vmov	r2, r3, d8
 80048de:	f7fb fc77 	bl	80001d0 <__aeabi_dsub>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4650      	mov	r0, sl
 80048e8:	4659      	mov	r1, fp
 80048ea:	e610      	b.n	800450e <__ieee754_pow+0x31e>
 80048ec:	2401      	movs	r4, #1
 80048ee:	e6a1      	b.n	8004634 <__ieee754_pow+0x444>
 80048f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004940 <__ieee754_pow+0x750>
 80048f4:	e617      	b.n	8004526 <__ieee754_pow+0x336>
 80048f6:	bf00      	nop
 80048f8:	4a454eef 	.word	0x4a454eef
 80048fc:	3fca7e28 	.word	0x3fca7e28
 8004900:	93c9db65 	.word	0x93c9db65
 8004904:	3fcd864a 	.word	0x3fcd864a
 8004908:	a91d4101 	.word	0xa91d4101
 800490c:	3fd17460 	.word	0x3fd17460
 8004910:	518f264d 	.word	0x518f264d
 8004914:	3fd55555 	.word	0x3fd55555
 8004918:	db6fabff 	.word	0xdb6fabff
 800491c:	3fdb6db6 	.word	0x3fdb6db6
 8004920:	33333303 	.word	0x33333303
 8004924:	3fe33333 	.word	0x3fe33333
 8004928:	e0000000 	.word	0xe0000000
 800492c:	3feec709 	.word	0x3feec709
 8004930:	dc3a03fd 	.word	0xdc3a03fd
 8004934:	3feec709 	.word	0x3feec709
 8004938:	145b01f5 	.word	0x145b01f5
 800493c:	be3e2fe0 	.word	0xbe3e2fe0
 8004940:	00000000 	.word	0x00000000
 8004944:	3ff00000 	.word	0x3ff00000
 8004948:	7ff00000 	.word	0x7ff00000
 800494c:	43400000 	.word	0x43400000
 8004950:	0003988e 	.word	0x0003988e
 8004954:	000bb679 	.word	0x000bb679
 8004958:	08005cd8 	.word	0x08005cd8
 800495c:	3ff00000 	.word	0x3ff00000
 8004960:	40080000 	.word	0x40080000
 8004964:	08005cf8 	.word	0x08005cf8
 8004968:	08005ce8 	.word	0x08005ce8
 800496c:	a3b5      	add	r3, pc, #724	; (adr r3, 8004c44 <__ieee754_pow+0xa54>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f7fb fc2d 	bl	80001d4 <__adddf3>
 800497a:	4622      	mov	r2, r4
 800497c:	ec41 0b1a 	vmov	d10, r0, r1
 8004980:	462b      	mov	r3, r5
 8004982:	4630      	mov	r0, r6
 8004984:	4639      	mov	r1, r7
 8004986:	f7fb fc23 	bl	80001d0 <__aeabi_dsub>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	ec51 0b1a 	vmov	r0, r1, d10
 8004992:	f7fc f865 	bl	8000a60 <__aeabi_dcmpgt>
 8004996:	2800      	cmp	r0, #0
 8004998:	f47f ae04 	bne.w	80045a4 <__ieee754_pow+0x3b4>
 800499c:	4aa4      	ldr	r2, [pc, #656]	; (8004c30 <__ieee754_pow+0xa40>)
 800499e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f340 8108 	ble.w	8004bb8 <__ieee754_pow+0x9c8>
 80049a8:	151b      	asrs	r3, r3, #20
 80049aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80049ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80049b2:	fa4a f303 	asr.w	r3, sl, r3
 80049b6:	445b      	add	r3, fp
 80049b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80049bc:	4e9d      	ldr	r6, [pc, #628]	; (8004c34 <__ieee754_pow+0xa44>)
 80049be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80049c2:	4116      	asrs	r6, r2
 80049c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80049c8:	2000      	movs	r0, #0
 80049ca:	ea23 0106 	bic.w	r1, r3, r6
 80049ce:	f1c2 0214 	rsb	r2, r2, #20
 80049d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80049d6:	fa4a fa02 	asr.w	sl, sl, r2
 80049da:	f1bb 0f00 	cmp.w	fp, #0
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	bfb8      	it	lt
 80049e8:	f1ca 0a00 	rsblt	sl, sl, #0
 80049ec:	f7fb fbf0 	bl	80001d0 <__aeabi_dsub>
 80049f0:	ec41 0b19 	vmov	d9, r0, r1
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	ec51 0b19 	vmov	r0, r1, d9
 80049fc:	f7fb fbea 	bl	80001d4 <__adddf3>
 8004a00:	a37b      	add	r3, pc, #492	; (adr r3, 8004bf0 <__ieee754_pow+0xa00>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	2000      	movs	r0, #0
 8004a08:	4604      	mov	r4, r0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	f7fb fd98 	bl	8000540 <__aeabi_dmul>
 8004a10:	ec53 2b19 	vmov	r2, r3, d9
 8004a14:	4606      	mov	r6, r0
 8004a16:	460f      	mov	r7, r1
 8004a18:	4620      	mov	r0, r4
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	f7fb fbd8 	bl	80001d0 <__aeabi_dsub>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4640      	mov	r0, r8
 8004a26:	4649      	mov	r1, r9
 8004a28:	f7fb fbd2 	bl	80001d0 <__aeabi_dsub>
 8004a2c:	a372      	add	r3, pc, #456	; (adr r3, 8004bf8 <__ieee754_pow+0xa08>)
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	f7fb fd85 	bl	8000540 <__aeabi_dmul>
 8004a36:	a372      	add	r3, pc, #456	; (adr r3, 8004c00 <__ieee754_pow+0xa10>)
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	4680      	mov	r8, r0
 8004a3e:	4689      	mov	r9, r1
 8004a40:	4620      	mov	r0, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7fb fd7c 	bl	8000540 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4640      	mov	r0, r8
 8004a4e:	4649      	mov	r1, r9
 8004a50:	f7fb fbc0 	bl	80001d4 <__adddf3>
 8004a54:	4604      	mov	r4, r0
 8004a56:	460d      	mov	r5, r1
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	4639      	mov	r1, r7
 8004a60:	f7fb fbb8 	bl	80001d4 <__adddf3>
 8004a64:	4632      	mov	r2, r6
 8004a66:	463b      	mov	r3, r7
 8004a68:	4680      	mov	r8, r0
 8004a6a:	4689      	mov	r9, r1
 8004a6c:	f7fb fbb0 	bl	80001d0 <__aeabi_dsub>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4620      	mov	r0, r4
 8004a76:	4629      	mov	r1, r5
 8004a78:	f7fb fbaa 	bl	80001d0 <__aeabi_dsub>
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	4606      	mov	r6, r0
 8004a80:	460f      	mov	r7, r1
 8004a82:	464b      	mov	r3, r9
 8004a84:	4640      	mov	r0, r8
 8004a86:	4649      	mov	r1, r9
 8004a88:	f7fb fd5a 	bl	8000540 <__aeabi_dmul>
 8004a8c:	a35e      	add	r3, pc, #376	; (adr r3, 8004c08 <__ieee754_pow+0xa18>)
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	4604      	mov	r4, r0
 8004a94:	460d      	mov	r5, r1
 8004a96:	f7fb fd53 	bl	8000540 <__aeabi_dmul>
 8004a9a:	a35d      	add	r3, pc, #372	; (adr r3, 8004c10 <__ieee754_pow+0xa20>)
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f7fb fb96 	bl	80001d0 <__aeabi_dsub>
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	462b      	mov	r3, r5
 8004aa8:	f7fb fd4a 	bl	8000540 <__aeabi_dmul>
 8004aac:	a35a      	add	r3, pc, #360	; (adr r3, 8004c18 <__ieee754_pow+0xa28>)
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	f7fb fb8f 	bl	80001d4 <__adddf3>
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	462b      	mov	r3, r5
 8004aba:	f7fb fd41 	bl	8000540 <__aeabi_dmul>
 8004abe:	a358      	add	r3, pc, #352	; (adr r3, 8004c20 <__ieee754_pow+0xa30>)
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f7fb fb84 	bl	80001d0 <__aeabi_dsub>
 8004ac8:	4622      	mov	r2, r4
 8004aca:	462b      	mov	r3, r5
 8004acc:	f7fb fd38 	bl	8000540 <__aeabi_dmul>
 8004ad0:	a355      	add	r3, pc, #340	; (adr r3, 8004c28 <__ieee754_pow+0xa38>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fb7d 	bl	80001d4 <__adddf3>
 8004ada:	4622      	mov	r2, r4
 8004adc:	462b      	mov	r3, r5
 8004ade:	f7fb fd2f 	bl	8000540 <__aeabi_dmul>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	4649      	mov	r1, r9
 8004aea:	f7fb fb71 	bl	80001d0 <__aeabi_dsub>
 8004aee:	4604      	mov	r4, r0
 8004af0:	460d      	mov	r5, r1
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4640      	mov	r0, r8
 8004af8:	4649      	mov	r1, r9
 8004afa:	f7fb fd21 	bl	8000540 <__aeabi_dmul>
 8004afe:	2200      	movs	r2, #0
 8004b00:	ec41 0b19 	vmov	d9, r0, r1
 8004b04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b08:	4620      	mov	r0, r4
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	f7fb fb60 	bl	80001d0 <__aeabi_dsub>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	ec51 0b19 	vmov	r0, r1, d9
 8004b18:	f7fb fe3c 	bl	8000794 <__aeabi_ddiv>
 8004b1c:	4632      	mov	r2, r6
 8004b1e:	4604      	mov	r4, r0
 8004b20:	460d      	mov	r5, r1
 8004b22:	463b      	mov	r3, r7
 8004b24:	4640      	mov	r0, r8
 8004b26:	4649      	mov	r1, r9
 8004b28:	f7fb fd0a 	bl	8000540 <__aeabi_dmul>
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	463b      	mov	r3, r7
 8004b30:	f7fb fb50 	bl	80001d4 <__adddf3>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f7fb fb48 	bl	80001d0 <__aeabi_dsub>
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	f7fb fb44 	bl	80001d0 <__aeabi_dsub>
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	493a      	ldr	r1, [pc, #232]	; (8004c38 <__ieee754_pow+0xa48>)
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f7fb fb3e 	bl	80001d0 <__aeabi_dsub>
 8004b54:	ec41 0b10 	vmov	d0, r0, r1
 8004b58:	ee10 3a90 	vmov	r3, s1
 8004b5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b64:	da2b      	bge.n	8004bbe <__ieee754_pow+0x9ce>
 8004b66:	4650      	mov	r0, sl
 8004b68:	f000 f966 	bl	8004e38 <scalbn>
 8004b6c:	ec51 0b10 	vmov	r0, r1, d0
 8004b70:	ec53 2b18 	vmov	r2, r3, d8
 8004b74:	f7ff bbed 	b.w	8004352 <__ieee754_pow+0x162>
 8004b78:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <__ieee754_pow+0xa4c>)
 8004b7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004b7e:	429e      	cmp	r6, r3
 8004b80:	f77f af0c 	ble.w	800499c <__ieee754_pow+0x7ac>
 8004b84:	4b2e      	ldr	r3, [pc, #184]	; (8004c40 <__ieee754_pow+0xa50>)
 8004b86:	440b      	add	r3, r1
 8004b88:	4303      	orrs	r3, r0
 8004b8a:	d009      	beq.n	8004ba0 <__ieee754_pow+0x9b0>
 8004b8c:	ec51 0b18 	vmov	r0, r1, d8
 8004b90:	2200      	movs	r2, #0
 8004b92:	2300      	movs	r3, #0
 8004b94:	f7fb ff46 	bl	8000a24 <__aeabi_dcmplt>
 8004b98:	3800      	subs	r0, #0
 8004b9a:	bf18      	it	ne
 8004b9c:	2001      	movne	r0, #1
 8004b9e:	e447      	b.n	8004430 <__ieee754_pow+0x240>
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	f7fb fb14 	bl	80001d0 <__aeabi_dsub>
 8004ba8:	4642      	mov	r2, r8
 8004baa:	464b      	mov	r3, r9
 8004bac:	f7fb ff4e 	bl	8000a4c <__aeabi_dcmpge>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f43f aef3 	beq.w	800499c <__ieee754_pow+0x7ac>
 8004bb6:	e7e9      	b.n	8004b8c <__ieee754_pow+0x99c>
 8004bb8:	f04f 0a00 	mov.w	sl, #0
 8004bbc:	e71a      	b.n	80049f4 <__ieee754_pow+0x804>
 8004bbe:	ec51 0b10 	vmov	r0, r1, d0
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	e7d4      	b.n	8004b70 <__ieee754_pow+0x980>
 8004bc6:	491c      	ldr	r1, [pc, #112]	; (8004c38 <__ieee754_pow+0xa48>)
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f7ff bb30 	b.w	800422e <__ieee754_pow+0x3e>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	f7ff bb2c 	b.w	800422e <__ieee754_pow+0x3e>
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	f7ff bb28 	b.w	800422e <__ieee754_pow+0x3e>
 8004bde:	9204      	str	r2, [sp, #16]
 8004be0:	f7ff bb7a 	b.w	80042d8 <__ieee754_pow+0xe8>
 8004be4:	2300      	movs	r3, #0
 8004be6:	f7ff bb64 	b.w	80042b2 <__ieee754_pow+0xc2>
 8004bea:	bf00      	nop
 8004bec:	f3af 8000 	nop.w
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	3fe62e43 	.word	0x3fe62e43
 8004bf8:	fefa39ef 	.word	0xfefa39ef
 8004bfc:	3fe62e42 	.word	0x3fe62e42
 8004c00:	0ca86c39 	.word	0x0ca86c39
 8004c04:	be205c61 	.word	0xbe205c61
 8004c08:	72bea4d0 	.word	0x72bea4d0
 8004c0c:	3e663769 	.word	0x3e663769
 8004c10:	c5d26bf1 	.word	0xc5d26bf1
 8004c14:	3ebbbd41 	.word	0x3ebbbd41
 8004c18:	af25de2c 	.word	0xaf25de2c
 8004c1c:	3f11566a 	.word	0x3f11566a
 8004c20:	16bebd93 	.word	0x16bebd93
 8004c24:	3f66c16c 	.word	0x3f66c16c
 8004c28:	5555553e 	.word	0x5555553e
 8004c2c:	3fc55555 	.word	0x3fc55555
 8004c30:	3fe00000 	.word	0x3fe00000
 8004c34:	000fffff 	.word	0x000fffff
 8004c38:	3ff00000 	.word	0x3ff00000
 8004c3c:	4090cbff 	.word	0x4090cbff
 8004c40:	3f6f3400 	.word	0x3f6f3400
 8004c44:	652b82fe 	.word	0x652b82fe
 8004c48:	3c971547 	.word	0x3c971547

08004c4c <__ieee754_sqrt>:
 8004c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c50:	ec55 4b10 	vmov	r4, r5, d0
 8004c54:	4e55      	ldr	r6, [pc, #340]	; (8004dac <__ieee754_sqrt+0x160>)
 8004c56:	43ae      	bics	r6, r5
 8004c58:	ee10 0a10 	vmov	r0, s0
 8004c5c:	ee10 3a10 	vmov	r3, s0
 8004c60:	462a      	mov	r2, r5
 8004c62:	4629      	mov	r1, r5
 8004c64:	d110      	bne.n	8004c88 <__ieee754_sqrt+0x3c>
 8004c66:	ee10 2a10 	vmov	r2, s0
 8004c6a:	462b      	mov	r3, r5
 8004c6c:	f7fb fc68 	bl	8000540 <__aeabi_dmul>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4620      	mov	r0, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f7fb faac 	bl	80001d4 <__adddf3>
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	460d      	mov	r5, r1
 8004c80:	ec45 4b10 	vmov	d0, r4, r5
 8004c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	dc10      	bgt.n	8004cae <__ieee754_sqrt+0x62>
 8004c8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004c90:	4330      	orrs	r0, r6
 8004c92:	d0f5      	beq.n	8004c80 <__ieee754_sqrt+0x34>
 8004c94:	b15d      	cbz	r5, 8004cae <__ieee754_sqrt+0x62>
 8004c96:	ee10 2a10 	vmov	r2, s0
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	ee10 0a10 	vmov	r0, s0
 8004ca0:	f7fb fa96 	bl	80001d0 <__aeabi_dsub>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	f7fb fd74 	bl	8000794 <__aeabi_ddiv>
 8004cac:	e7e6      	b.n	8004c7c <__ieee754_sqrt+0x30>
 8004cae:	1512      	asrs	r2, r2, #20
 8004cb0:	d074      	beq.n	8004d9c <__ieee754_sqrt+0x150>
 8004cb2:	07d4      	lsls	r4, r2, #31
 8004cb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004cb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004cbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004cc0:	bf5e      	ittt	pl
 8004cc2:	0fda      	lsrpl	r2, r3, #31
 8004cc4:	005b      	lslpl	r3, r3, #1
 8004cc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004cca:	2400      	movs	r4, #0
 8004ccc:	0fda      	lsrs	r2, r3, #31
 8004cce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004cd2:	107f      	asrs	r7, r7, #1
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2516      	movs	r5, #22
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004cde:	1886      	adds	r6, r0, r2
 8004ce0:	428e      	cmp	r6, r1
 8004ce2:	bfde      	ittt	le
 8004ce4:	1b89      	suble	r1, r1, r6
 8004ce6:	18b0      	addle	r0, r6, r2
 8004ce8:	18a4      	addle	r4, r4, r2
 8004cea:	0049      	lsls	r1, r1, #1
 8004cec:	3d01      	subs	r5, #1
 8004cee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004cf2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004cf6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004cfa:	d1f0      	bne.n	8004cde <__ieee754_sqrt+0x92>
 8004cfc:	462a      	mov	r2, r5
 8004cfe:	f04f 0e20 	mov.w	lr, #32
 8004d02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004d06:	4281      	cmp	r1, r0
 8004d08:	eb06 0c05 	add.w	ip, r6, r5
 8004d0c:	dc02      	bgt.n	8004d14 <__ieee754_sqrt+0xc8>
 8004d0e:	d113      	bne.n	8004d38 <__ieee754_sqrt+0xec>
 8004d10:	459c      	cmp	ip, r3
 8004d12:	d811      	bhi.n	8004d38 <__ieee754_sqrt+0xec>
 8004d14:	f1bc 0f00 	cmp.w	ip, #0
 8004d18:	eb0c 0506 	add.w	r5, ip, r6
 8004d1c:	da43      	bge.n	8004da6 <__ieee754_sqrt+0x15a>
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	db41      	blt.n	8004da6 <__ieee754_sqrt+0x15a>
 8004d22:	f100 0801 	add.w	r8, r0, #1
 8004d26:	1a09      	subs	r1, r1, r0
 8004d28:	459c      	cmp	ip, r3
 8004d2a:	bf88      	it	hi
 8004d2c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004d30:	eba3 030c 	sub.w	r3, r3, ip
 8004d34:	4432      	add	r2, r6
 8004d36:	4640      	mov	r0, r8
 8004d38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004d3c:	f1be 0e01 	subs.w	lr, lr, #1
 8004d40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004d44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d4c:	d1db      	bne.n	8004d06 <__ieee754_sqrt+0xba>
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	d006      	beq.n	8004d60 <__ieee754_sqrt+0x114>
 8004d52:	1c50      	adds	r0, r2, #1
 8004d54:	bf13      	iteet	ne
 8004d56:	3201      	addne	r2, #1
 8004d58:	3401      	addeq	r4, #1
 8004d5a:	4672      	moveq	r2, lr
 8004d5c:	f022 0201 	bicne.w	r2, r2, #1
 8004d60:	1063      	asrs	r3, r4, #1
 8004d62:	0852      	lsrs	r2, r2, #1
 8004d64:	07e1      	lsls	r1, r4, #31
 8004d66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004d6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004d6e:	bf48      	it	mi
 8004d70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004d74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004d78:	4614      	mov	r4, r2
 8004d7a:	e781      	b.n	8004c80 <__ieee754_sqrt+0x34>
 8004d7c:	0ad9      	lsrs	r1, r3, #11
 8004d7e:	3815      	subs	r0, #21
 8004d80:	055b      	lsls	r3, r3, #21
 8004d82:	2900      	cmp	r1, #0
 8004d84:	d0fa      	beq.n	8004d7c <__ieee754_sqrt+0x130>
 8004d86:	02cd      	lsls	r5, r1, #11
 8004d88:	d50a      	bpl.n	8004da0 <__ieee754_sqrt+0x154>
 8004d8a:	f1c2 0420 	rsb	r4, r2, #32
 8004d8e:	fa23 f404 	lsr.w	r4, r3, r4
 8004d92:	1e55      	subs	r5, r2, #1
 8004d94:	4093      	lsls	r3, r2
 8004d96:	4321      	orrs	r1, r4
 8004d98:	1b42      	subs	r2, r0, r5
 8004d9a:	e78a      	b.n	8004cb2 <__ieee754_sqrt+0x66>
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	e7f0      	b.n	8004d82 <__ieee754_sqrt+0x136>
 8004da0:	0049      	lsls	r1, r1, #1
 8004da2:	3201      	adds	r2, #1
 8004da4:	e7ef      	b.n	8004d86 <__ieee754_sqrt+0x13a>
 8004da6:	4680      	mov	r8, r0
 8004da8:	e7bd      	b.n	8004d26 <__ieee754_sqrt+0xda>
 8004daa:	bf00      	nop
 8004dac:	7ff00000 	.word	0x7ff00000

08004db0 <with_errno>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4604      	mov	r4, r0
 8004db4:	460d      	mov	r5, r1
 8004db6:	4616      	mov	r6, r2
 8004db8:	f7ff f8ae 	bl	8003f18 <__errno>
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	6006      	str	r6, [r0, #0]
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}

08004dc4 <xflow>:
 8004dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dc6:	4614      	mov	r4, r2
 8004dc8:	461d      	mov	r5, r3
 8004dca:	b108      	cbz	r0, 8004dd0 <xflow+0xc>
 8004dcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004dd0:	e9cd 2300 	strd	r2, r3, [sp]
 8004dd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dd8:	4620      	mov	r0, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	f7fb fbb0 	bl	8000540 <__aeabi_dmul>
 8004de0:	2222      	movs	r2, #34	; 0x22
 8004de2:	b003      	add	sp, #12
 8004de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de8:	f7ff bfe2 	b.w	8004db0 <with_errno>

08004dec <__math_uflow>:
 8004dec:	b508      	push	{r3, lr}
 8004dee:	2200      	movs	r2, #0
 8004df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004df4:	f7ff ffe6 	bl	8004dc4 <xflow>
 8004df8:	ec41 0b10 	vmov	d0, r0, r1
 8004dfc:	bd08      	pop	{r3, pc}

08004dfe <__math_oflow>:
 8004dfe:	b508      	push	{r3, lr}
 8004e00:	2200      	movs	r2, #0
 8004e02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004e06:	f7ff ffdd 	bl	8004dc4 <xflow>
 8004e0a:	ec41 0b10 	vmov	d0, r0, r1
 8004e0e:	bd08      	pop	{r3, pc}

08004e10 <fabs>:
 8004e10:	ec51 0b10 	vmov	r0, r1, d0
 8004e14:	ee10 2a10 	vmov	r2, s0
 8004e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e1c:	ec43 2b10 	vmov	d0, r2, r3
 8004e20:	4770      	bx	lr

08004e22 <finite>:
 8004e22:	b082      	sub	sp, #8
 8004e24:	ed8d 0b00 	vstr	d0, [sp]
 8004e28:	9801      	ldr	r0, [sp, #4]
 8004e2a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004e2e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004e32:	0fc0      	lsrs	r0, r0, #31
 8004e34:	b002      	add	sp, #8
 8004e36:	4770      	bx	lr

08004e38 <scalbn>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	ec55 4b10 	vmov	r4, r5, d0
 8004e3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004e42:	4606      	mov	r6, r0
 8004e44:	462b      	mov	r3, r5
 8004e46:	b99a      	cbnz	r2, 8004e70 <scalbn+0x38>
 8004e48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004e4c:	4323      	orrs	r3, r4
 8004e4e:	d036      	beq.n	8004ebe <scalbn+0x86>
 8004e50:	4b39      	ldr	r3, [pc, #228]	; (8004f38 <scalbn+0x100>)
 8004e52:	4629      	mov	r1, r5
 8004e54:	ee10 0a10 	vmov	r0, s0
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f7fb fb71 	bl	8000540 <__aeabi_dmul>
 8004e5e:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <scalbn+0x104>)
 8004e60:	429e      	cmp	r6, r3
 8004e62:	4604      	mov	r4, r0
 8004e64:	460d      	mov	r5, r1
 8004e66:	da10      	bge.n	8004e8a <scalbn+0x52>
 8004e68:	a32b      	add	r3, pc, #172	; (adr r3, 8004f18 <scalbn+0xe0>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	e03a      	b.n	8004ee6 <scalbn+0xae>
 8004e70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004e74:	428a      	cmp	r2, r1
 8004e76:	d10c      	bne.n	8004e92 <scalbn+0x5a>
 8004e78:	ee10 2a10 	vmov	r2, s0
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	4629      	mov	r1, r5
 8004e80:	f7fb f9a8 	bl	80001d4 <__adddf3>
 8004e84:	4604      	mov	r4, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	e019      	b.n	8004ebe <scalbn+0x86>
 8004e8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004e8e:	460b      	mov	r3, r1
 8004e90:	3a36      	subs	r2, #54	; 0x36
 8004e92:	4432      	add	r2, r6
 8004e94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004e98:	428a      	cmp	r2, r1
 8004e9a:	dd08      	ble.n	8004eae <scalbn+0x76>
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	a120      	add	r1, pc, #128	; (adr r1, 8004f20 <scalbn+0xe8>)
 8004ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ea4:	da1c      	bge.n	8004ee0 <scalbn+0xa8>
 8004ea6:	a120      	add	r1, pc, #128	; (adr r1, 8004f28 <scalbn+0xf0>)
 8004ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004eac:	e018      	b.n	8004ee0 <scalbn+0xa8>
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	dd08      	ble.n	8004ec4 <scalbn+0x8c>
 8004eb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004eb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004eba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004ebe:	ec45 4b10 	vmov	d0, r4, r5
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004ec8:	da19      	bge.n	8004efe <scalbn+0xc6>
 8004eca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004ece:	429e      	cmp	r6, r3
 8004ed0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004ed4:	dd0a      	ble.n	8004eec <scalbn+0xb4>
 8004ed6:	a112      	add	r1, pc, #72	; (adr r1, 8004f20 <scalbn+0xe8>)
 8004ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e2      	bne.n	8004ea6 <scalbn+0x6e>
 8004ee0:	a30f      	add	r3, pc, #60	; (adr r3, 8004f20 <scalbn+0xe8>)
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f7fb fb2b 	bl	8000540 <__aeabi_dmul>
 8004eea:	e7cb      	b.n	8004e84 <scalbn+0x4c>
 8004eec:	a10a      	add	r1, pc, #40	; (adr r1, 8004f18 <scalbn+0xe0>)
 8004eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0b8      	beq.n	8004e68 <scalbn+0x30>
 8004ef6:	a10e      	add	r1, pc, #56	; (adr r1, 8004f30 <scalbn+0xf8>)
 8004ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004efc:	e7b4      	b.n	8004e68 <scalbn+0x30>
 8004efe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f02:	3236      	adds	r2, #54	; 0x36
 8004f04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <scalbn+0x108>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	e7e8      	b.n	8004ee6 <scalbn+0xae>
 8004f14:	f3af 8000 	nop.w
 8004f18:	c2f8f359 	.word	0xc2f8f359
 8004f1c:	01a56e1f 	.word	0x01a56e1f
 8004f20:	8800759c 	.word	0x8800759c
 8004f24:	7e37e43c 	.word	0x7e37e43c
 8004f28:	8800759c 	.word	0x8800759c
 8004f2c:	fe37e43c 	.word	0xfe37e43c
 8004f30:	c2f8f359 	.word	0xc2f8f359
 8004f34:	81a56e1f 	.word	0x81a56e1f
 8004f38:	43500000 	.word	0x43500000
 8004f3c:	ffff3cb0 	.word	0xffff3cb0
 8004f40:	3c900000 	.word	0x3c900000

08004f44 <_init>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	bf00      	nop
 8004f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4a:	bc08      	pop	{r3}
 8004f4c:	469e      	mov	lr, r3
 8004f4e:	4770      	bx	lr

08004f50 <_fini>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr
