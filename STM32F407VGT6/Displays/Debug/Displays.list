
Displays.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000340c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000152c  0800359c  0800359c  0000459c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac8  08004ac8  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ac8  08004ac8  00005ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad0  08004ad0  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004ad8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000606c  2**0
                  CONTENTS
 10 .bss          0000061c  2000006c  2000006c  0000606c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000688  20000688  0000606c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007a6b  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f4  00000000  00000000  0000db07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0000f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000060b  00000000  00000000  0000f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020756  00000000  00000000  0000fff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abdb  00000000  00000000  00030749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2b5e  00000000  00000000  0003b324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fde82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000256c  00000000  00000000  000fdec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00100434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003584 	.word	0x08003584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003584 	.word	0x08003584

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b099      	sub	sp, #100	@ 0x64
 8000564:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 febb 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f8a5 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f95d 	bl	800082c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000572:	f000 f8ff 	bl	8000774 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000576:	f000 f92b 	bl	80007d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(hi2c1);
 800057a:	4c47      	ldr	r4, [pc, #284]	@ (8000698 <main+0x138>)
 800057c:	4668      	mov	r0, sp
 800057e:	f104 0310 	add.w	r3, r4, #16
 8000582:	2244      	movs	r2, #68	@ 0x44
 8000584:	4619      	mov	r1, r3
 8000586:	f002 fbb1 	bl	8002cec <memcpy>
 800058a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800058e:	f000 f97b 	bl	8000888 <SSD1306_Init>
  SSD1306_Init(hi2c2);
 8000592:	4c42      	ldr	r4, [pc, #264]	@ (800069c <main+0x13c>)
 8000594:	4668      	mov	r0, sp
 8000596:	f104 0310 	add.w	r3, r4, #16
 800059a:	2244      	movs	r2, #68	@ 0x44
 800059c:	4619      	mov	r1, r3
 800059e:	f002 fba5 	bl	8002cec <memcpy>
 80005a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005a6:	f000 f96f 	bl	8000888 <SSD1306_Init>
  uint16_t count = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	82fb      	strh	r3, [r7, #22]
  uint16_t countLVL = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	82bb      	strh	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  SSD1306_Clear();
	  char One_print[5] = "";
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	2300      	movs	r3, #0
 80005b8:	743b      	strb	r3, [r7, #16]
	  char Two_print[5] = "";
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	2300      	movs	r3, #0
 80005c0:	723b      	strb	r3, [r7, #8]
	  	  SSD1306_GotoXY(35, 0);
 80005c2:	2100      	movs	r1, #0
 80005c4:	2023      	movs	r0, #35	@ 0x23
 80005c6:	f000 fbef 	bl	8000da8 <SSD1306_GotoXY>
	  	  SSD1306_Puts("SCORE", &Font_11x18, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	4934      	ldr	r1, [pc, #208]	@ (80006a0 <main+0x140>)
 80005ce:	4835      	ldr	r0, [pc, #212]	@ (80006a4 <main+0x144>)
 80005d0:	f000 fc7e 	bl	8000ed0 <SSD1306_Puts>
	  	  sprintf(One_print, "%u", count);
 80005d4:	8afa      	ldrh	r2, [r7, #22]
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4933      	ldr	r1, [pc, #204]	@ (80006a8 <main+0x148>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fb31 	bl	8002c44 <siprintf>
			SSD1306_GotoXY(35, 35);
 80005e2:	2123      	movs	r1, #35	@ 0x23
 80005e4:	2023      	movs	r0, #35	@ 0x23
 80005e6:	f000 fbdf 	bl	8000da8 <SSD1306_GotoXY>
			SSD1306_Puts(One_print, &Font_11x18, 1);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2201      	movs	r2, #1
 80005f0:	492b      	ldr	r1, [pc, #172]	@ (80006a0 <main+0x140>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fc6c 	bl	8000ed0 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(hi2c1);
 80005f8:	4c27      	ldr	r4, [pc, #156]	@ (8000698 <main+0x138>)
 80005fa:	4668      	mov	r0, sp
 80005fc:	f104 0310 	add.w	r3, r4, #16
 8000600:	2244      	movs	r2, #68	@ 0x44
 8000602:	4619      	mov	r1, r3
 8000604:	f002 fb72 	bl	8002cec <memcpy>
 8000608:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800060c:	f000 faf8 	bl	8000c00 <SSD1306_UpdateScreen>
	  	  count =  count == 65000 ? 1 : count + 1;
 8000610:	8afb      	ldrh	r3, [r7, #22]
 8000612:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8000616:	4293      	cmp	r3, r2
 8000618:	d003      	beq.n	8000622 <main+0xc2>
 800061a:	8afb      	ldrh	r3, [r7, #22]
 800061c:	3301      	adds	r3, #1
 800061e:	b29b      	uxth	r3, r3
 8000620:	e000      	b.n	8000624 <main+0xc4>
 8000622:	2301      	movs	r3, #1
 8000624:	82fb      	strh	r3, [r7, #22]
	  	  countLVL =  count % 100 == 0 ? countLVL + 1 : countLVL;
 8000626:	8afb      	ldrh	r3, [r7, #22]
 8000628:	4a20      	ldr	r2, [pc, #128]	@ (80006ac <main+0x14c>)
 800062a:	fba2 1203 	umull	r1, r2, r2, r3
 800062e:	0952      	lsrs	r2, r2, #5
 8000630:	2164      	movs	r1, #100	@ 0x64
 8000632:	fb01 f202 	mul.w	r2, r1, r2
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	b29b      	uxth	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d103      	bne.n	8000646 <main+0xe6>
 800063e:	8abb      	ldrh	r3, [r7, #20]
 8000640:	3301      	adds	r3, #1
 8000642:	b29b      	uxth	r3, r3
 8000644:	e000      	b.n	8000648 <main+0xe8>
 8000646:	8abb      	ldrh	r3, [r7, #20]
 8000648:	82bb      	strh	r3, [r7, #20]


//
	  	  SSD1306_GotoXY(35, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	2023      	movs	r0, #35	@ 0x23
 800064e:	f000 fbab 	bl	8000da8 <SSD1306_GotoXY>
	  	  SSD1306_Puts("SCORE LVL", &Font_7x10, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	4916      	ldr	r1, [pc, #88]	@ (80006b0 <main+0x150>)
 8000656:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <main+0x154>)
 8000658:	f000 fc3a 	bl	8000ed0 <SSD1306_Puts>
	  	  sprintf(Two_print, "%u", countLVL);
 800065c:	8aba      	ldrh	r2, [r7, #20]
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4911      	ldr	r1, [pc, #68]	@ (80006a8 <main+0x148>)
 8000662:	4618      	mov	r0, r3
 8000664:	f002 faee 	bl	8002c44 <siprintf>
	  	  SSD1306_GotoXY(35, 35);
 8000668:	2123      	movs	r1, #35	@ 0x23
 800066a:	2023      	movs	r0, #35	@ 0x23
 800066c:	f000 fb9c 	bl	8000da8 <SSD1306_GotoXY>
 	  	  SSD1306_Puts(Two_print, &Font_11x18, 1);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2201      	movs	r2, #1
 8000674:	490a      	ldr	r1, [pc, #40]	@ (80006a0 <main+0x140>)
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fc2a 	bl	8000ed0 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(hi2c2);
 800067c:	4c07      	ldr	r4, [pc, #28]	@ (800069c <main+0x13c>)
 800067e:	4668      	mov	r0, sp
 8000680:	f104 0310 	add.w	r3, r4, #16
 8000684:	2244      	movs	r2, #68	@ 0x44
 8000686:	4619      	mov	r1, r3
 8000688:	f002 fb30 	bl	8002cec <memcpy>
 800068c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000690:	f000 fab6 	bl	8000c00 <SSD1306_UpdateScreen>
  {
 8000694:	e78d      	b.n	80005b2 <main+0x52>
 8000696:	bf00      	nop
 8000698:	20000088 	.word	0x20000088
 800069c:	200000dc 	.word	0x200000dc
 80006a0:	20000008 	.word	0x20000008
 80006a4:	0800359c 	.word	0x0800359c
 80006a8:	080035a4 	.word	0x080035a4
 80006ac:	51eb851f 	.word	0x51eb851f
 80006b0:	20000000 	.word	0x20000000
 80006b4:	080035a8 	.word	0x080035a8

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	@ 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fadc 	bl	8002c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xb4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xb4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xb4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <SystemClock_Config+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1b      	ldr	r2, [pc, #108]	@ (8000770 <SystemClock_Config+0xb8>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <SystemClock_Config+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fe47 	bl	80023bc <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000734:	f000 f8a2 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f8aa 	bl	80028ac <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800075e:	f000 f88d 	bl	800087c <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f001 f889 	bl	80018c8 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 f85e 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000088 	.word	0x20000088
 80007c8:	40005400 	.word	0x40005400
 80007cc:	00061a80 	.word	0x00061a80

080007d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C2_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	@ (8000824 <MX_I2C2_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C2_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <MX_I2C2_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_I2C2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_I2C2_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <MX_I2C2_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_I2C2_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <MX_I2C2_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_I2C2_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_I2C2_Init+0x50>)
 800080e:	f001 f85b 	bl	80018c8 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 f830 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000dc 	.word	0x200000dc
 8000824:	40005800 	.word	0x40005800
 8000828:	00061a80 	.word	0x00061a80

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <MX_GPIO_Init+0x4c>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <SSD1306_Init>:





uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c) {
 8000888:	b084      	sub	sp, #16
 800088a:	b580      	push	{r7, lr}
 800088c:	b096      	sub	sp, #88	@ 0x58
 800088e:	af14      	add	r7, sp, #80	@ 0x50
 8000890:	f107 0c10 	add.w	ip, r7, #16
 8000894:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 8000898:	f000 fb40 	bl	8000f1c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800089c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80008a0:	2201      	movs	r2, #1
 80008a2:	2178      	movs	r1, #120	@ 0x78
 80008a4:	f107 0010 	add.w	r0, r7, #16
 80008a8:	f001 fa50 	bl	8001d4c <HAL_I2C_IsDeviceReady>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SSD1306_Init+0x2e>
		/* Return false */
		return 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e19b      	b.n	8000bee <SSD1306_Init+0x366>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008b6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80008ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008bc:	e002      	b.n	80008c4 <SSD1306_Init+0x3c>
		p--;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1f9      	bne.n	80008be <SSD1306_Init+0x36>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE, hi2c); //display off
 80008ca:	4668      	mov	r0, sp
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2250      	movs	r2, #80	@ 0x50
 80008d2:	4619      	mov	r1, r3
 80008d4:	f002 fa0a 	bl	8002cec <memcpy>
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	22ae      	movs	r2, #174	@ 0xae
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	@ 0x78
 80008e0:	f000 fb97 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20, hi2c); //Set Memory Addressing Mode
 80008e4:	4668      	mov	r0, sp
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2250      	movs	r2, #80	@ 0x50
 80008ec:	4619      	mov	r1, r3
 80008ee:	f002 f9fd 	bl	8002cec <memcpy>
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	2220      	movs	r2, #32
 80008f6:	2100      	movs	r1, #0
 80008f8:	2078      	movs	r0, #120	@ 0x78
 80008fa:	f000 fb8a 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10, hi2c); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008fe:	4668      	mov	r0, sp
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2250      	movs	r2, #80	@ 0x50
 8000906:	4619      	mov	r1, r3
 8000908:	f002 f9f0 	bl	8002cec <memcpy>
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	2210      	movs	r2, #16
 8000910:	2100      	movs	r1, #0
 8000912:	2078      	movs	r0, #120	@ 0x78
 8000914:	f000 fb7d 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0, hi2c); //Set Page Start Address for Page Addressing Mode,0-7
 8000918:	4668      	mov	r0, sp
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2250      	movs	r2, #80	@ 0x50
 8000920:	4619      	mov	r1, r3
 8000922:	f002 f9e3 	bl	8002cec <memcpy>
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	22b0      	movs	r2, #176	@ 0xb0
 800092a:	2100      	movs	r1, #0
 800092c:	2078      	movs	r0, #120	@ 0x78
 800092e:	f000 fb70 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8, hi2c); //Set COM Output Scan Direction
 8000932:	4668      	mov	r0, sp
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2250      	movs	r2, #80	@ 0x50
 800093a:	4619      	mov	r1, r3
 800093c:	f002 f9d6 	bl	8002cec <memcpy>
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	22c8      	movs	r2, #200	@ 0xc8
 8000944:	2100      	movs	r1, #0
 8000946:	2078      	movs	r0, #120	@ 0x78
 8000948:	f000 fb63 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00, hi2c); //---set low column address
 800094c:	4668      	mov	r0, sp
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2250      	movs	r2, #80	@ 0x50
 8000954:	4619      	mov	r1, r3
 8000956:	f002 f9c9 	bl	8002cec <memcpy>
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2078      	movs	r0, #120	@ 0x78
 8000962:	f000 fb56 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10, hi2c); //---set high column address
 8000966:	4668      	mov	r0, sp
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2250      	movs	r2, #80	@ 0x50
 800096e:	4619      	mov	r1, r3
 8000970:	f002 f9bc 	bl	8002cec <memcpy>
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	2210      	movs	r2, #16
 8000978:	2100      	movs	r1, #0
 800097a:	2078      	movs	r0, #120	@ 0x78
 800097c:	f000 fb49 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40, hi2c); //--set start line address
 8000980:	4668      	mov	r0, sp
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2250      	movs	r2, #80	@ 0x50
 8000988:	4619      	mov	r1, r3
 800098a:	f002 f9af 	bl	8002cec <memcpy>
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	2100      	movs	r1, #0
 8000994:	2078      	movs	r0, #120	@ 0x78
 8000996:	f000 fb3c 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81, hi2c); //--set contrast control register
 800099a:	4668      	mov	r0, sp
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2250      	movs	r2, #80	@ 0x50
 80009a2:	4619      	mov	r1, r3
 80009a4:	f002 f9a2 	bl	8002cec <memcpy>
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	2281      	movs	r2, #129	@ 0x81
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	@ 0x78
 80009b0:	f000 fb2f 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF, hi2c);
 80009b4:	4668      	mov	r0, sp
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2250      	movs	r2, #80	@ 0x50
 80009bc:	4619      	mov	r1, r3
 80009be:	f002 f995 	bl	8002cec <memcpy>
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	22ff      	movs	r2, #255	@ 0xff
 80009c6:	2100      	movs	r1, #0
 80009c8:	2078      	movs	r0, #120	@ 0x78
 80009ca:	f000 fb22 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1, hi2c); //--set segment re-map 0 to 127
 80009ce:	4668      	mov	r0, sp
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2250      	movs	r2, #80	@ 0x50
 80009d6:	4619      	mov	r1, r3
 80009d8:	f002 f988 	bl	8002cec <memcpy>
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	22a1      	movs	r2, #161	@ 0xa1
 80009e0:	2100      	movs	r1, #0
 80009e2:	2078      	movs	r0, #120	@ 0x78
 80009e4:	f000 fb15 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6, hi2c); //--set normal display
 80009e8:	4668      	mov	r0, sp
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2250      	movs	r2, #80	@ 0x50
 80009f0:	4619      	mov	r1, r3
 80009f2:	f002 f97b 	bl	8002cec <memcpy>
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	22a6      	movs	r2, #166	@ 0xa6
 80009fa:	2100      	movs	r1, #0
 80009fc:	2078      	movs	r0, #120	@ 0x78
 80009fe:	f000 fb08 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8, hi2c); //--set multiplex ratio(1 to 64)
 8000a02:	4668      	mov	r0, sp
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2250      	movs	r2, #80	@ 0x50
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f002 f96e 	bl	8002cec <memcpy>
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	22a8      	movs	r2, #168	@ 0xa8
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	@ 0x78
 8000a18:	f000 fafb 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F, hi2c); //
 8000a1c:	4668      	mov	r0, sp
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2250      	movs	r2, #80	@ 0x50
 8000a24:	4619      	mov	r1, r3
 8000a26:	f002 f961 	bl	8002cec <memcpy>
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	223f      	movs	r2, #63	@ 0x3f
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2078      	movs	r0, #120	@ 0x78
 8000a32:	f000 faee 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4, hi2c); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a36:	4668      	mov	r0, sp
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2250      	movs	r2, #80	@ 0x50
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f002 f954 	bl	8002cec <memcpy>
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	22a4      	movs	r2, #164	@ 0xa4
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2078      	movs	r0, #120	@ 0x78
 8000a4c:	f000 fae1 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3, hi2c); //-set display offset
 8000a50:	4668      	mov	r0, sp
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2250      	movs	r2, #80	@ 0x50
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f002 f947 	bl	8002cec <memcpy>
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	22d3      	movs	r2, #211	@ 0xd3
 8000a62:	2100      	movs	r1, #0
 8000a64:	2078      	movs	r0, #120	@ 0x78
 8000a66:	f000 fad4 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00, hi2c); //-not offset
 8000a6a:	4668      	mov	r0, sp
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2250      	movs	r2, #80	@ 0x50
 8000a72:	4619      	mov	r1, r3
 8000a74:	f002 f93a 	bl	8002cec <memcpy>
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2078      	movs	r0, #120	@ 0x78
 8000a80:	f000 fac7 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5, hi2c); //--set display clock divide ratio/oscillator frequency
 8000a84:	4668      	mov	r0, sp
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2250      	movs	r2, #80	@ 0x50
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f002 f92d 	bl	8002cec <memcpy>
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	22d5      	movs	r2, #213	@ 0xd5
 8000a96:	2100      	movs	r1, #0
 8000a98:	2078      	movs	r0, #120	@ 0x78
 8000a9a:	f000 faba 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0, hi2c); //--set divide ratio
 8000a9e:	4668      	mov	r0, sp
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2250      	movs	r2, #80	@ 0x50
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f002 f920 	bl	8002cec <memcpy>
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	22f0      	movs	r2, #240	@ 0xf0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2078      	movs	r0, #120	@ 0x78
 8000ab4:	f000 faad 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9, hi2c); //--set pre-charge period
 8000ab8:	4668      	mov	r0, sp
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	2250      	movs	r2, #80	@ 0x50
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f002 f913 	bl	8002cec <memcpy>
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	22d9      	movs	r2, #217	@ 0xd9
 8000aca:	2100      	movs	r1, #0
 8000acc:	2078      	movs	r0, #120	@ 0x78
 8000ace:	f000 faa0 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22, hi2c); //
 8000ad2:	4668      	mov	r0, sp
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2250      	movs	r2, #80	@ 0x50
 8000ada:	4619      	mov	r1, r3
 8000adc:	f002 f906 	bl	8002cec <memcpy>
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	2222      	movs	r2, #34	@ 0x22
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2078      	movs	r0, #120	@ 0x78
 8000ae8:	f000 fa93 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA, hi2c); //--set com pins hardware configuration
 8000aec:	4668      	mov	r0, sp
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2250      	movs	r2, #80	@ 0x50
 8000af4:	4619      	mov	r1, r3
 8000af6:	f002 f8f9 	bl	8002cec <memcpy>
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	22da      	movs	r2, #218	@ 0xda
 8000afe:	2100      	movs	r1, #0
 8000b00:	2078      	movs	r0, #120	@ 0x78
 8000b02:	f000 fa86 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12, hi2c);
 8000b06:	4668      	mov	r0, sp
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2250      	movs	r2, #80	@ 0x50
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f002 f8ec 	bl	8002cec <memcpy>
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	2212      	movs	r2, #18
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2078      	movs	r0, #120	@ 0x78
 8000b1c:	f000 fa79 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB, hi2c); //--set vcomh
 8000b20:	4668      	mov	r0, sp
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2250      	movs	r2, #80	@ 0x50
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f002 f8df 	bl	8002cec <memcpy>
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	22db      	movs	r2, #219	@ 0xdb
 8000b32:	2100      	movs	r1, #0
 8000b34:	2078      	movs	r0, #120	@ 0x78
 8000b36:	f000 fa6c 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20, hi2c); //0x20,0.77xVcc
 8000b3a:	4668      	mov	r0, sp
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2250      	movs	r2, #80	@ 0x50
 8000b42:	4619      	mov	r1, r3
 8000b44:	f002 f8d2 	bl	8002cec <memcpy>
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2078      	movs	r0, #120	@ 0x78
 8000b50:	f000 fa5f 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D, hi2c); //--set DC-DC enable
 8000b54:	4668      	mov	r0, sp
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2250      	movs	r2, #80	@ 0x50
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f002 f8c5 	bl	8002cec <memcpy>
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	228d      	movs	r2, #141	@ 0x8d
 8000b66:	2100      	movs	r1, #0
 8000b68:	2078      	movs	r0, #120	@ 0x78
 8000b6a:	f000 fa52 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14, hi2c); //
 8000b6e:	4668      	mov	r0, sp
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2250      	movs	r2, #80	@ 0x50
 8000b76:	4619      	mov	r1, r3
 8000b78:	f002 f8b8 	bl	8002cec <memcpy>
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2214      	movs	r2, #20
 8000b80:	2100      	movs	r1, #0
 8000b82:	2078      	movs	r0, #120	@ 0x78
 8000b84:	f000 fa45 	bl	8001012 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF, hi2c); //--turn on SSD1306 panel
 8000b88:	4668      	mov	r0, sp
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	2250      	movs	r2, #80	@ 0x50
 8000b90:	4619      	mov	r1, r3
 8000b92:	f002 f8ab 	bl	8002cec <memcpy>
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	22af      	movs	r2, #175	@ 0xaf
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2078      	movs	r0, #120	@ 0x78
 8000b9e:	f000 fa38 	bl	8001012 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL, hi2c);
 8000ba2:	4668      	mov	r0, sp
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2250      	movs	r2, #80	@ 0x50
 8000baa:	4619      	mov	r1, r3
 8000bac:	f002 f89e 	bl	8002cec <memcpy>
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	222e      	movs	r2, #46	@ 0x2e
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2078      	movs	r0, #120	@ 0x78
 8000bb8:	f000 fa2b 	bl	8001012 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f87b 	bl	8000cb8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(hi2c);
 8000bc2:	4668      	mov	r0, sp
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	2244      	movs	r2, #68	@ 0x44
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f002 f88e 	bl	8002cec <memcpy>
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd6:	f000 f813 	bl	8000c00 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000bda:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <SSD1306_Init+0x374>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <SSD1306_Init+0x374>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <SSD1306_Init+0x374>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr
 8000bfc:	20000530 	.word	0x20000530

08000c00 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(I2C_HandleTypeDef hi2c) {
 8000c00:	b084      	sub	sp, #16
 8000c02:	b590      	push	{r4, r7, lr}
 8000c04:	b099      	sub	sp, #100	@ 0x64
 8000c06:	af16      	add	r7, sp, #88	@ 0x58
 8000c08:	f107 0418 	add.w	r4, r7, #24
 8000c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	e03d      	b.n	8000c92 <SSD1306_UpdateScreen+0x92>
		SSD1306_WRITECOMMAND(0xB0 + m, hi2c);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	3b50      	subs	r3, #80	@ 0x50
 8000c1a:	b2dc      	uxtb	r4, r3
 8000c1c:	4668      	mov	r0, sp
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	2250      	movs	r2, #80	@ 0x50
 8000c24:	4619      	mov	r1, r3
 8000c26:	f002 f861 	bl	8002cec <memcpy>
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4622      	mov	r2, r4
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2078      	movs	r0, #120	@ 0x78
 8000c32:	f000 f9ee 	bl	8001012 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00, hi2c);
 8000c36:	4668      	mov	r0, sp
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2250      	movs	r2, #80	@ 0x50
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f002 f854 	bl	8002cec <memcpy>
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2078      	movs	r0, #120	@ 0x78
 8000c4c:	f000 f9e1 	bl	8001012 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10, hi2c);
 8000c50:	4668      	mov	r0, sp
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2250      	movs	r2, #80	@ 0x50
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f002 f847 	bl	8002cec <memcpy>
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2210      	movs	r2, #16
 8000c62:	2100      	movs	r1, #0
 8000c64:	2078      	movs	r0, #120	@ 0x78
 8000c66:	f000 f9d4 	bl	8001012 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH, hi2c);
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	01db      	lsls	r3, r3, #7
 8000c6e:	4a11      	ldr	r2, [pc, #68]	@ (8000cb4 <SSD1306_UpdateScreen+0xb4>)
 8000c70:	189c      	adds	r4, r3, r2
 8000c72:	466b      	mov	r3, sp
 8000c74:	f107 0118 	add.w	r1, r7, #24
 8000c78:	2254      	movs	r2, #84	@ 0x54
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 f836 	bl	8002cec <memcpy>
 8000c80:	2380      	movs	r3, #128	@ 0x80
 8000c82:	4622      	mov	r2, r4
 8000c84:	2140      	movs	r1, #64	@ 0x40
 8000c86:	2078      	movs	r0, #120	@ 0x78
 8000c88:	f000 f95e 	bl	8000f48 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	d9be      	bls.n	8000c16 <SSD1306_UpdateScreen+0x16>

	}
	memset(&SSD1306_Buffer, 0, sizeof(SSD1306_Buffer));
 8000c98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <SSD1306_UpdateScreen+0xb4>)
 8000ca0:	f001 fff0 	bl	8002c84 <memset>
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000cae:	b004      	add	sp, #16
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000130 	.word	0x20000130

08000cb8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <SSD1306_Fill+0x14>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e000      	b.n	8000cce <SSD1306_Fill+0x16>
 8000ccc:	23ff      	movs	r3, #255	@ 0xff
 8000cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <SSD1306_Fill+0x2c>)
 8000cd6:	f001 ffd5 	bl	8002c84 <memset>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000130 	.word	0x20000130

08000ce8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	80bb      	strh	r3, [r7, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	70fb      	strb	r3, [r7, #3]
	if (
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cfe:	d848      	bhi.n	8000d92 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d00:	88bb      	ldrh	r3, [r7, #4]
 8000d02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d04:	d845      	bhi.n	8000d92 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <SSD1306_DrawPixel+0xb8>)
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf0c      	ite	eq
 8000d14:	2301      	moveq	r3, #1
 8000d16:	2300      	movne	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d11a      	bne.n	8000d58 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d22:	88fa      	ldrh	r2, [r7, #6]
 8000d24:	88bb      	ldrh	r3, [r7, #4]
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	01db      	lsls	r3, r3, #7
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <SSD1306_DrawPixel+0xbc>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	b25a      	sxtb	r2, r3
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b259      	sxtb	r1, r3
 8000d48:	88fa      	ldrh	r2, [r7, #6]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	01db      	lsls	r3, r3, #7
 8000d4e:	4413      	add	r3, r2
 8000d50:	b2c9      	uxtb	r1, r1
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <SSD1306_DrawPixel+0xbc>)
 8000d54:	54d1      	strb	r1, [r2, r3]
 8000d56:	e01d      	b.n	8000d94 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d58:	88fa      	ldrh	r2, [r7, #6]
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	08db      	lsrs	r3, r3, #3
 8000d5e:	b298      	uxth	r0, r3
 8000d60:	4603      	mov	r3, r0
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	4413      	add	r3, r2
 8000d66:	4a0f      	ldr	r2, [pc, #60]	@ (8000da4 <SSD1306_DrawPixel+0xbc>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	b25a      	sxtb	r2, r3
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	b25b      	sxtb	r3, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	b259      	sxtb	r1, r3
 8000d82:	88fa      	ldrh	r2, [r7, #6]
 8000d84:	4603      	mov	r3, r0
 8000d86:	01db      	lsls	r3, r3, #7
 8000d88:	4413      	add	r3, r2
 8000d8a:	b2c9      	uxtb	r1, r1
 8000d8c:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <SSD1306_DrawPixel+0xbc>)
 8000d8e:	54d1      	strb	r1, [r2, r3]
 8000d90:	e000      	b.n	8000d94 <SSD1306_DrawPixel+0xac>
		return;
 8000d92:	bf00      	nop
	}
}
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000530 	.word	0x20000530
 8000da4:	20000130 	.word	0x20000130

08000da8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	460a      	mov	r2, r1
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	4613      	mov	r3, r2
 8000db6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000db8:	4a05      	ldr	r2, [pc, #20]	@ (8000dd0 <SSD1306_GotoXY+0x28>)
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <SSD1306_GotoXY+0x28>)
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	8053      	strh	r3, [r2, #2]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	20000530 	.word	0x20000530

08000dd4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000de4:	4b39      	ldr	r3, [pc, #228]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
	if (
 8000df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df2:	dc07      	bgt.n	8000e04 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000df4:	4b35      	ldr	r3, [pc, #212]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000df6:	885b      	ldrh	r3, [r3, #2]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	785b      	ldrb	r3, [r3, #1]
 8000dfe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e00:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e02:	dd01      	ble.n	8000e08 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e05d      	b.n	8000ec4 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e04b      	b.n	8000ea6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	3b20      	subs	r3, #32
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	7849      	ldrb	r1, [r1, #1]
 8000e1a:	fb01 f303 	mul.w	r3, r1, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	440b      	add	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	e030      	b.n	8000e94 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d010      	beq.n	8000e64 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e42:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000e44:	881a      	ldrh	r2, [r3, #0]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b298      	uxth	r0, r3
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000e50:	885a      	ldrh	r2, [r3, #2]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	79ba      	ldrb	r2, [r7, #6]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff ff43 	bl	8000ce8 <SSD1306_DrawPixel>
 8000e62:	e014      	b.n	8000e8e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000e66:	881a      	ldrh	r2, [r3, #0]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b298      	uxth	r0, r3
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000e72:	885a      	ldrh	r2, [r3, #2]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b299      	uxth	r1, r3
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf0c      	ite	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	2300      	movne	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f7ff ff2d 	bl	8000ce8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	3301      	adds	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d3c8      	bcc.n	8000e32 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d3ad      	bcc.n	8000e0e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	7812      	ldrb	r2, [r2, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <SSD1306_Putc+0xf8>)
 8000ec0:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000530 	.word	0x20000530

08000ed0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	4613      	mov	r3, r2
 8000edc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ede:	e012      	b.n	8000f06 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	79fa      	ldrb	r2, [r7, #7]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff73 	bl	8000dd4 <SSD1306_Putc>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d002      	beq.n	8000f00 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	e008      	b.n	8000f12 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3301      	adds	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1e8      	bne.n	8000ee0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	781b      	ldrb	r3, [r3, #0]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <ssd1306_I2C_Init+0x28>)
 8000f24:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f26:	e002      	b.n	8000f2e <ssd1306_I2C_Init+0x12>
		p--;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f9      	bne.n	8000f28 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--
	//MX_I2C1_Init();
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0003d090 	.word	0x0003d090

08000f48 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count, I2C_HandleTypeDef hi2c) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b0c7      	sub	sp, #284	@ 0x11c
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000f56:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000f5a:	600a      	str	r2, [r1, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f62:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f66:	4622      	mov	r2, r4
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f6e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f72:	4602      	mov	r2, r0
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f7e:	460a      	mov	r2, r1
 8000f80:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f8e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000f92:	7812      	ldrb	r2, [r2, #0]
 8000f94:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000f9c:	e015      	b.n	8000fca <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8000f9e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fa2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fa6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	441a      	add	r2, r3
 8000fae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	7811      	ldrb	r1, [r2, #0]
 8000fb6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fba:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000fbe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++) {
 8000fc0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000fca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fd4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d8df      	bhi.n	8000f9e <ssd1306_I2C_WriteMulti+0x56>
}
HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8000fde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fe2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b299      	uxth	r1, r3
 8000fea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f107 020c 	add.w	r2, r7, #12
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	9000      	str	r0, [sp, #0]
 8001000:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001004:	f000 fda4 	bl	8001b50 <HAL_I2C_Master_Transmit>
}
 8001008:	bf00      	nop
 800100a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800100e:	46bd      	mov	sp, r7
 8001010:	bd90      	pop	{r4, r7, pc}

08001012 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data, I2C_HandleTypeDef hi2c) {
 8001012:	b082      	sub	sp, #8
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af02      	add	r7, sp, #8
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	460b      	mov	r3, r1
 8001022:	71bb      	strb	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800102c:	797b      	ldrb	r3, [r7, #5]
 800102e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	b299      	uxth	r1, r3
 8001034:	f107 020c 	add.w	r2, r7, #12
 8001038:	f107 001c 	add.w	r0, r7, #28
 800103c:	230a      	movs	r3, #10
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2302      	movs	r3, #2
 8001042:	f000 fd85 	bl	8001b50 <HAL_I2C_Master_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001050:	b002      	add	sp, #8
 8001052:	4770      	bx	lr

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	@ 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a32      	ldr	r2, [pc, #200]	@ (800118c <HAL_I2C_MspInit+0xe8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12c      	bne.n	8001120 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a30      	ldr	r2, [pc, #192]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e2:	23c0      	movs	r3, #192	@ 0xc0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4825      	ldr	r0, [pc, #148]	@ (8001194 <HAL_I2C_MspInit+0xf0>)
 80010fe:	f000 fa47 	bl	8001590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
 8001112:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800111e:	e031      	b.n	8001184 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <HAL_I2C_MspInit+0xf4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12c      	bne.n	8001184 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001146:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114c:	2312      	movs	r3, #18
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001158:	2304      	movs	r3, #4
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4619      	mov	r1, r3
 8001162:	480c      	ldr	r0, [pc, #48]	@ (8001194 <HAL_I2C_MspInit+0xf0>)
 8001164:	f000 fa14 	bl	8001590 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 8001172:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001176:	6413      	str	r3, [r2, #64]	@ 0x40
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_I2C_MspInit+0xec>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	bf00      	nop
 8001186:	3730      	adds	r7, #48	@ 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40005400 	.word	0x40005400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	40005800 	.word	0x40005800

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <NMI_Handler+0x4>

080011a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <MemManage_Handler+0x4>

080011b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 f8c7 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f001 fd32 	bl	8002c94 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	20000538 	.word	0x20000538
 8001264:	20000688 	.word	0x20000688

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	@ (80012cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
   adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	@ (80012d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f001 fcf1 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff f94f 	bl	8000560 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012d0:	08004ad8 	.word	0x08004ad8
  ldr r2, =_sbss
 80012d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012d8:	20000688 	.word	0x20000688

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f90d 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	200f      	movs	r0, #15
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fe9e 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f917 	bl	8001576 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f8ed 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	@ (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000010 	.word	0x20000010
 800137c:	20000018 	.word	0x20000018
 8001380:	20000014 	.word	0x20000014

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000018 	.word	0x20000018
 80013a8:	2000053c 	.word	0x2000053c

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	2000053c 	.word	0x2000053c

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	@ (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	@ 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	@ 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff47 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff5c 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff8e 	bl	800147c <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5d 	bl	8001428 <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffb0 	bl	80014e4 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	e16b      	b.n	8001884 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 815a 	bne.w	800187e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d005      	beq.n	80015e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d130      	bne.n	8001644 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0201 	and.w	r2, r3, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b03      	cmp	r3, #3
 800164e:	d017      	beq.n	8001680 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d123      	bne.n	80016d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80b4 	beq.w	800187e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b60      	ldr	r3, [pc, #384]	@ (800189c <HAL_GPIO_Init+0x30c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	4a5f      	ldr	r2, [pc, #380]	@ (800189c <HAL_GPIO_Init+0x30c>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001724:	6453      	str	r3, [r2, #68]	@ 0x44
 8001726:	4b5d      	ldr	r3, [pc, #372]	@ (800189c <HAL_GPIO_Init+0x30c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001732:	4a5b      	ldr	r2, [pc, #364]	@ (80018a0 <HAL_GPIO_Init+0x310>)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a52      	ldr	r2, [pc, #328]	@ (80018a4 <HAL_GPIO_Init+0x314>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x226>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a51      	ldr	r2, [pc, #324]	@ (80018a8 <HAL_GPIO_Init+0x318>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x222>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a50      	ldr	r2, [pc, #320]	@ (80018ac <HAL_GPIO_Init+0x31c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x21e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4f      	ldr	r2, [pc, #316]	@ (80018b0 <HAL_GPIO_Init+0x320>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x21a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4e      	ldr	r2, [pc, #312]	@ (80018b4 <HAL_GPIO_Init+0x324>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x216>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4d      	ldr	r2, [pc, #308]	@ (80018b8 <HAL_GPIO_Init+0x328>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x212>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <HAL_GPIO_Init+0x32c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x20e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4b      	ldr	r2, [pc, #300]	@ (80018c0 <HAL_GPIO_Init+0x330>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x20a>
 8001796:	2307      	movs	r3, #7
 8001798:	e00e      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 800179a:	2308      	movs	r3, #8
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x228>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c8:	4935      	ldr	r1, [pc, #212]	@ (80018a0 <HAL_GPIO_Init+0x310>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a32      	ldr	r2, [pc, #200]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b30      	ldr	r3, [pc, #192]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a27      	ldr	r2, [pc, #156]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182a:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184e:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001878:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <HAL_GPIO_Init+0x334>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae90 	bls.w	80015ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021c00 	.word	0x40021c00
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e12b      	b.n	8001b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fbd8 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2224      	movs	r2, #36	@ 0x24
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800191a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800192a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800192c:	f001 f976 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8001930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a81      	ldr	r2, [pc, #516]	@ (8001b3c <HAL_I2C_Init+0x274>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d807      	bhi.n	800194c <HAL_I2C_Init+0x84>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4a80      	ldr	r2, [pc, #512]	@ (8001b40 <HAL_I2C_Init+0x278>)
 8001940:	4293      	cmp	r3, r2
 8001942:	bf94      	ite	ls
 8001944:	2301      	movls	r3, #1
 8001946:	2300      	movhi	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e006      	b.n	800195a <HAL_I2C_Init+0x92>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b44 <HAL_I2C_Init+0x27c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	bf94      	ite	ls
 8001954:	2301      	movls	r3, #1
 8001956:	2300      	movhi	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0e7      	b.n	8001b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a78      	ldr	r2, [pc, #480]	@ (8001b48 <HAL_I2C_Init+0x280>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	430a      	orrs	r2, r1
 8001980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a6a      	ldr	r2, [pc, #424]	@ (8001b3c <HAL_I2C_Init+0x274>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d802      	bhi.n	800199c <HAL_I2C_Init+0xd4>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	3301      	adds	r3, #1
 800199a:	e009      	b.n	80019b0 <HAL_I2C_Init+0xe8>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	4a69      	ldr	r2, [pc, #420]	@ (8001b4c <HAL_I2C_Init+0x284>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	3301      	adds	r3, #1
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	495c      	ldr	r1, [pc, #368]	@ (8001b3c <HAL_I2C_Init+0x274>)
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d819      	bhi.n	8001a04 <HAL_I2C_Init+0x13c>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e59      	subs	r1, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fbb1 f3f3 	udiv	r3, r1, r3
 80019de:	1c59      	adds	r1, r3, #1
 80019e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019e4:	400b      	ands	r3, r1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00a      	beq.n	8001a00 <HAL_I2C_Init+0x138>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1e59      	subs	r1, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f8:	3301      	adds	r3, #1
 80019fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fe:	e051      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e04f      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d111      	bne.n	8001a30 <HAL_I2C_Init+0x168>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1e58      	subs	r0, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e012      	b.n	8001a56 <HAL_I2C_Init+0x18e>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	0099      	lsls	r1, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x196>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e022      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10e      	bne.n	8001a84 <HAL_I2C_Init+0x1bc>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1e58      	subs	r0, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6859      	ldr	r1, [r3, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	440b      	add	r3, r1
 8001a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a82:	e00f      	b.n	8001aa4 <HAL_I2C_Init+0x1dc>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6809      	ldr	r1, [r1, #0]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ad2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6911      	ldr	r1, [r2, #16]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68d2      	ldr	r2, [r2, #12]
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695a      	ldr	r2, [r3, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	000186a0 	.word	0x000186a0
 8001b40:	001e847f 	.word	0x001e847f
 8001b44:	003d08ff 	.word	0x003d08ff
 8001b48:	431bde83 	.word	0x431bde83
 8001b4c:	10624dd3 	.word	0x10624dd3

08001b50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	817b      	strh	r3, [r7, #10]
 8001b60:	4613      	mov	r3, r2
 8001b62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff fc22 	bl	80013ac <HAL_GetTick>
 8001b68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	f040 80e0 	bne.w	8001d38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2319      	movs	r3, #25
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4970      	ldr	r1, [pc, #448]	@ (8001d44 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 fa92 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e0d3      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_I2C_Master_Transmit+0x50>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e0cc      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d007      	beq.n	8001bc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0201 	orr.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2221      	movs	r2, #33	@ 0x21
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2210      	movs	r2, #16
 8001be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	893a      	ldrh	r2, [r7, #8]
 8001bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4a50      	ldr	r2, [pc, #320]	@ (8001d48 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c08:	8979      	ldrh	r1, [r7, #10]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	6a3a      	ldr	r2, [r7, #32]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f9ca 	bl	8001fa8 <I2C_MasterRequestWrite>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e08d      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c34:	e066      	b.n	8001d04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	6a39      	ldr	r1, [r7, #32]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 fb0c 	bl	8002258 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d107      	bne.n	8001c5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d11b      	bne.n	8001cd8 <HAL_I2C_Master_Transmit+0x188>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d017      	beq.n	8001cd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	6a39      	ldr	r1, [r7, #32]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fafc 	bl	80022da <I2C_WaitOnBTFFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00d      	beq.n	8001d04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e01a      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d194      	bne.n	8001c36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	00100002 	.word	0x00100002
 8001d48:	ffff0000 	.word	0xffff0000

08001d4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff fb26 	bl	80013ac <HAL_GetTick>
 8001d60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	f040 8111 	bne.w	8001f96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2319      	movs	r3, #25
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4988      	ldr	r1, [pc, #544]	@ (8001fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f994 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e104      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_IsDeviceReady+0x50>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0fd      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d007      	beq.n	8001dc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2224      	movs	r2, #36	@ 0x24
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a70      	ldr	r2, [pc, #448]	@ (8001fa4 <HAL_I2C_IsDeviceReady+0x258>)
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001df4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f952 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e1c:	d103      	bne.n	8001e26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e24:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e0b6      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e2a:	897b      	ldrh	r3, [r7, #10]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fab7 	bl	80013ac <HAL_GetTick>
 8001e3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	bf0c      	ite	eq
 8001e4e:	2301      	moveq	r3, #1
 8001e50:	2300      	movne	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e6e:	e025      	b.n	8001ebc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e70:	f7ff fa9c 	bl	80013ac <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d302      	bcc.n	8001e86 <HAL_I2C_IsDeviceReady+0x13a>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d103      	bne.n	8001e8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	22a0      	movs	r2, #160	@ 0xa0
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_I2C_IsDeviceReady+0x188>
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_I2C_IsDeviceReady+0x188>
 8001ece:	7dbb      	ldrb	r3, [r7, #22]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0cd      	beq.n	8001e70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d129      	bne.n	8001f3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2319      	movs	r3, #25
 8001f16:	2201      	movs	r2, #1
 8001f18:	4921      	ldr	r1, [pc, #132]	@ (8001fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f8c6 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e036      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e02c      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2319      	movs	r3, #25
 8001f5e:	2201      	movs	r2, #1
 8001f60:	490f      	ldr	r1, [pc, #60]	@ (8001fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f8a2 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e012      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f4ff af32 	bcc.w	8001de6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3720      	adds	r7, #32
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	00100002 	.word	0x00100002
 8001fa4:	ffff0000 	.word	0xffff0000

08001fa8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d006      	beq.n	8001fd2 <I2C_MasterRequestWrite+0x2a>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d003      	beq.n	8001fd2 <I2C_MasterRequestWrite+0x2a>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fd0:	d108      	bne.n	8001fe4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00b      	b.n	8001ffc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	2b12      	cmp	r3, #18
 8001fea:	d107      	bne.n	8001ffc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ffa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f84f 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002022:	d103      	bne.n	800202c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e035      	b.n	800209c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002038:	d108      	bne.n	800204c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002048:	611a      	str	r2, [r3, #16]
 800204a:	e01b      	b.n	8002084 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800204c:	897b      	ldrh	r3, [r7, #10]
 800204e:	11db      	asrs	r3, r3, #7
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f003 0306 	and.w	r3, r3, #6
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f063 030f 	orn	r3, r3, #15
 800205c:	b2da      	uxtb	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <I2C_MasterRequestWrite+0xfc>)
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f875 	bl	800215a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e010      	b.n	800209c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800207a:	897b      	ldrh	r3, [r7, #10]
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4907      	ldr	r1, [pc, #28]	@ (80020a8 <I2C_MasterRequestWrite+0x100>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f865 	bl	800215a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	00010008 	.word	0x00010008
 80020a8:	00010002 	.word	0x00010002

080020ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020bc:	e025      	b.n	800210a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d021      	beq.n	800210a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7ff f971 	bl	80013ac <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d116      	bne.n	800210a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f043 0220 	orr.w	r2, r3, #32
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e023      	b.n	8002152 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10d      	bne.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	e00c      	b.n	800214a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	429a      	cmp	r2, r3
 800214e:	d0b6      	beq.n	80020be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002168:	e051      	b.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002178:	d123      	bne.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002188:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002192:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	f043 0204 	orr.w	r2, r3, #4
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e046      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d021      	beq.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff f8ef 	bl	80013ac <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d116      	bne.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f043 0220 	orr.w	r2, r3, #32
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e020      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d10c      	bne.n	8002232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4013      	ands	r3, r2
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e00b      	b.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	43da      	mvns	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d18d      	bne.n	800216a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002264:	e02d      	b.n	80022c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f878 	bl	800235c <I2C_IsAcknowledgeFailed>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e02d      	b.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d021      	beq.n	80022c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7ff f895 	bl	80013ac <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d116      	bne.n	80022c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f043 0220 	orr.w	r2, r3, #32
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e007      	b.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022cc:	2b80      	cmp	r3, #128	@ 0x80
 80022ce:	d1ca      	bne.n	8002266 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e6:	e02d      	b.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f837 	bl	800235c <I2C_IsAcknowledgeFailed>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e02d      	b.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fe:	d021      	beq.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002300:	f7ff f854 	bl	80013ac <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d302      	bcc.n	8002316 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e007      	b.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b04      	cmp	r3, #4
 8002350:	d1ca      	bne.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002372:	d11b      	bne.n	80023ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800237c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f043 0204 	orr.w	r2, r3, #4
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e267      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023da:	4b88      	ldr	r3, [pc, #544]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d00c      	beq.n	8002400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e6:	4b85      	ldr	r3, [pc, #532]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d112      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f2:	4b82      	ldr	r3, [pc, #520]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023fe:	d10b      	bne.n	8002418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	4b7e      	ldr	r3, [pc, #504]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d05b      	beq.n	80024c4 <HAL_RCC_OscConfig+0x108>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d157      	bne.n	80024c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e242      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x74>
 8002422:	4b76      	ldr	r3, [pc, #472]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	e01d      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x98>
 800243a:	4b70      	ldr	r3, [pc, #448]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6f      	ldr	r2, [pc, #444]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b6d      	ldr	r3, [pc, #436]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6c      	ldr	r2, [pc, #432]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	e00b      	b.n	800246c <HAL_RCC_OscConfig+0xb0>
 8002454:	4b69      	ldr	r3, [pc, #420]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a68      	ldr	r2, [pc, #416]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 800245a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b66      	ldr	r3, [pc, #408]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a65      	ldr	r2, [pc, #404]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe ff9a 	bl	80013ac <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe ff96 	bl	80013ac <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	@ 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e207      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b5b      	ldr	r3, [pc, #364]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0xc0>
 800249a:	e014      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe ff86 	bl	80013ac <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe ff82 	bl	80013ac <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	@ 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e1f3      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	4b51      	ldr	r3, [pc, #324]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0xe8>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d063      	beq.n	800259a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d2:	4b4a      	ldr	r3, [pc, #296]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b47      	ldr	r3, [pc, #284]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d11c      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b44      	ldr	r3, [pc, #272]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d116      	bne.n	8002524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1c7      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4937      	ldr	r1, [pc, #220]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	e03a      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	4b34      	ldr	r3, [pc, #208]	@ (8002600 <HAL_RCC_OscConfig+0x244>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe ff3b 	bl	80013ac <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253a:	f7fe ff37 	bl	80013ac <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1a8      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4925      	ldr	r1, [pc, #148]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256e:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_RCC_OscConfig+0x244>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe ff1a 	bl	80013ac <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257c:	f7fe ff16 	bl	80013ac <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e187      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d036      	beq.n	8002614 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <HAL_RCC_OscConfig+0x248>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fefa 	bl	80013ac <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7fe fef6 	bl	80013ac <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e167      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_OscConfig+0x240>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x200>
 80025da:	e01b      	b.n	8002614 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_OscConfig+0x248>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fee3 	bl	80013ac <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	e00e      	b.n	8002608 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f7fe fedf 	bl	80013ac <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d907      	bls.n	8002608 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e150      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470000 	.word	0x42470000
 8002604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b88      	ldr	r3, [pc, #544]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ea      	bne.n	80025ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8097 	beq.w	8002750 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b81      	ldr	r3, [pc, #516]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b7d      	ldr	r3, [pc, #500]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	4a7c      	ldr	r2, [pc, #496]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
 8002642:	4b7a      	ldr	r3, [pc, #488]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b77      	ldr	r3, [pc, #476]	@ (8002830 <HAL_RCC_OscConfig+0x474>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b74      	ldr	r3, [pc, #464]	@ (8002830 <HAL_RCC_OscConfig+0x474>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a73      	ldr	r2, [pc, #460]	@ (8002830 <HAL_RCC_OscConfig+0x474>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fe9f 	bl	80013ac <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe fe9b 	bl	80013ac <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e10c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_RCC_OscConfig+0x474>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2ea>
 8002698:	4b64      	ldr	r3, [pc, #400]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a63      	ldr	r2, [pc, #396]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x30c>
 80026ae:	4b5f      	ldr	r3, [pc, #380]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	4a5e      	ldr	r2, [pc, #376]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ba:	4b5c      	ldr	r3, [pc, #368]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	4a5b      	ldr	r2, [pc, #364]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x324>
 80026c8:	4b58      	ldr	r3, [pc, #352]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a57      	ldr	r2, [pc, #348]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d4:	4b55      	ldr	r3, [pc, #340]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a54      	ldr	r2, [pc, #336]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fe60 	bl	80013ac <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fe5c 	bl	80013ac <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0cb      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	4b49      	ldr	r3, [pc, #292]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ee      	beq.n	80026f0 <HAL_RCC_OscConfig+0x334>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe fe4a 	bl	80013ac <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fe46 	bl	80013ac <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0b5      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002732:	4b3e      	ldr	r3, [pc, #248]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ee      	bne.n	800271c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b39      	ldr	r3, [pc, #228]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	4a38      	ldr	r2, [pc, #224]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a1 	beq.w	800289c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275a:	4b34      	ldr	r3, [pc, #208]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d05c      	beq.n	8002820 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d141      	bne.n	80027f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <HAL_RCC_OscConfig+0x478>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7fe fe1a 	bl	80013ac <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fe16 	bl	80013ac <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e087      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b27      	ldr	r3, [pc, #156]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	491b      	ldr	r1, [pc, #108]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <HAL_RCC_OscConfig+0x478>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7fe fdef 	bl	80013ac <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fdeb 	bl	80013ac <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e05c      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x416>
 80027f0:	e054      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fdd8 	bl	80013ac <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fdd4 	bl	80013ac <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e045      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b06      	ldr	r3, [pc, #24]	@ (800282c <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x444>
 800281e:	e03d      	b.n	800289c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e038      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000
 8002834:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x4ec>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d028      	beq.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d121      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d11a      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800286e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002870:	4293      	cmp	r3, r2
 8002872:	d111      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	3b01      	subs	r3, #1
 8002882:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0cc      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c0:	4b68      	ldr	r3, [pc, #416]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d90c      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b65      	ldr	r3, [pc, #404]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b63      	ldr	r3, [pc, #396]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0b8      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002900:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a58      	ldr	r2, [pc, #352]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800290a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002918:	4b53      	ldr	r3, [pc, #332]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a52      	ldr	r2, [pc, #328]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002924:	4b50      	ldr	r3, [pc, #320]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	494d      	ldr	r1, [pc, #308]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d044      	beq.n	80029cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d119      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e07f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002966:	2b03      	cmp	r3, #3
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e06f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e067      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b37      	ldr	r3, [pc, #220]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4934      	ldr	r1, [pc, #208]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800299c:	f7fe fd06 	bl	80013ac <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7fe fd02 	bl	80013ac <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e04f      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b25      	ldr	r3, [pc, #148]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d20c      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e032      	b.n	8002a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4916      	ldr	r1, [pc, #88]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1e:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a32:	f000 f821 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	490a      	ldr	r1, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	5ccb      	ldrb	r3, [r1, r3]
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a09      	ldr	r2, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fc66 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023c00 	.word	0x40023c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08004a7c 	.word	0x08004a7c
 8002a70:	20000010 	.word	0x20000010
 8002a74:	20000014 	.word	0x20000014

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a7c:	b090      	sub	sp, #64	@ 0x40
 8002a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a84:	2300      	movs	r3, #0
 8002a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a88:	2300      	movs	r3, #0
 8002a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a90:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	f200 80a1 	bhi.w	8002be4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x34>
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aaa:	e09b      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b53      	ldr	r3, [pc, #332]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002aae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ab0:	e09b      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab2:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ab6:	e098      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ac0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d028      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae4:	fb03 f201 	mul.w	r2, r3, r1
 8002ae8:	2300      	movs	r3, #0
 8002aea:	fb00 f303 	mul.w	r3, r0, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	4a43      	ldr	r2, [pc, #268]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af2:	fba0 1202 	umull	r1, r2, r0, r2
 8002af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002af8:	460a      	mov	r2, r1
 8002afa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002afe:	4413      	add	r3, r2
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b04:	2200      	movs	r2, #0
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	61fa      	str	r2, [r7, #28]
 8002b0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b12:	f7fd fbad 	bl	8000270 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1e:	e053      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b20:	4b35      	ldr	r3, [pc, #212]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	2200      	movs	r2, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	617a      	str	r2, [r7, #20]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b32:	f04f 0b00 	mov.w	fp, #0
 8002b36:	4652      	mov	r2, sl
 8002b38:	465b      	mov	r3, fp
 8002b3a:	f04f 0000 	mov.w	r0, #0
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b48:	0150      	lsls	r0, r2, #5
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b52:	eb63 090b 	sbc.w	r9, r3, fp
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b6a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b6e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	00eb      	lsls	r3, r5, #3
 8002b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b80:	00e2      	lsls	r2, r4, #3
 8002b82:	4614      	mov	r4, r2
 8002b84:	461d      	mov	r5, r3
 8002b86:	eb14 030a 	adds.w	r3, r4, sl
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	eb45 030b 	adc.w	r3, r5, fp
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	028b      	lsls	r3, r1, #10
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba8:	4621      	mov	r1, r4
 8002baa:	028a      	lsls	r2, r1, #10
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bbc:	f7fd fb58 	bl	8000270 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002bd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x184>)
 8002be6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3740      	adds	r7, #64	@ 0x40
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	017d7840 	.word	0x017d7840

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000010 	.word	0x20000010

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c20:	f7ff fff0 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0a9b      	lsrs	r3, r3, #10
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4903      	ldr	r1, [pc, #12]	@ (8002c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	08004a8c 	.word	0x08004a8c

08002c44 <siprintf>:
 8002c44:	b40e      	push	{r1, r2, r3}
 8002c46:	b500      	push	{lr}
 8002c48:	b09c      	sub	sp, #112	@ 0x70
 8002c4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8002c4c:	9002      	str	r0, [sp, #8]
 8002c4e:	9006      	str	r0, [sp, #24]
 8002c50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002c54:	4809      	ldr	r0, [pc, #36]	@ (8002c7c <siprintf+0x38>)
 8002c56:	9107      	str	r1, [sp, #28]
 8002c58:	9104      	str	r1, [sp, #16]
 8002c5a:	4909      	ldr	r1, [pc, #36]	@ (8002c80 <siprintf+0x3c>)
 8002c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c60:	9105      	str	r1, [sp, #20]
 8002c62:	6800      	ldr	r0, [r0, #0]
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	a902      	add	r1, sp, #8
 8002c68:	f000 f9a2 	bl	8002fb0 <_svfiprintf_r>
 8002c6c:	9b02      	ldr	r3, [sp, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	b01c      	add	sp, #112	@ 0x70
 8002c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c78:	b003      	add	sp, #12
 8002c7a:	4770      	bx	lr
 8002c7c:	2000001c 	.word	0x2000001c
 8002c80:	ffff0208 	.word	0xffff0208

08002c84 <memset>:
 8002c84:	4402      	add	r2, r0
 8002c86:	4603      	mov	r3, r0
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <memset+0xa>
 8002c8c:	4770      	bx	lr
 8002c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c92:	e7f9      	b.n	8002c88 <memset+0x4>

08002c94 <__errno>:
 8002c94:	4b01      	ldr	r3, [pc, #4]	@ (8002c9c <__errno+0x8>)
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	2000001c 	.word	0x2000001c

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8002cd8 <__libc_init_array+0x38>)
 8002ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8002cdc <__libc_init_array+0x3c>)
 8002ca6:	1b64      	subs	r4, r4, r5
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	2600      	movs	r6, #0
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ce0 <__libc_init_array+0x40>)
 8002cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ce4 <__libc_init_array+0x44>)
 8002cb4:	f000 fc66 	bl	8003584 <_init>
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08004ad0 	.word	0x08004ad0
 8002cdc:	08004ad0 	.word	0x08004ad0
 8002ce0:	08004ad0 	.word	0x08004ad0
 8002ce4:	08004ad4 	.word	0x08004ad4

08002ce8 <__retarget_lock_acquire_recursive>:
 8002ce8:	4770      	bx	lr

08002cea <__retarget_lock_release_recursive>:
 8002cea:	4770      	bx	lr

08002cec <memcpy>:
 8002cec:	440a      	add	r2, r1
 8002cee:	4291      	cmp	r1, r2
 8002cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cf4:	d100      	bne.n	8002cf8 <memcpy+0xc>
 8002cf6:	4770      	bx	lr
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d02:	4291      	cmp	r1, r2
 8002d04:	d1f9      	bne.n	8002cfa <memcpy+0xe>
 8002d06:	bd10      	pop	{r4, pc}

08002d08 <_free_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	2900      	cmp	r1, #0
 8002d0e:	d041      	beq.n	8002d94 <_free_r+0x8c>
 8002d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d14:	1f0c      	subs	r4, r1, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfb8      	it	lt
 8002d1a:	18e4      	addlt	r4, r4, r3
 8002d1c:	f000 f8e0 	bl	8002ee0 <__malloc_lock>
 8002d20:	4a1d      	ldr	r2, [pc, #116]	@ (8002d98 <_free_r+0x90>)
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	b933      	cbnz	r3, 8002d34 <_free_r+0x2c>
 8002d26:	6063      	str	r3, [r4, #4]
 8002d28:	6014      	str	r4, [r2, #0]
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d30:	f000 b8dc 	b.w	8002eec <__malloc_unlock>
 8002d34:	42a3      	cmp	r3, r4
 8002d36:	d908      	bls.n	8002d4a <_free_r+0x42>
 8002d38:	6820      	ldr	r0, [r4, #0]
 8002d3a:	1821      	adds	r1, r4, r0
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	bf01      	itttt	eq
 8002d40:	6819      	ldreq	r1, [r3, #0]
 8002d42:	685b      	ldreq	r3, [r3, #4]
 8002d44:	1809      	addeq	r1, r1, r0
 8002d46:	6021      	streq	r1, [r4, #0]
 8002d48:	e7ed      	b.n	8002d26 <_free_r+0x1e>
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	b10b      	cbz	r3, 8002d54 <_free_r+0x4c>
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	d9fa      	bls.n	8002d4a <_free_r+0x42>
 8002d54:	6811      	ldr	r1, [r2, #0]
 8002d56:	1850      	adds	r0, r2, r1
 8002d58:	42a0      	cmp	r0, r4
 8002d5a:	d10b      	bne.n	8002d74 <_free_r+0x6c>
 8002d5c:	6820      	ldr	r0, [r4, #0]
 8002d5e:	4401      	add	r1, r0
 8002d60:	1850      	adds	r0, r2, r1
 8002d62:	4283      	cmp	r3, r0
 8002d64:	6011      	str	r1, [r2, #0]
 8002d66:	d1e0      	bne.n	8002d2a <_free_r+0x22>
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	6053      	str	r3, [r2, #4]
 8002d6e:	4408      	add	r0, r1
 8002d70:	6010      	str	r0, [r2, #0]
 8002d72:	e7da      	b.n	8002d2a <_free_r+0x22>
 8002d74:	d902      	bls.n	8002d7c <_free_r+0x74>
 8002d76:	230c      	movs	r3, #12
 8002d78:	602b      	str	r3, [r5, #0]
 8002d7a:	e7d6      	b.n	8002d2a <_free_r+0x22>
 8002d7c:	6820      	ldr	r0, [r4, #0]
 8002d7e:	1821      	adds	r1, r4, r0
 8002d80:	428b      	cmp	r3, r1
 8002d82:	bf04      	itt	eq
 8002d84:	6819      	ldreq	r1, [r3, #0]
 8002d86:	685b      	ldreq	r3, [r3, #4]
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	bf04      	itt	eq
 8002d8c:	1809      	addeq	r1, r1, r0
 8002d8e:	6021      	streq	r1, [r4, #0]
 8002d90:	6054      	str	r4, [r2, #4]
 8002d92:	e7ca      	b.n	8002d2a <_free_r+0x22>
 8002d94:	bd38      	pop	{r3, r4, r5, pc}
 8002d96:	bf00      	nop
 8002d98:	20000684 	.word	0x20000684

08002d9c <sbrk_aligned>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8002ddc <sbrk_aligned+0x40>)
 8002da0:	460c      	mov	r4, r1
 8002da2:	6831      	ldr	r1, [r6, #0]
 8002da4:	4605      	mov	r5, r0
 8002da6:	b911      	cbnz	r1, 8002dae <sbrk_aligned+0x12>
 8002da8:	f000 fba6 	bl	80034f8 <_sbrk_r>
 8002dac:	6030      	str	r0, [r6, #0]
 8002dae:	4621      	mov	r1, r4
 8002db0:	4628      	mov	r0, r5
 8002db2:	f000 fba1 	bl	80034f8 <_sbrk_r>
 8002db6:	1c43      	adds	r3, r0, #1
 8002db8:	d103      	bne.n	8002dc2 <sbrk_aligned+0x26>
 8002dba:	f04f 34ff 	mov.w	r4, #4294967295
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
 8002dc2:	1cc4      	adds	r4, r0, #3
 8002dc4:	f024 0403 	bic.w	r4, r4, #3
 8002dc8:	42a0      	cmp	r0, r4
 8002dca:	d0f8      	beq.n	8002dbe <sbrk_aligned+0x22>
 8002dcc:	1a21      	subs	r1, r4, r0
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 fb92 	bl	80034f8 <_sbrk_r>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d1f2      	bne.n	8002dbe <sbrk_aligned+0x22>
 8002dd8:	e7ef      	b.n	8002dba <sbrk_aligned+0x1e>
 8002dda:	bf00      	nop
 8002ddc:	20000680 	.word	0x20000680

08002de0 <_malloc_r>:
 8002de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002de4:	1ccd      	adds	r5, r1, #3
 8002de6:	f025 0503 	bic.w	r5, r5, #3
 8002dea:	3508      	adds	r5, #8
 8002dec:	2d0c      	cmp	r5, #12
 8002dee:	bf38      	it	cc
 8002df0:	250c      	movcc	r5, #12
 8002df2:	2d00      	cmp	r5, #0
 8002df4:	4606      	mov	r6, r0
 8002df6:	db01      	blt.n	8002dfc <_malloc_r+0x1c>
 8002df8:	42a9      	cmp	r1, r5
 8002dfa:	d904      	bls.n	8002e06 <_malloc_r+0x26>
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	6033      	str	r3, [r6, #0]
 8002e00:	2000      	movs	r0, #0
 8002e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002edc <_malloc_r+0xfc>
 8002e0a:	f000 f869 	bl	8002ee0 <__malloc_lock>
 8002e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e12:	461c      	mov	r4, r3
 8002e14:	bb44      	cbnz	r4, 8002e68 <_malloc_r+0x88>
 8002e16:	4629      	mov	r1, r5
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f7ff ffbf 	bl	8002d9c <sbrk_aligned>
 8002e1e:	1c43      	adds	r3, r0, #1
 8002e20:	4604      	mov	r4, r0
 8002e22:	d158      	bne.n	8002ed6 <_malloc_r+0xf6>
 8002e24:	f8d8 4000 	ldr.w	r4, [r8]
 8002e28:	4627      	mov	r7, r4
 8002e2a:	2f00      	cmp	r7, #0
 8002e2c:	d143      	bne.n	8002eb6 <_malloc_r+0xd6>
 8002e2e:	2c00      	cmp	r4, #0
 8002e30:	d04b      	beq.n	8002eca <_malloc_r+0xea>
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	4639      	mov	r1, r7
 8002e36:	4630      	mov	r0, r6
 8002e38:	eb04 0903 	add.w	r9, r4, r3
 8002e3c:	f000 fb5c 	bl	80034f8 <_sbrk_r>
 8002e40:	4581      	cmp	r9, r0
 8002e42:	d142      	bne.n	8002eca <_malloc_r+0xea>
 8002e44:	6821      	ldr	r1, [r4, #0]
 8002e46:	1a6d      	subs	r5, r5, r1
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff ffa6 	bl	8002d9c <sbrk_aligned>
 8002e50:	3001      	adds	r0, #1
 8002e52:	d03a      	beq.n	8002eca <_malloc_r+0xea>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	442b      	add	r3, r5
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	bb62      	cbnz	r2, 8002ebc <_malloc_r+0xdc>
 8002e62:	f8c8 7000 	str.w	r7, [r8]
 8002e66:	e00f      	b.n	8002e88 <_malloc_r+0xa8>
 8002e68:	6822      	ldr	r2, [r4, #0]
 8002e6a:	1b52      	subs	r2, r2, r5
 8002e6c:	d420      	bmi.n	8002eb0 <_malloc_r+0xd0>
 8002e6e:	2a0b      	cmp	r2, #11
 8002e70:	d917      	bls.n	8002ea2 <_malloc_r+0xc2>
 8002e72:	1961      	adds	r1, r4, r5
 8002e74:	42a3      	cmp	r3, r4
 8002e76:	6025      	str	r5, [r4, #0]
 8002e78:	bf18      	it	ne
 8002e7a:	6059      	strne	r1, [r3, #4]
 8002e7c:	6863      	ldr	r3, [r4, #4]
 8002e7e:	bf08      	it	eq
 8002e80:	f8c8 1000 	streq.w	r1, [r8]
 8002e84:	5162      	str	r2, [r4, r5]
 8002e86:	604b      	str	r3, [r1, #4]
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f000 f82f 	bl	8002eec <__malloc_unlock>
 8002e8e:	f104 000b 	add.w	r0, r4, #11
 8002e92:	1d23      	adds	r3, r4, #4
 8002e94:	f020 0007 	bic.w	r0, r0, #7
 8002e98:	1ac2      	subs	r2, r0, r3
 8002e9a:	bf1c      	itt	ne
 8002e9c:	1a1b      	subne	r3, r3, r0
 8002e9e:	50a3      	strne	r3, [r4, r2]
 8002ea0:	e7af      	b.n	8002e02 <_malloc_r+0x22>
 8002ea2:	6862      	ldr	r2, [r4, #4]
 8002ea4:	42a3      	cmp	r3, r4
 8002ea6:	bf0c      	ite	eq
 8002ea8:	f8c8 2000 	streq.w	r2, [r8]
 8002eac:	605a      	strne	r2, [r3, #4]
 8002eae:	e7eb      	b.n	8002e88 <_malloc_r+0xa8>
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	6864      	ldr	r4, [r4, #4]
 8002eb4:	e7ae      	b.n	8002e14 <_malloc_r+0x34>
 8002eb6:	463c      	mov	r4, r7
 8002eb8:	687f      	ldr	r7, [r7, #4]
 8002eba:	e7b6      	b.n	8002e2a <_malloc_r+0x4a>
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	42a3      	cmp	r3, r4
 8002ec2:	d1fb      	bne.n	8002ebc <_malloc_r+0xdc>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6053      	str	r3, [r2, #4]
 8002ec8:	e7de      	b.n	8002e88 <_malloc_r+0xa8>
 8002eca:	230c      	movs	r3, #12
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f000 f80c 	bl	8002eec <__malloc_unlock>
 8002ed4:	e794      	b.n	8002e00 <_malloc_r+0x20>
 8002ed6:	6005      	str	r5, [r0, #0]
 8002ed8:	e7d6      	b.n	8002e88 <_malloc_r+0xa8>
 8002eda:	bf00      	nop
 8002edc:	20000684 	.word	0x20000684

08002ee0 <__malloc_lock>:
 8002ee0:	4801      	ldr	r0, [pc, #4]	@ (8002ee8 <__malloc_lock+0x8>)
 8002ee2:	f7ff bf01 	b.w	8002ce8 <__retarget_lock_acquire_recursive>
 8002ee6:	bf00      	nop
 8002ee8:	2000067c 	.word	0x2000067c

08002eec <__malloc_unlock>:
 8002eec:	4801      	ldr	r0, [pc, #4]	@ (8002ef4 <__malloc_unlock+0x8>)
 8002eee:	f7ff befc 	b.w	8002cea <__retarget_lock_release_recursive>
 8002ef2:	bf00      	nop
 8002ef4:	2000067c 	.word	0x2000067c

08002ef8 <__ssputs_r>:
 8002ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002efc:	688e      	ldr	r6, [r1, #8]
 8002efe:	461f      	mov	r7, r3
 8002f00:	42be      	cmp	r6, r7
 8002f02:	680b      	ldr	r3, [r1, #0]
 8002f04:	4682      	mov	sl, r0
 8002f06:	460c      	mov	r4, r1
 8002f08:	4690      	mov	r8, r2
 8002f0a:	d82d      	bhi.n	8002f68 <__ssputs_r+0x70>
 8002f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f14:	d026      	beq.n	8002f64 <__ssputs_r+0x6c>
 8002f16:	6965      	ldr	r5, [r4, #20]
 8002f18:	6909      	ldr	r1, [r1, #16]
 8002f1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f1e:	eba3 0901 	sub.w	r9, r3, r1
 8002f22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f26:	1c7b      	adds	r3, r7, #1
 8002f28:	444b      	add	r3, r9
 8002f2a:	106d      	asrs	r5, r5, #1
 8002f2c:	429d      	cmp	r5, r3
 8002f2e:	bf38      	it	cc
 8002f30:	461d      	movcc	r5, r3
 8002f32:	0553      	lsls	r3, r2, #21
 8002f34:	d527      	bpl.n	8002f86 <__ssputs_r+0x8e>
 8002f36:	4629      	mov	r1, r5
 8002f38:	f7ff ff52 	bl	8002de0 <_malloc_r>
 8002f3c:	4606      	mov	r6, r0
 8002f3e:	b360      	cbz	r0, 8002f9a <__ssputs_r+0xa2>
 8002f40:	6921      	ldr	r1, [r4, #16]
 8002f42:	464a      	mov	r2, r9
 8002f44:	f7ff fed2 	bl	8002cec <memcpy>
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f52:	81a3      	strh	r3, [r4, #12]
 8002f54:	6126      	str	r6, [r4, #16]
 8002f56:	6165      	str	r5, [r4, #20]
 8002f58:	444e      	add	r6, r9
 8002f5a:	eba5 0509 	sub.w	r5, r5, r9
 8002f5e:	6026      	str	r6, [r4, #0]
 8002f60:	60a5      	str	r5, [r4, #8]
 8002f62:	463e      	mov	r6, r7
 8002f64:	42be      	cmp	r6, r7
 8002f66:	d900      	bls.n	8002f6a <__ssputs_r+0x72>
 8002f68:	463e      	mov	r6, r7
 8002f6a:	6820      	ldr	r0, [r4, #0]
 8002f6c:	4632      	mov	r2, r6
 8002f6e:	4641      	mov	r1, r8
 8002f70:	f000 faa8 	bl	80034c4 <memmove>
 8002f74:	68a3      	ldr	r3, [r4, #8]
 8002f76:	1b9b      	subs	r3, r3, r6
 8002f78:	60a3      	str	r3, [r4, #8]
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	4433      	add	r3, r6
 8002f7e:	6023      	str	r3, [r4, #0]
 8002f80:	2000      	movs	r0, #0
 8002f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f86:	462a      	mov	r2, r5
 8002f88:	f000 fac6 	bl	8003518 <_realloc_r>
 8002f8c:	4606      	mov	r6, r0
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d1e0      	bne.n	8002f54 <__ssputs_r+0x5c>
 8002f92:	6921      	ldr	r1, [r4, #16]
 8002f94:	4650      	mov	r0, sl
 8002f96:	f7ff feb7 	bl	8002d08 <_free_r>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	f8ca 3000 	str.w	r3, [sl]
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	e7e9      	b.n	8002f82 <__ssputs_r+0x8a>
	...

08002fb0 <_svfiprintf_r>:
 8002fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb4:	4698      	mov	r8, r3
 8002fb6:	898b      	ldrh	r3, [r1, #12]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	b09d      	sub	sp, #116	@ 0x74
 8002fbc:	4607      	mov	r7, r0
 8002fbe:	460d      	mov	r5, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	d510      	bpl.n	8002fe6 <_svfiprintf_r+0x36>
 8002fc4:	690b      	ldr	r3, [r1, #16]
 8002fc6:	b973      	cbnz	r3, 8002fe6 <_svfiprintf_r+0x36>
 8002fc8:	2140      	movs	r1, #64	@ 0x40
 8002fca:	f7ff ff09 	bl	8002de0 <_malloc_r>
 8002fce:	6028      	str	r0, [r5, #0]
 8002fd0:	6128      	str	r0, [r5, #16]
 8002fd2:	b930      	cbnz	r0, 8002fe2 <_svfiprintf_r+0x32>
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	b01d      	add	sp, #116	@ 0x74
 8002fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe2:	2340      	movs	r3, #64	@ 0x40
 8002fe4:	616b      	str	r3, [r5, #20]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fea:	2320      	movs	r3, #32
 8002fec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff4:	2330      	movs	r3, #48	@ 0x30
 8002ff6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003194 <_svfiprintf_r+0x1e4>
 8002ffa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ffe:	f04f 0901 	mov.w	r9, #1
 8003002:	4623      	mov	r3, r4
 8003004:	469a      	mov	sl, r3
 8003006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800300a:	b10a      	cbz	r2, 8003010 <_svfiprintf_r+0x60>
 800300c:	2a25      	cmp	r2, #37	@ 0x25
 800300e:	d1f9      	bne.n	8003004 <_svfiprintf_r+0x54>
 8003010:	ebba 0b04 	subs.w	fp, sl, r4
 8003014:	d00b      	beq.n	800302e <_svfiprintf_r+0x7e>
 8003016:	465b      	mov	r3, fp
 8003018:	4622      	mov	r2, r4
 800301a:	4629      	mov	r1, r5
 800301c:	4638      	mov	r0, r7
 800301e:	f7ff ff6b 	bl	8002ef8 <__ssputs_r>
 8003022:	3001      	adds	r0, #1
 8003024:	f000 80a7 	beq.w	8003176 <_svfiprintf_r+0x1c6>
 8003028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800302a:	445a      	add	r2, fp
 800302c:	9209      	str	r2, [sp, #36]	@ 0x24
 800302e:	f89a 3000 	ldrb.w	r3, [sl]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 809f 	beq.w	8003176 <_svfiprintf_r+0x1c6>
 8003038:	2300      	movs	r3, #0
 800303a:	f04f 32ff 	mov.w	r2, #4294967295
 800303e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003042:	f10a 0a01 	add.w	sl, sl, #1
 8003046:	9304      	str	r3, [sp, #16]
 8003048:	9307      	str	r3, [sp, #28]
 800304a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800304e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003050:	4654      	mov	r4, sl
 8003052:	2205      	movs	r2, #5
 8003054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003058:	484e      	ldr	r0, [pc, #312]	@ (8003194 <_svfiprintf_r+0x1e4>)
 800305a:	f7fd f8b9 	bl	80001d0 <memchr>
 800305e:	9a04      	ldr	r2, [sp, #16]
 8003060:	b9d8      	cbnz	r0, 800309a <_svfiprintf_r+0xea>
 8003062:	06d0      	lsls	r0, r2, #27
 8003064:	bf44      	itt	mi
 8003066:	2320      	movmi	r3, #32
 8003068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800306c:	0711      	lsls	r1, r2, #28
 800306e:	bf44      	itt	mi
 8003070:	232b      	movmi	r3, #43	@ 0x2b
 8003072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003076:	f89a 3000 	ldrb.w	r3, [sl]
 800307a:	2b2a      	cmp	r3, #42	@ 0x2a
 800307c:	d015      	beq.n	80030aa <_svfiprintf_r+0xfa>
 800307e:	9a07      	ldr	r2, [sp, #28]
 8003080:	4654      	mov	r4, sl
 8003082:	2000      	movs	r0, #0
 8003084:	f04f 0c0a 	mov.w	ip, #10
 8003088:	4621      	mov	r1, r4
 800308a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800308e:	3b30      	subs	r3, #48	@ 0x30
 8003090:	2b09      	cmp	r3, #9
 8003092:	d94b      	bls.n	800312c <_svfiprintf_r+0x17c>
 8003094:	b1b0      	cbz	r0, 80030c4 <_svfiprintf_r+0x114>
 8003096:	9207      	str	r2, [sp, #28]
 8003098:	e014      	b.n	80030c4 <_svfiprintf_r+0x114>
 800309a:	eba0 0308 	sub.w	r3, r0, r8
 800309e:	fa09 f303 	lsl.w	r3, r9, r3
 80030a2:	4313      	orrs	r3, r2
 80030a4:	9304      	str	r3, [sp, #16]
 80030a6:	46a2      	mov	sl, r4
 80030a8:	e7d2      	b.n	8003050 <_svfiprintf_r+0xa0>
 80030aa:	9b03      	ldr	r3, [sp, #12]
 80030ac:	1d19      	adds	r1, r3, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	9103      	str	r1, [sp, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bfbb      	ittet	lt
 80030b6:	425b      	neglt	r3, r3
 80030b8:	f042 0202 	orrlt.w	r2, r2, #2
 80030bc:	9307      	strge	r3, [sp, #28]
 80030be:	9307      	strlt	r3, [sp, #28]
 80030c0:	bfb8      	it	lt
 80030c2:	9204      	strlt	r2, [sp, #16]
 80030c4:	7823      	ldrb	r3, [r4, #0]
 80030c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80030c8:	d10a      	bne.n	80030e0 <_svfiprintf_r+0x130>
 80030ca:	7863      	ldrb	r3, [r4, #1]
 80030cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80030ce:	d132      	bne.n	8003136 <_svfiprintf_r+0x186>
 80030d0:	9b03      	ldr	r3, [sp, #12]
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	9203      	str	r2, [sp, #12]
 80030d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030dc:	3402      	adds	r4, #2
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80031a4 <_svfiprintf_r+0x1f4>
 80030e4:	7821      	ldrb	r1, [r4, #0]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4650      	mov	r0, sl
 80030ea:	f7fd f871 	bl	80001d0 <memchr>
 80030ee:	b138      	cbz	r0, 8003100 <_svfiprintf_r+0x150>
 80030f0:	9b04      	ldr	r3, [sp, #16]
 80030f2:	eba0 000a 	sub.w	r0, r0, sl
 80030f6:	2240      	movs	r2, #64	@ 0x40
 80030f8:	4082      	lsls	r2, r0
 80030fa:	4313      	orrs	r3, r2
 80030fc:	3401      	adds	r4, #1
 80030fe:	9304      	str	r3, [sp, #16]
 8003100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003104:	4824      	ldr	r0, [pc, #144]	@ (8003198 <_svfiprintf_r+0x1e8>)
 8003106:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800310a:	2206      	movs	r2, #6
 800310c:	f7fd f860 	bl	80001d0 <memchr>
 8003110:	2800      	cmp	r0, #0
 8003112:	d036      	beq.n	8003182 <_svfiprintf_r+0x1d2>
 8003114:	4b21      	ldr	r3, [pc, #132]	@ (800319c <_svfiprintf_r+0x1ec>)
 8003116:	bb1b      	cbnz	r3, 8003160 <_svfiprintf_r+0x1b0>
 8003118:	9b03      	ldr	r3, [sp, #12]
 800311a:	3307      	adds	r3, #7
 800311c:	f023 0307 	bic.w	r3, r3, #7
 8003120:	3308      	adds	r3, #8
 8003122:	9303      	str	r3, [sp, #12]
 8003124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003126:	4433      	add	r3, r6
 8003128:	9309      	str	r3, [sp, #36]	@ 0x24
 800312a:	e76a      	b.n	8003002 <_svfiprintf_r+0x52>
 800312c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003130:	460c      	mov	r4, r1
 8003132:	2001      	movs	r0, #1
 8003134:	e7a8      	b.n	8003088 <_svfiprintf_r+0xd8>
 8003136:	2300      	movs	r3, #0
 8003138:	3401      	adds	r4, #1
 800313a:	9305      	str	r3, [sp, #20]
 800313c:	4619      	mov	r1, r3
 800313e:	f04f 0c0a 	mov.w	ip, #10
 8003142:	4620      	mov	r0, r4
 8003144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003148:	3a30      	subs	r2, #48	@ 0x30
 800314a:	2a09      	cmp	r2, #9
 800314c:	d903      	bls.n	8003156 <_svfiprintf_r+0x1a6>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0c6      	beq.n	80030e0 <_svfiprintf_r+0x130>
 8003152:	9105      	str	r1, [sp, #20]
 8003154:	e7c4      	b.n	80030e0 <_svfiprintf_r+0x130>
 8003156:	fb0c 2101 	mla	r1, ip, r1, r2
 800315a:	4604      	mov	r4, r0
 800315c:	2301      	movs	r3, #1
 800315e:	e7f0      	b.n	8003142 <_svfiprintf_r+0x192>
 8003160:	ab03      	add	r3, sp, #12
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	462a      	mov	r2, r5
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <_svfiprintf_r+0x1f0>)
 8003168:	a904      	add	r1, sp, #16
 800316a:	4638      	mov	r0, r7
 800316c:	f3af 8000 	nop.w
 8003170:	1c42      	adds	r2, r0, #1
 8003172:	4606      	mov	r6, r0
 8003174:	d1d6      	bne.n	8003124 <_svfiprintf_r+0x174>
 8003176:	89ab      	ldrh	r3, [r5, #12]
 8003178:	065b      	lsls	r3, r3, #25
 800317a:	f53f af2d 	bmi.w	8002fd8 <_svfiprintf_r+0x28>
 800317e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003180:	e72c      	b.n	8002fdc <_svfiprintf_r+0x2c>
 8003182:	ab03      	add	r3, sp, #12
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	462a      	mov	r2, r5
 8003188:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <_svfiprintf_r+0x1f0>)
 800318a:	a904      	add	r1, sp, #16
 800318c:	4638      	mov	r0, r7
 800318e:	f000 f879 	bl	8003284 <_printf_i>
 8003192:	e7ed      	b.n	8003170 <_svfiprintf_r+0x1c0>
 8003194:	08004a94 	.word	0x08004a94
 8003198:	08004a9e 	.word	0x08004a9e
 800319c:	00000000 	.word	0x00000000
 80031a0:	08002ef9 	.word	0x08002ef9
 80031a4:	08004a9a 	.word	0x08004a9a

080031a8 <_printf_common>:
 80031a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ac:	4616      	mov	r6, r2
 80031ae:	4698      	mov	r8, r3
 80031b0:	688a      	ldr	r2, [r1, #8]
 80031b2:	690b      	ldr	r3, [r1, #16]
 80031b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bfb8      	it	lt
 80031bc:	4613      	movlt	r3, r2
 80031be:	6033      	str	r3, [r6, #0]
 80031c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031c4:	4607      	mov	r7, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	b10a      	cbz	r2, 80031ce <_printf_common+0x26>
 80031ca:	3301      	adds	r3, #1
 80031cc:	6033      	str	r3, [r6, #0]
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	0699      	lsls	r1, r3, #26
 80031d2:	bf42      	ittt	mi
 80031d4:	6833      	ldrmi	r3, [r6, #0]
 80031d6:	3302      	addmi	r3, #2
 80031d8:	6033      	strmi	r3, [r6, #0]
 80031da:	6825      	ldr	r5, [r4, #0]
 80031dc:	f015 0506 	ands.w	r5, r5, #6
 80031e0:	d106      	bne.n	80031f0 <_printf_common+0x48>
 80031e2:	f104 0a19 	add.w	sl, r4, #25
 80031e6:	68e3      	ldr	r3, [r4, #12]
 80031e8:	6832      	ldr	r2, [r6, #0]
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	42ab      	cmp	r3, r5
 80031ee:	dc26      	bgt.n	800323e <_printf_common+0x96>
 80031f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	3b00      	subs	r3, #0
 80031f8:	bf18      	it	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	0692      	lsls	r2, r2, #26
 80031fe:	d42b      	bmi.n	8003258 <_printf_common+0xb0>
 8003200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003204:	4641      	mov	r1, r8
 8003206:	4638      	mov	r0, r7
 8003208:	47c8      	blx	r9
 800320a:	3001      	adds	r0, #1
 800320c:	d01e      	beq.n	800324c <_printf_common+0xa4>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	6922      	ldr	r2, [r4, #16]
 8003212:	f003 0306 	and.w	r3, r3, #6
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf02      	ittt	eq
 800321a:	68e5      	ldreq	r5, [r4, #12]
 800321c:	6833      	ldreq	r3, [r6, #0]
 800321e:	1aed      	subeq	r5, r5, r3
 8003220:	68a3      	ldr	r3, [r4, #8]
 8003222:	bf0c      	ite	eq
 8003224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003228:	2500      	movne	r5, #0
 800322a:	4293      	cmp	r3, r2
 800322c:	bfc4      	itt	gt
 800322e:	1a9b      	subgt	r3, r3, r2
 8003230:	18ed      	addgt	r5, r5, r3
 8003232:	2600      	movs	r6, #0
 8003234:	341a      	adds	r4, #26
 8003236:	42b5      	cmp	r5, r6
 8003238:	d11a      	bne.n	8003270 <_printf_common+0xc8>
 800323a:	2000      	movs	r0, #0
 800323c:	e008      	b.n	8003250 <_printf_common+0xa8>
 800323e:	2301      	movs	r3, #1
 8003240:	4652      	mov	r2, sl
 8003242:	4641      	mov	r1, r8
 8003244:	4638      	mov	r0, r7
 8003246:	47c8      	blx	r9
 8003248:	3001      	adds	r0, #1
 800324a:	d103      	bne.n	8003254 <_printf_common+0xac>
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003254:	3501      	adds	r5, #1
 8003256:	e7c6      	b.n	80031e6 <_printf_common+0x3e>
 8003258:	18e1      	adds	r1, r4, r3
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	2030      	movs	r0, #48	@ 0x30
 800325e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003262:	4422      	add	r2, r4
 8003264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800326c:	3302      	adds	r3, #2
 800326e:	e7c7      	b.n	8003200 <_printf_common+0x58>
 8003270:	2301      	movs	r3, #1
 8003272:	4622      	mov	r2, r4
 8003274:	4641      	mov	r1, r8
 8003276:	4638      	mov	r0, r7
 8003278:	47c8      	blx	r9
 800327a:	3001      	adds	r0, #1
 800327c:	d0e6      	beq.n	800324c <_printf_common+0xa4>
 800327e:	3601      	adds	r6, #1
 8003280:	e7d9      	b.n	8003236 <_printf_common+0x8e>
	...

08003284 <_printf_i>:
 8003284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	7e0f      	ldrb	r7, [r1, #24]
 800328a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800328c:	2f78      	cmp	r7, #120	@ 0x78
 800328e:	4691      	mov	r9, r2
 8003290:	4680      	mov	r8, r0
 8003292:	460c      	mov	r4, r1
 8003294:	469a      	mov	sl, r3
 8003296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800329a:	d807      	bhi.n	80032ac <_printf_i+0x28>
 800329c:	2f62      	cmp	r7, #98	@ 0x62
 800329e:	d80a      	bhi.n	80032b6 <_printf_i+0x32>
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	f000 80d2 	beq.w	800344a <_printf_i+0x1c6>
 80032a6:	2f58      	cmp	r7, #88	@ 0x58
 80032a8:	f000 80b9 	beq.w	800341e <_printf_i+0x19a>
 80032ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032b4:	e03a      	b.n	800332c <_printf_i+0xa8>
 80032b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032ba:	2b15      	cmp	r3, #21
 80032bc:	d8f6      	bhi.n	80032ac <_printf_i+0x28>
 80032be:	a101      	add	r1, pc, #4	@ (adr r1, 80032c4 <_printf_i+0x40>)
 80032c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032c4:	0800331d 	.word	0x0800331d
 80032c8:	08003331 	.word	0x08003331
 80032cc:	080032ad 	.word	0x080032ad
 80032d0:	080032ad 	.word	0x080032ad
 80032d4:	080032ad 	.word	0x080032ad
 80032d8:	080032ad 	.word	0x080032ad
 80032dc:	08003331 	.word	0x08003331
 80032e0:	080032ad 	.word	0x080032ad
 80032e4:	080032ad 	.word	0x080032ad
 80032e8:	080032ad 	.word	0x080032ad
 80032ec:	080032ad 	.word	0x080032ad
 80032f0:	08003431 	.word	0x08003431
 80032f4:	0800335b 	.word	0x0800335b
 80032f8:	080033eb 	.word	0x080033eb
 80032fc:	080032ad 	.word	0x080032ad
 8003300:	080032ad 	.word	0x080032ad
 8003304:	08003453 	.word	0x08003453
 8003308:	080032ad 	.word	0x080032ad
 800330c:	0800335b 	.word	0x0800335b
 8003310:	080032ad 	.word	0x080032ad
 8003314:	080032ad 	.word	0x080032ad
 8003318:	080033f3 	.word	0x080033f3
 800331c:	6833      	ldr	r3, [r6, #0]
 800331e:	1d1a      	adds	r2, r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6032      	str	r2, [r6, #0]
 8003324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800332c:	2301      	movs	r3, #1
 800332e:	e09d      	b.n	800346c <_printf_i+0x1e8>
 8003330:	6833      	ldr	r3, [r6, #0]
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	1d19      	adds	r1, r3, #4
 8003336:	6031      	str	r1, [r6, #0]
 8003338:	0606      	lsls	r6, r0, #24
 800333a:	d501      	bpl.n	8003340 <_printf_i+0xbc>
 800333c:	681d      	ldr	r5, [r3, #0]
 800333e:	e003      	b.n	8003348 <_printf_i+0xc4>
 8003340:	0645      	lsls	r5, r0, #25
 8003342:	d5fb      	bpl.n	800333c <_printf_i+0xb8>
 8003344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003348:	2d00      	cmp	r5, #0
 800334a:	da03      	bge.n	8003354 <_printf_i+0xd0>
 800334c:	232d      	movs	r3, #45	@ 0x2d
 800334e:	426d      	negs	r5, r5
 8003350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003354:	4859      	ldr	r0, [pc, #356]	@ (80034bc <_printf_i+0x238>)
 8003356:	230a      	movs	r3, #10
 8003358:	e011      	b.n	800337e <_printf_i+0xfa>
 800335a:	6821      	ldr	r1, [r4, #0]
 800335c:	6833      	ldr	r3, [r6, #0]
 800335e:	0608      	lsls	r0, r1, #24
 8003360:	f853 5b04 	ldr.w	r5, [r3], #4
 8003364:	d402      	bmi.n	800336c <_printf_i+0xe8>
 8003366:	0649      	lsls	r1, r1, #25
 8003368:	bf48      	it	mi
 800336a:	b2ad      	uxthmi	r5, r5
 800336c:	2f6f      	cmp	r7, #111	@ 0x6f
 800336e:	4853      	ldr	r0, [pc, #332]	@ (80034bc <_printf_i+0x238>)
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	bf14      	ite	ne
 8003374:	230a      	movne	r3, #10
 8003376:	2308      	moveq	r3, #8
 8003378:	2100      	movs	r1, #0
 800337a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800337e:	6866      	ldr	r6, [r4, #4]
 8003380:	60a6      	str	r6, [r4, #8]
 8003382:	2e00      	cmp	r6, #0
 8003384:	bfa2      	ittt	ge
 8003386:	6821      	ldrge	r1, [r4, #0]
 8003388:	f021 0104 	bicge.w	r1, r1, #4
 800338c:	6021      	strge	r1, [r4, #0]
 800338e:	b90d      	cbnz	r5, 8003394 <_printf_i+0x110>
 8003390:	2e00      	cmp	r6, #0
 8003392:	d04b      	beq.n	800342c <_printf_i+0x1a8>
 8003394:	4616      	mov	r6, r2
 8003396:	fbb5 f1f3 	udiv	r1, r5, r3
 800339a:	fb03 5711 	mls	r7, r3, r1, r5
 800339e:	5dc7      	ldrb	r7, [r0, r7]
 80033a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033a4:	462f      	mov	r7, r5
 80033a6:	42bb      	cmp	r3, r7
 80033a8:	460d      	mov	r5, r1
 80033aa:	d9f4      	bls.n	8003396 <_printf_i+0x112>
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d10b      	bne.n	80033c8 <_printf_i+0x144>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	07df      	lsls	r7, r3, #31
 80033b4:	d508      	bpl.n	80033c8 <_printf_i+0x144>
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	6861      	ldr	r1, [r4, #4]
 80033ba:	4299      	cmp	r1, r3
 80033bc:	bfde      	ittt	le
 80033be:	2330      	movle	r3, #48	@ 0x30
 80033c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033c8:	1b92      	subs	r2, r2, r6
 80033ca:	6122      	str	r2, [r4, #16]
 80033cc:	f8cd a000 	str.w	sl, [sp]
 80033d0:	464b      	mov	r3, r9
 80033d2:	aa03      	add	r2, sp, #12
 80033d4:	4621      	mov	r1, r4
 80033d6:	4640      	mov	r0, r8
 80033d8:	f7ff fee6 	bl	80031a8 <_printf_common>
 80033dc:	3001      	adds	r0, #1
 80033de:	d14a      	bne.n	8003476 <_printf_i+0x1f2>
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	b004      	add	sp, #16
 80033e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	f043 0320 	orr.w	r3, r3, #32
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	4833      	ldr	r0, [pc, #204]	@ (80034c0 <_printf_i+0x23c>)
 80033f4:	2778      	movs	r7, #120	@ 0x78
 80033f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	6831      	ldr	r1, [r6, #0]
 80033fe:	061f      	lsls	r7, r3, #24
 8003400:	f851 5b04 	ldr.w	r5, [r1], #4
 8003404:	d402      	bmi.n	800340c <_printf_i+0x188>
 8003406:	065f      	lsls	r7, r3, #25
 8003408:	bf48      	it	mi
 800340a:	b2ad      	uxthmi	r5, r5
 800340c:	6031      	str	r1, [r6, #0]
 800340e:	07d9      	lsls	r1, r3, #31
 8003410:	bf44      	itt	mi
 8003412:	f043 0320 	orrmi.w	r3, r3, #32
 8003416:	6023      	strmi	r3, [r4, #0]
 8003418:	b11d      	cbz	r5, 8003422 <_printf_i+0x19e>
 800341a:	2310      	movs	r3, #16
 800341c:	e7ac      	b.n	8003378 <_printf_i+0xf4>
 800341e:	4827      	ldr	r0, [pc, #156]	@ (80034bc <_printf_i+0x238>)
 8003420:	e7e9      	b.n	80033f6 <_printf_i+0x172>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	f023 0320 	bic.w	r3, r3, #32
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	e7f6      	b.n	800341a <_printf_i+0x196>
 800342c:	4616      	mov	r6, r2
 800342e:	e7bd      	b.n	80033ac <_printf_i+0x128>
 8003430:	6833      	ldr	r3, [r6, #0]
 8003432:	6825      	ldr	r5, [r4, #0]
 8003434:	6961      	ldr	r1, [r4, #20]
 8003436:	1d18      	adds	r0, r3, #4
 8003438:	6030      	str	r0, [r6, #0]
 800343a:	062e      	lsls	r6, r5, #24
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	d501      	bpl.n	8003444 <_printf_i+0x1c0>
 8003440:	6019      	str	r1, [r3, #0]
 8003442:	e002      	b.n	800344a <_printf_i+0x1c6>
 8003444:	0668      	lsls	r0, r5, #25
 8003446:	d5fb      	bpl.n	8003440 <_printf_i+0x1bc>
 8003448:	8019      	strh	r1, [r3, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	6123      	str	r3, [r4, #16]
 800344e:	4616      	mov	r6, r2
 8003450:	e7bc      	b.n	80033cc <_printf_i+0x148>
 8003452:	6833      	ldr	r3, [r6, #0]
 8003454:	1d1a      	adds	r2, r3, #4
 8003456:	6032      	str	r2, [r6, #0]
 8003458:	681e      	ldr	r6, [r3, #0]
 800345a:	6862      	ldr	r2, [r4, #4]
 800345c:	2100      	movs	r1, #0
 800345e:	4630      	mov	r0, r6
 8003460:	f7fc feb6 	bl	80001d0 <memchr>
 8003464:	b108      	cbz	r0, 800346a <_printf_i+0x1e6>
 8003466:	1b80      	subs	r0, r0, r6
 8003468:	6060      	str	r0, [r4, #4]
 800346a:	6863      	ldr	r3, [r4, #4]
 800346c:	6123      	str	r3, [r4, #16]
 800346e:	2300      	movs	r3, #0
 8003470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003474:	e7aa      	b.n	80033cc <_printf_i+0x148>
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	4632      	mov	r2, r6
 800347a:	4649      	mov	r1, r9
 800347c:	4640      	mov	r0, r8
 800347e:	47d0      	blx	sl
 8003480:	3001      	adds	r0, #1
 8003482:	d0ad      	beq.n	80033e0 <_printf_i+0x15c>
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	079b      	lsls	r3, r3, #30
 8003488:	d413      	bmi.n	80034b2 <_printf_i+0x22e>
 800348a:	68e0      	ldr	r0, [r4, #12]
 800348c:	9b03      	ldr	r3, [sp, #12]
 800348e:	4298      	cmp	r0, r3
 8003490:	bfb8      	it	lt
 8003492:	4618      	movlt	r0, r3
 8003494:	e7a6      	b.n	80033e4 <_printf_i+0x160>
 8003496:	2301      	movs	r3, #1
 8003498:	4632      	mov	r2, r6
 800349a:	4649      	mov	r1, r9
 800349c:	4640      	mov	r0, r8
 800349e:	47d0      	blx	sl
 80034a0:	3001      	adds	r0, #1
 80034a2:	d09d      	beq.n	80033e0 <_printf_i+0x15c>
 80034a4:	3501      	adds	r5, #1
 80034a6:	68e3      	ldr	r3, [r4, #12]
 80034a8:	9903      	ldr	r1, [sp, #12]
 80034aa:	1a5b      	subs	r3, r3, r1
 80034ac:	42ab      	cmp	r3, r5
 80034ae:	dcf2      	bgt.n	8003496 <_printf_i+0x212>
 80034b0:	e7eb      	b.n	800348a <_printf_i+0x206>
 80034b2:	2500      	movs	r5, #0
 80034b4:	f104 0619 	add.w	r6, r4, #25
 80034b8:	e7f5      	b.n	80034a6 <_printf_i+0x222>
 80034ba:	bf00      	nop
 80034bc:	08004aa5 	.word	0x08004aa5
 80034c0:	08004ab6 	.word	0x08004ab6

080034c4 <memmove>:
 80034c4:	4288      	cmp	r0, r1
 80034c6:	b510      	push	{r4, lr}
 80034c8:	eb01 0402 	add.w	r4, r1, r2
 80034cc:	d902      	bls.n	80034d4 <memmove+0x10>
 80034ce:	4284      	cmp	r4, r0
 80034d0:	4623      	mov	r3, r4
 80034d2:	d807      	bhi.n	80034e4 <memmove+0x20>
 80034d4:	1e43      	subs	r3, r0, #1
 80034d6:	42a1      	cmp	r1, r4
 80034d8:	d008      	beq.n	80034ec <memmove+0x28>
 80034da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034e2:	e7f8      	b.n	80034d6 <memmove+0x12>
 80034e4:	4402      	add	r2, r0
 80034e6:	4601      	mov	r1, r0
 80034e8:	428a      	cmp	r2, r1
 80034ea:	d100      	bne.n	80034ee <memmove+0x2a>
 80034ec:	bd10      	pop	{r4, pc}
 80034ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034f6:	e7f7      	b.n	80034e8 <memmove+0x24>

080034f8 <_sbrk_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	4d06      	ldr	r5, [pc, #24]	@ (8003514 <_sbrk_r+0x1c>)
 80034fc:	2300      	movs	r3, #0
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	602b      	str	r3, [r5, #0]
 8003504:	f7fd fe7a 	bl	80011fc <_sbrk>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d102      	bne.n	8003512 <_sbrk_r+0x1a>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	b103      	cbz	r3, 8003512 <_sbrk_r+0x1a>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	20000678 	.word	0x20000678

08003518 <_realloc_r>:
 8003518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800351c:	4680      	mov	r8, r0
 800351e:	4615      	mov	r5, r2
 8003520:	460c      	mov	r4, r1
 8003522:	b921      	cbnz	r1, 800352e <_realloc_r+0x16>
 8003524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003528:	4611      	mov	r1, r2
 800352a:	f7ff bc59 	b.w	8002de0 <_malloc_r>
 800352e:	b92a      	cbnz	r2, 800353c <_realloc_r+0x24>
 8003530:	f7ff fbea 	bl	8002d08 <_free_r>
 8003534:	2400      	movs	r4, #0
 8003536:	4620      	mov	r0, r4
 8003538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800353c:	f000 f81a 	bl	8003574 <_malloc_usable_size_r>
 8003540:	4285      	cmp	r5, r0
 8003542:	4606      	mov	r6, r0
 8003544:	d802      	bhi.n	800354c <_realloc_r+0x34>
 8003546:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800354a:	d8f4      	bhi.n	8003536 <_realloc_r+0x1e>
 800354c:	4629      	mov	r1, r5
 800354e:	4640      	mov	r0, r8
 8003550:	f7ff fc46 	bl	8002de0 <_malloc_r>
 8003554:	4607      	mov	r7, r0
 8003556:	2800      	cmp	r0, #0
 8003558:	d0ec      	beq.n	8003534 <_realloc_r+0x1c>
 800355a:	42b5      	cmp	r5, r6
 800355c:	462a      	mov	r2, r5
 800355e:	4621      	mov	r1, r4
 8003560:	bf28      	it	cs
 8003562:	4632      	movcs	r2, r6
 8003564:	f7ff fbc2 	bl	8002cec <memcpy>
 8003568:	4621      	mov	r1, r4
 800356a:	4640      	mov	r0, r8
 800356c:	f7ff fbcc 	bl	8002d08 <_free_r>
 8003570:	463c      	mov	r4, r7
 8003572:	e7e0      	b.n	8003536 <_realloc_r+0x1e>

08003574 <_malloc_usable_size_r>:
 8003574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003578:	1f18      	subs	r0, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	bfbc      	itt	lt
 800357e:	580b      	ldrlt	r3, [r1, r0]
 8003580:	18c0      	addlt	r0, r0, r3
 8003582:	4770      	bx	lr

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
