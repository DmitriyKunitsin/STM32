
GGK641_V_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005004  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d8  080051d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051d8  080051d8  000151d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e0  080051e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000000c  080051f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  080051f4  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001564b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002565  00000000  00000000  00035687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00037bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00038f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dd4  00000000  00000000  0003a178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001512d  00000000  00000000  0005ef4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e938a  00000000  00000000  00074079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  0015d454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005178 	.word	0x08005178

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005178 	.word	0x08005178

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <SSPI_Write>:
void SSPI_Write(uint8_t adress, uint8_t data);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SSPI_Write(uint8_t adress, uint8_t data) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
//	__disable_irq();
//	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	uint8_t data_buffer[2]; // Создаем буфер из двух байтов для хранения данных типа uint16_t

// Копируем данные типа uint16_t в буфер
	data_buffer[0] = adress; // Младший байт
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	733b      	strb	r3, [r7, #12]
	data_buffer[1] = data; // Старший байт
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2101      	movs	r1, #1
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <SSPI_Write+0x44>)
 80004ee:	f001 ffe7 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data_buffer, sizeof(data_buffer), 1000);
 80004f2:	f107 010c 	add.w	r1, r7, #12
 80004f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fa:	2202      	movs	r2, #2
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <SSPI_Write+0x48>)
 80004fe:	f003 fa94 	bl	8003a2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2101      	movs	r1, #1
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <SSPI_Write+0x44>)
 8000508:	f001 ffda 	bl	80024c0 <HAL_GPIO_WritePin>
//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
//	__enable_irq();
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	48000400 	.word	0x48000400
 8000518:	200000a0 	.word	0x200000a0

0800051c <setValuePD_OUT>:
void setValuePD_OUT(uint32_t *arr) {
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	// Возьмем результат и сохраним его в переменную
//	uint16_t u = (HAL_ADC_GetValue(&hadc1)) * 3300 / 4096;
//	uint16_t u = (hadc1.Instance->DR) * 3300 / 4096;
//	uint32_t te = hadc1.Instance->DR;

	uint8_t index = ((hadc1.Instance->DR) * 3300 / 4096) * 255 / 3300;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <setValuePD_OUT+0x54>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	0b1a      	lsrs	r2, r3, #12
 8000534:	4613      	mov	r3, r2
 8000536:	021b      	lsls	r3, r3, #8
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	089b      	lsrs	r3, r3, #2
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <setValuePD_OUT+0x58>)
 800053e:	fba2 2303 	umull	r2, r3, r2, r3
 8000542:	095b      	lsrs	r3, r3, #5
 8000544:	73fb      	strb	r3, [r7, #15]
	uint16_t checkCurrentIndex = arr[index];
 8000546:	7bfb      	ldrb	r3, [r7, #15]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	81bb      	strh	r3, [r7, #12]
	++checkCurrentIndex;
 8000552:	89bb      	ldrh	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	81bb      	strh	r3, [r7, #12]
	arr[index] = checkCurrentIndex;
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4413      	add	r3, r2
 8000560:	89ba      	ldrh	r2, [r7, #12]
 8000562:	601a      	str	r2, [r3, #0]
	// Остановим преобразования
//	ADC_Enable(&hadc1);
//	HAL_ADC_Stop(&hadc1);
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000028 	.word	0x20000028
 8000574:	09ee009f 	.word	0x09ee009f

08000578 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800057c:	f000 fc73 	bl	8000e66 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000580:	f000 f80d 	bl	800059e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_ADC1_Init();
 8000584:	f000 f85a 	bl	800063c <MX_ADC1_Init>
	MX_GPIO_Init();
 8000588:	f000 f9ce 	bl	8000928 <MX_GPIO_Init>
	MX_SPI1_Init();
 800058c:	f000 f8fe 	bl	800078c <MX_SPI1_Init>
	MX_DAC1_Init();
 8000590:	f000 f8b8 	bl	8000704 <MX_DAC1_Init>
	MX_USART2_UART_Init();
 8000594:	f000 f998 	bl	80008c8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000598:	f000 f93c 	bl	8000814 <MX_TIM2_Init>
//  uint8_t flag = 1;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800059c:	e7fe      	b.n	800059c <main+0x24>

0800059e <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800059e:	b580      	push	{r7, lr}
 80005a0:	b096      	sub	sp, #88	; 0x58
 80005a2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	2244      	movs	r2, #68	; 0x44
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fddb 	bl	8005168 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80005c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c4:	f001 ffc6 	bl	8002554 <HAL_PWREx_ControlVoltageScaling>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80005ce:	f000 fa0b 	bl	80009e8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005da:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e0:	2303      	movs	r3, #3
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80005e8:	230a      	movs	r3, #10
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 ffff 	bl	8002600 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x6e>
		Error_Handler();
 8000608:	f000 f9ee 	bl	80009e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000620:	463b      	mov	r3, r7
 8000622:	2104      	movs	r1, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fbff 	bl	8002e28 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x96>
		Error_Handler();
 8000630:	f000 f9da 	bl	80009e8 <Error_Handler>
	}
}
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000654:	4a29      	ldr	r2, [pc, #164]	; (80006fc <MX_ADC1_Init+0xc0>)
 8000656:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000658:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <MX_ADC1_Init+0xbc>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000664:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_ADC1_Init+0xbc>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000672:	2204      	movs	r2, #4
 8000674:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000678:	2200      	movs	r2, #0
 800067a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ADC1_Init+0xbc>)
 800067e:	2200      	movs	r2, #0
 8000680:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000684:	2201      	movs	r2, #1
 8000686:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ADC1_Init+0xbc>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_ADC1_Init+0xbc>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_ADC1_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0xbc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_ADC1_Init+0xbc>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <MX_ADC1_Init+0xbc>)
 80006b4:	f000 fdfc 	bl	80012b0 <HAL_ADC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x86>
		Error_Handler();
 80006be:	f000 f993 	bl	80009e8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_ADC1_Init+0xc4>)
 80006c4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c6:	2306      	movs	r3, #6
 80006c8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ce:	237f      	movs	r3, #127	; 0x7f
 80006d0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d2:	2304      	movs	r3, #4
 80006d4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0xbc>)
 80006e0:	f000 ff2e 	bl	8001540 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xb2>
		Error_Handler();
 80006ea:	f000 f97d 	bl	80009e8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000028 	.word	0x20000028
 80006fc:	50040000 	.word	0x50040000
 8000700:	21800100 	.word	0x21800100

08000704 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800070a:	463b      	mov	r3, r7
 800070c:	2224      	movs	r2, #36	; 0x24
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f004 fd29 	bl	8005168 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_DAC1_Init+0x80>)
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <MX_DAC1_Init+0x84>)
 800071a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 800071c:	4819      	ldr	r0, [pc, #100]	; (8000784 <MX_DAC1_Init+0x80>)
 800071e:	f001 fba6 	bl	8001e6e <HAL_DAC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_DAC1_Init+0x28>
		Error_Handler();
 8000728:	f000 f95e 	bl	80009e8 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	4619      	mov	r1, r3
 8000746:	480f      	ldr	r0, [pc, #60]	; (8000784 <MX_DAC1_Init+0x80>)
 8000748:	f001 fc25 	bl	8001f96 <HAL_DAC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_DAC1_Init+0x52>
		Error_Handler();
 8000752:	f000 f949 	bl	80009e8 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

//	 Установка значения для выходного напряжения 3.3V
	uint32_t dac_value = (uint32_t) (4095 * 2 / 3.3);
 8000756:	f640 13b1 	movw	r3, #2481	; 0x9b1
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	4808      	ldr	r0, [pc, #32]	; (8000784 <MX_DAC1_Init+0x80>)
 8000764:	f001 fbf2 	bl	8001f4c <HAL_DAC_SetValue>
	// Запуск преобразования ЦАП
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8000768:	2100      	movs	r1, #0
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_DAC1_Init+0x80>)
 800076c:	f001 fba1 	bl	8001eb2 <HAL_DAC_Start>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_DAC1_Init+0x76>
		Error_Handler();
 8000776:	f000 f937 	bl	80009e8 <Error_Handler>
	}
	/* USER CODE END DAC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000008c 	.word	0x2000008c
 8000788:	40007400 	.word	0x40007400

0800078c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_SPI1_Init+0x80>)
 8000792:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <MX_SPI1_Init+0x84>)
 8000794:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_SPI1_Init+0x80>)
 8000798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800079c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_SPI1_Init+0x80>)
 80007a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007a4:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_SPI1_Init+0x80>)
 80007a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ac:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_SPI1_Init+0x80>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_SPI1_Init+0x80>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x80>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_SPI1_Init+0x80>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x80>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x80>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x80>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x80>)
 80007da:	2207      	movs	r2, #7
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x80>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x80>)
 80007e6:	2208      	movs	r2, #8
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007ea:	4808      	ldr	r0, [pc, #32]	; (800080c <MX_SPI1_Init+0x80>)
 80007ec:	f003 f87a 	bl	80038e4 <HAL_SPI_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_SPI1_Init+0x6e>
		Error_Handler();
 80007f6:	f000 f8f7 	bl	80009e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
//	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	SSPI_Write(0x00, 0x20);
 80007fa:	2120      	movs	r1, #32
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fe67 	bl	80004d0 <SSPI_Write>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000802:	2006      	movs	r0, #6
 8000804:	f001 fb0b 	bl	8001e1e <HAL_NVIC_EnableIRQ>
	/* USER CODE END SPI1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000a0 	.word	0x200000a0
 8000810:	40013000 	.word	0x40013000

08000814 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000838:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 65535;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_TIM2_Init+0xb0>)
 800083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000840:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 12204;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_TIM2_Init+0xb0>)
 800084a:	f642 72ac 	movw	r2, #12204	; 0x2fac
 800084e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <MX_TIM2_Init+0xb0>)
 800085e:	f003 fbb7 	bl	8003fd0 <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x58>
		Error_Handler();
 8000868:	f000 f8be 	bl	80009e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4619      	mov	r1, r3
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <MX_TIM2_Init+0xb0>)
 800087a:	f003 fd74 	bl	8004366 <HAL_TIM_ConfigClockSource>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x74>
		Error_Handler();
 8000884:	f000 f8b0 	bl	80009e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <MX_TIM2_Init+0xb0>)
 8000896:	f003 ff5f 	bl	8004758 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80008a0:	f000 f8a2 	bl	80009e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <MX_TIM2_Init+0xb0>)
 80008a6:	f003 fbeb 	bl	8004080 <HAL_TIM_Base_Start_IT>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	201c      	movs	r0, #28
 80008b0:	f001 fa99 	bl	8001de6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008b4:	201c      	movs	r0, #28
 80008b6:	f001 fab2 	bl	8001e1e <HAL_NVIC_EnableIRQ>
	/* USER CODE END TIM2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000104 	.word	0x20000104

080008c8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART2_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x58>)
 800090c:	f003 ffa8 	bl	8004860 <HAL_HalfDuplex_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000916:	f000 f867 	bl	80009e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000150 	.word	0x20000150
 8000924:	40004400 	.word	0x40004400

08000928 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <MX_GPIO_Init+0xbc>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <MX_GPIO_Init+0xbc>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_GPIO_Init+0xbc>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_GPIO_Init+0xbc>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <MX_GPIO_Init+0xbc>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_GPIO_Init+0xbc>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_GPIO_Init+0xbc>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_GPIO_Init+0xbc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_GPIO_Init+0xbc>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, PD_RESET_Pin | GPIO_PIN_11, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6102 	mov.w	r1, #2080	; 0x820
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f001 fd96 	bl	80024c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : INP_TRHD_Pin */
	GPIO_InitStruct.Pin = INP_TRHD_Pin;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000998:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800099c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(INP_TRHD_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	4619      	mov	r1, r3
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f001 fc0e 	bl	80021cc <HAL_GPIO_Init>

	/*Configure GPIO pins : PD_RESET_Pin PA11 */
	GPIO_InitStruct.Pin = PD_RESET_Pin | GPIO_PIN_11;
 80009b0:	f44f 6302 	mov.w	r3, #2080	; 0x820
 80009b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f001 fbfe 	bl	80021cc <HAL_GPIO_Init>

	/* EXTI interrupt init*/

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2101      	movs	r1, #1
 80009d4:	2006      	movs	r0, #6
 80009d6:	f001 fa06 	bl	8001de6 <HAL_NVIC_SetPriority>
//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6613      	str	r3, [r2, #96]	; 0x60
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0a2      	sub	sp, #136	; 0x88
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2260      	movs	r2, #96	; 0x60
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 fb83 	bl	8005168 <memset>
  if(hadc->Instance==ADC1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <HAL_ADC_MspInit+0xa4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d134      	bne.n	8000ad6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a70:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000a72:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000a76:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fbf5 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a88:	f7ff ffae 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_ADC_MspInit+0xa8>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_ADC_MspInit+0xa8>)
 8000a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_ADC_MspInit+0xa8>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_ADC_MspInit+0xa8>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_ADC_MspInit+0xa8>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_ADC_MspInit+0xa8>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = PD_OUT_Pin;
 8000abc:	2308      	movs	r3, #8
 8000abe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(PD_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f001 fb7b 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3788      	adds	r7, #136	; 0x88
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	50040000 	.word	0x50040000
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <HAL_DAC_MspInit+0x74>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d124      	bne.n	8000b54 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_DAC_MspInit+0x78>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <HAL_DAC_MspInit+0x78>)
 8000b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_DAC_MspInit+0x78>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_DAC_MspInit+0x78>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <HAL_DAC_MspInit+0x78>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_DAC_MspInit+0x78>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_1_Pin;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f001 fb3c 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40007400 	.word	0x40007400
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <HAL_SPI_MspInit+0xb4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d144      	bne.n	8000c10 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a24      	ldr	r2, [pc, #144]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a1e      	ldr	r2, [pc, #120]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_SPI_MspInit+0xb8>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000bce:	2382      	movs	r3, #130	; 0x82
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bde:	2305      	movs	r3, #5
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f001 faee 	bl	80021cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c00:	2305      	movs	r3, #5
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_SPI_MspInit+0xbc>)
 8000c0c:	f001 fade 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40013000 	.word	0x40013000
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c34:	d113      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_TIM_Base_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <HAL_TIM_Base_MspInit+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6593      	str	r3, [r2, #88]	; 0x58
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_TIM_Base_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	201c      	movs	r0, #28
 8000c54:	f001 f8c7 	bl	8001de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c58:	201c      	movs	r0, #28
 8000c5a:	f001 f8e0 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0a2      	sub	sp, #136	; 0x88
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2260      	movs	r2, #96	; 0x60
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fa6b 	bl	8005168 <memset>
  if(huart->Instance==USART2)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <HAL_UART_MspInit+0xac>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d138      	bne.n	8000d0e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fadf 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb4:	f7ff fe98 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_UART_MspInit+0xb0>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbc:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0xb0>)
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0xb0>)
 8000cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_UART_MspInit+0xb0>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <HAL_UART_MspInit+0xb0>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_UART_MspInit+0xb0>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfa:	2307      	movs	r3, #7
 8000cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f001 fa5f 	bl	80021cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3788      	adds	r7, #136	; 0x88
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000d6c:	f000 f8d0 	bl	8000f10 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
//	uint16_t test_1 = setValuePD_OUT();
//	uint8_t val = ConvertFloatToInt(test_1);
//	upArrayIndex(WorkValue, val);
	/*______________*/
	/*Variant 3*/
	setValuePD_OUT(WorkValue);
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <EXTI0_IRQHandler+0x2c>)
 8000d7a:	f7ff fbcf 	bl	800051c <setValuePD_OUT>
	/*______________*/ // 17 us
	HAL_GPIO_WritePin(GPIOA, PD_RESET_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f001 fb9b 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PD_RESET_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f001 fb95 	bl	80024c0 <HAL_GPIO_WritePin>
//	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(INP_TRHD_Pin);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f001 fbaa 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200001d4 	.word	0x200001d4

08000da4 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000da8:	2006      	movs	r0, #6
 8000daa:	f001 f846 	bl	8001e3a <HAL_NVIC_DisableIRQ>
//	__disable_irq();
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f001 fb82 	bl	80024c0 <HAL_GPIO_WritePin>
//	push(WorkValue);
	memset(WorkValue, 0, sizeof(WorkValue));
 8000dbc:	f240 4204 	movw	r2, #1028	; 0x404
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <TIM2_IRQHandler+0x44>)
 8000dc4:	f004 f9d0 	bl	8005168 <memset>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f001 fb75 	bl	80024c0 <HAL_GPIO_WritePin>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dd6:	2006      	movs	r0, #6
 8000dd8:	f001 f821 	bl	8001e1e <HAL_NVIC_EnableIRQ>
//	__enable_irq();
	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <TIM2_IRQHandler+0x48>)
 8000dde:	f003 f9a3 	bl	8004128 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001d4 	.word	0x200001d4
 8000dec:	20000104 	.word	0x20000104

08000df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff ffea 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f004 f96d 	bl	8005120 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e46:	f7ff fb97 	bl	8000578 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e58:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e60:	200005dc 	.word	0x200005dc

08000e64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_IRQHandler>

08000e66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 ffad 	bl	8001dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e76:	200f      	movs	r0, #15
 8000e78:	f000 f80e 	bl	8000e98 <HAL_InitTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e88:	f7ff fdb4 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_InitTick+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 ffc7 	bl	8001e56 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 ff83 	bl	8001de6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e001      	b.n	8000ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200005d8 	.word	0x200005d8

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200005d8 	.word	0x200005d8

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3360      	adds	r3, #96	; 0x60
 8001012:	461a      	mov	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <LL_ADC_SetOffset+0x44>)
 8001022:	4013      	ands	r3, r2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	430a      	orrs	r2, r1
 800102e:	4313      	orrs	r3, r2
 8001030:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	03fff000 	.word	0x03fff000

08001048 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3360      	adds	r3, #96	; 0x60
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3360      	adds	r3, #96	; 0x60
 8001084:	461a      	mov	r2, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800109e:	bf00      	nop
 80010a0:	371c      	adds	r7, #28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b087      	sub	sp, #28
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3330      	adds	r3, #48	; 0x30
 80010ba:	461a      	mov	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	211f      	movs	r1, #31
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	401a      	ands	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	0e9b      	lsrs	r3, r3, #26
 80010e2:	f003 011f 	and.w	r1, r3, #31
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3314      	adds	r3, #20
 8001112:	461a      	mov	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	0e5b      	lsrs	r3, r3, #25
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	0d1b      	lsrs	r3, r3, #20
 800112a:	f003 031f 	and.w	r3, r3, #31
 800112e:	2107      	movs	r1, #7
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0d1b      	lsrs	r3, r3, #20
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0318 	and.w	r3, r3, #24
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <LL_ADC_SetChannelSingleDiff+0x44>)
 800117c:	40d9      	lsrs	r1, r3
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	400b      	ands	r3, r1
 8001182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	0007ffff 	.word	0x0007ffff

080011a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6093      	str	r3, [r2, #8]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011d8:	d101      	bne.n	80011de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001200:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001228:	d101      	bne.n	800122e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <LL_ADC_IsEnabled+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_ADC_IsEnabled+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b04      	cmp	r3, #4
 8001274:	d101      	bne.n	800127a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b08      	cmp	r3, #8
 800129a:	d101      	bne.n	80012a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e12c      	b.n	8001524 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fbaf 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff67 	bl	80011c4 <LL_ADC_IsDeepPowerDownEnabled>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff4d 	bl	80011a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff82 	bl	8001214 <LL_ADC_IsInternalRegulatorEnabled>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d115      	bne.n	8001342 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff66 	bl	80011ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001320:	4b82      	ldr	r3, [pc, #520]	; (800152c <HAL_ADC_Init+0x27c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	099b      	lsrs	r3, r3, #6
 8001326:	4a82      	ldr	r2, [pc, #520]	; (8001530 <HAL_ADC_Init+0x280>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	099b      	lsrs	r3, r3, #6
 800132e:	3301      	adds	r3, #1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001334:	e002      	b.n	800133c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3b01      	subs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff64 	bl	8001214 <LL_ADC_IsInternalRegulatorEnabled>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10d      	bne.n	800136e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff75 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001378:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 80c5 	bne.w	8001512 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 80c1 	bne.w	8001512 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff49 	bl	800123c <LL_ADC_IsEnabled>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10b      	bne.n	80013c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80013b0:	4860      	ldr	r0, [pc, #384]	; (8001534 <HAL_ADC_Init+0x284>)
 80013b2:	f7ff ff43 	bl	800123c <LL_ADC_IsEnabled>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4619      	mov	r1, r3
 80013c2:	485d      	ldr	r0, [pc, #372]	; (8001538 <HAL_ADC_Init+0x288>)
 80013c4:	f7ff fde8 	bl	8000f98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e5b      	ldrb	r3, [r3, #25]
 80013cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80013d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80013de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d106      	bne.n	8001404 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	3b01      	subs	r3, #1
 80013fc:	045b      	lsls	r3, r3, #17
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	4b45      	ldr	r3, [pc, #276]	; (800153c <HAL_ADC_Init+0x28c>)
 8001428:	4013      	ands	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	69b9      	ldr	r1, [r7, #24]
 8001430:	430b      	orrs	r3, r1
 8001432:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff12 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 800143e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff1f 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 800144a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d13d      	bne.n	80014ce <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d13a      	bne.n	80014ce <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800145c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001464:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001474:	f023 0302 	bic.w	r3, r3, #2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	69b9      	ldr	r1, [r7, #24]
 800147e:	430b      	orrs	r3, r1
 8001480:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001488:	2b01      	cmp	r3, #1
 800148a:	d118      	bne.n	80014be <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001496:	f023 0304 	bic.w	r3, r3, #4
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014a2:	4311      	orrs	r1, r2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014a8:	4311      	orrs	r1, r2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014ae:	430a      	orrs	r2, r1
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	e007      	b.n	80014ce <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d10c      	bne.n	80014f0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f023 010f 	bic.w	r1, r3, #15
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	631a      	str	r2, [r3, #48]	; 0x30
 80014ee:	e007      	b.n	8001500 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 020f 	bic.w	r2, r2, #15
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001504:	f023 0303 	bic.w	r3, r3, #3
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	655a      	str	r2, [r3, #84]	; 0x54
 8001510:	e007      	b.n	8001522 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001522:	7ffb      	ldrb	r3, [r7, #31]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	053e2d63 	.word	0x053e2d63
 8001534:	50040000 	.word	0x50040000
 8001538:	50040300 	.word	0x50040300
 800153c:	fff0c007 	.word	0xfff0c007

08001540 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0a6      	sub	sp, #152	; 0x98
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x22>
 800155e:	2302      	movs	r3, #2
 8001560:	e338      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x694>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fe77 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 831d 	bne.w	8001bb6 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d824      	bhi.n	80015ce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	3b02      	subs	r3, #2
 800158a:	2b03      	cmp	r3, #3
 800158c:	d81b      	bhi.n	80015c6 <HAL_ADC_ConfigChannel+0x86>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <HAL_ADC_ConfigChannel+0x54>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015bd 	.word	0x080015bd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	220c      	movs	r2, #12
 80015a8:	605a      	str	r2, [r3, #4]
          break;
 80015aa:	e011      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2212      	movs	r2, #18
 80015b0:	605a      	str	r2, [r3, #4]
          break;
 80015b2:	e00d      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2218      	movs	r2, #24
 80015b8:	605a      	str	r2, [r3, #4]
          break;
 80015ba:	e009      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c2:	605a      	str	r2, [r3, #4]
          break;
 80015c4:	e004      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2206      	movs	r2, #6
 80015ca:	605a      	str	r2, [r3, #4]
          break;
 80015cc:	e000      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80015ce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	f7ff fd64 	bl	80010aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fe3b 	bl	8001262 <LL_ADC_REG_IsConversionOngoing>
 80015ec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe47 	bl	8001288 <LL_ADC_INJ_IsConversionOngoing>
 80015fa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8148 	bne.w	8001898 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 8143 	bne.w	8001898 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	461a      	mov	r2, r3
 8001620:	f7ff fd6f 	bl	8001102 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	08db      	lsrs	r3, r3, #3
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d00a      	beq.n	800165c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001656:	f7ff fcd3 	bl	8001000 <LL_ADC_SetOffset>
 800165a:	e11d      	b.n	8001898 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fcf0 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10a      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x148>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fce5 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	0e9b      	lsrs	r3, r3, #26
 8001682:	f003 021f 	and.w	r2, r3, #31
 8001686:	e012      	b.n	80016ae <HAL_ADC_ConfigChannel+0x16e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fcda 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_ADC_ConfigChannel+0x186>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0e9b      	lsrs	r3, r3, #26
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	e00a      	b.n	80016dc <HAL_ADC_ConfigChannel+0x19c>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80016d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016dc:	429a      	cmp	r2, r3
 80016de:	d106      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fcc3 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fca7 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10a      	bne.n	800171a <HAL_ADC_ConfigChannel+0x1da>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc9c 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	0e9b      	lsrs	r3, r3, #26
 8001714:	f003 021f 	and.w	r2, r3, #31
 8001718:	e010      	b.n	800173c <HAL_ADC_ConfigChannel+0x1fc>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fc91 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x214>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0e9b      	lsrs	r3, r3, #26
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	e00a      	b.n	800176a <HAL_ADC_ConfigChannel+0x22a>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800176a:	429a      	cmp	r2, r3
 800176c:	d106      	bne.n	800177c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	2101      	movs	r1, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fc7c 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fc60 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10a      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x268>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2102      	movs	r1, #2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fc55 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	f003 021f 	and.w	r2, r3, #31
 80017a6:	e010      	b.n	80017ca <HAL_ADC_ConfigChannel+0x28a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2102      	movs	r1, #2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fc4a 	bl	8001048 <LL_ADC_GetOffsetChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80017c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x2a2>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	0e9b      	lsrs	r3, r3, #26
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	e00a      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x2b8>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80017f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d106      	bne.n	800180a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2200      	movs	r2, #0
 8001802:	2102      	movs	r1, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fc35 	bl	8001074 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2103      	movs	r1, #3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fc19 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10a      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x2f6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2103      	movs	r1, #3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fc0e 	bl	8001048 <LL_ADC_GetOffsetChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	0e9b      	lsrs	r3, r3, #26
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	e010      	b.n	8001858 <HAL_ADC_ConfigChannel+0x318>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2103      	movs	r1, #3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc03 	bl	8001048 <LL_ADC_GetOffsetChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800184e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x330>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0e9b      	lsrs	r3, r3, #26
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	e00a      	b.n	8001886 <HAL_ADC_ConfigChannel+0x346>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800187e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001886:	429a      	cmp	r2, r3
 8001888:	d106      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	2103      	movs	r1, #3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fbee 	bl	8001074 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fccd 	bl	800123c <LL_ADC_IsEnabled>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 810c 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f7ff fc4e 	bl	8001158 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4aa8      	ldr	r2, [pc, #672]	; (8001b64 <HAL_ADC_ConfigChannel+0x624>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	f040 80fd 	bne.w	8001ac2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10b      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x3b0>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	3301      	adds	r3, #1
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	bf94      	ite	ls
 80018e8:	2301      	movls	r3, #1
 80018ea:	2300      	movhi	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e012      	b.n	8001916 <HAL_ADC_ConfigChannel+0x3d6>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80018fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3301      	adds	r3, #1
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2b09      	cmp	r3, #9
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001916:	2b00      	cmp	r3, #0
 8001918:	d064      	beq.n	80019e4 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001922:	2b00      	cmp	r3, #0
 8001924:	d107      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x3f6>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	0e9b      	lsrs	r3, r3, #26
 800192c:	3301      	adds	r3, #1
 800192e:	069b      	lsls	r3, r3, #26
 8001930:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001934:	e00e      	b.n	8001954 <HAL_ADC_ConfigChannel+0x414>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	3301      	adds	r3, #1
 800194e:	069b      	lsls	r3, r3, #26
 8001950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195c:	2b00      	cmp	r3, #0
 800195e:	d109      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x434>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0e9b      	lsrs	r3, r3, #26
 8001966:	3301      	adds	r3, #1
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	e010      	b.n	8001996 <HAL_ADC_ConfigChannel+0x456>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	ea42 0103 	orr.w	r1, r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10a      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x47c>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	0e9b      	lsrs	r3, r3, #26
 80019ac:	3301      	adds	r3, #1
 80019ae:	f003 021f 	and.w	r2, r3, #31
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	051b      	lsls	r3, r3, #20
 80019ba:	e011      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x4a0>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e0:	430b      	orrs	r3, r1
 80019e2:	e069      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x4c0>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0e9b      	lsrs	r3, r3, #26
 80019f6:	3301      	adds	r3, #1
 80019f8:	069b      	lsls	r3, r3, #26
 80019fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019fe:	e00e      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x4de>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	069b      	lsls	r3, r3, #26
 8001a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x4fe>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0e9b      	lsrs	r3, r3, #26
 8001a30:	3301      	adds	r3, #1
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	e010      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x520>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa93 f3a3 	rbit	r3, r3
 8001a4a:	617b      	str	r3, [r7, #20]
  return result;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	ea42 0103 	orr.w	r1, r2, r3
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x54c>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0e9b      	lsrs	r3, r3, #26
 8001a76:	3301      	adds	r3, #1
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	3b1e      	subs	r3, #30
 8001a84:	051b      	lsls	r3, r3, #20
 8001a86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	e014      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x576>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	60fb      	str	r3, [r7, #12]
  return result;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	fab3 f383 	clz	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	3b1e      	subs	r3, #30
 8001ab0:	051b      	lsls	r3, r3, #20
 8001ab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	6892      	ldr	r2, [r2, #8]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff fb20 	bl	8001102 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <HAL_ADC_ConfigChannel+0x628>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d07c      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ace:	4827      	ldr	r0, [pc, #156]	; (8001b6c <HAL_ADC_ConfigChannel+0x62c>)
 8001ad0:	f7ff fa88 	bl	8000fe4 <LL_ADC_GetCommonPathInternalCh>
 8001ad4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a24      	ldr	r2, [pc, #144]	; (8001b70 <HAL_ADC_ConfigChannel+0x630>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d127      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x5f2>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d121      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x5f2>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <HAL_ADC_ConfigChannel+0x634>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d167      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001afc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b00:	4619      	mov	r1, r3
 8001b02:	481a      	ldr	r0, [pc, #104]	; (8001b6c <HAL_ADC_ConfigChannel+0x62c>)
 8001b04:	f7ff fa5b 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_ADC_ConfigChannel+0x638>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <HAL_ADC_ConfigChannel+0x63c>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b22:	e002      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x5ea>
          {
            wait_loop_index--;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f9      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x5e4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b30:	e04a      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_ADC_ConfigChannel+0x640>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d123      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x644>
 8001b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11d      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <HAL_ADC_ConfigChannel+0x634>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d13a      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <HAL_ADC_ConfigChannel+0x62c>)
 8001b5e:	f7ff fa2e 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b62:	e031      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
 8001b64:	407f0000 	.word	0x407f0000
 8001b68:	80080000 	.word	0x80080000
 8001b6c:	50040300 	.word	0x50040300
 8001b70:	c7520000 	.word	0xc7520000
 8001b74:	50040000 	.word	0x50040000
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	053e2d63 	.word	0x053e2d63
 8001b80:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_ADC_ConfigChannel+0x69c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d11c      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d116      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_ADC_ConfigChannel+0x6a0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d111      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <HAL_ADC_ConfigChannel+0x6a4>)
 8001bb0:	f7ff fa05 	bl	8000fbe <LL_ADC_SetCommonPathInternalCh>
 8001bb4:	e008      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f043 0220 	orr.w	r2, r3, #32
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3798      	adds	r7, #152	; 0x98
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	80000001 	.word	0x80000001
 8001be0:	50040000 	.word	0x50040000
 8001be4:	50040300 	.word	0x50040300

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db12      	blt.n	8001cc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	490a      	ldr	r1, [pc, #40]	; (8001ccc <__NVIC_DisableIRQ+0x44>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	3320      	adds	r3, #32
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb4:	f3bf 8f4f 	dsb	sy
}
 8001cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cba:	f3bf 8f6f 	isb	sy
}
 8001cbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	6039      	str	r1, [r7, #0]
 8001cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db0a      	blt.n	8001cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <__NVIC_SetPriority+0x4c>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf8:	e00a      	b.n	8001d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4908      	ldr	r1, [pc, #32]	; (8001d20 <__NVIC_SetPriority+0x50>)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	3b04      	subs	r3, #4
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	761a      	strb	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f1c3 0307 	rsb	r3, r3, #7
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	bf28      	it	cs
 8001d42:	2304      	movcs	r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d902      	bls.n	8001d54 <NVIC_EncodePriority+0x30>
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3b03      	subs	r3, #3
 8001d52:	e000      	b.n	8001d56 <NVIC_EncodePriority+0x32>
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43da      	mvns	r2, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	401a      	ands	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	4313      	orrs	r3, r2
         );
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d9c:	d301      	bcc.n	8001da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00f      	b.n	8001dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <SysTick_Config+0x40>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001daa:	210f      	movs	r1, #15
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295
 8001db0:	f7ff ff8e 	bl	8001cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <SysTick_Config+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <SysTick_Config+0x40>)
 8001dbc:	2207      	movs	r2, #7
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	e000e010 	.word	0xe000e010

08001dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff05 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff1a 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff8e 	bl	8001d24 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5d 	bl	8001cd0 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff0d 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff1d 	bl	8001c88 <__NVIC_DisableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff94 	bl	8001d8c <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e014      	b.n	8001eaa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	791b      	ldrb	r3, [r3, #4]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7fe fe29 	bl	8000ae8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	795b      	ldrb	r3, [r3, #5]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DAC_Start+0x16>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e03b      	b.n	8001f40 <HAL_DAC_Start+0x8e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d118      	bne.n	8001f32 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	e00f      	b.n	8001f32 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f20:	d107      	bne.n	8001f32 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0202 	orr.w	r2, r2, #2
 8001f30:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	3308      	adds	r3, #8
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	e004      	b.n	8001f80 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3314      	adds	r3, #20
 8001f7e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	461a      	mov	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b088      	sub	sp, #32
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	795b      	ldrb	r3, [r3, #5]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_DAC_ConfigChannel+0x1c>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e107      	b.n	80021c2 <HAL_DAC_ConfigChannel+0x22c>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d174      	bne.n	80020b0 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe ffb7 	bl	8000f38 <HAL_GetTick>
 8001fca:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d134      	bne.n	800203c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fd2:	e011      	b.n	8001ff8 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fd4:	f7fe ffb0 	bl	8000f38 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d90a      	bls.n	8001ff8 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f043 0208 	orr.w	r2, r3, #8
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0e4      	b.n	80021c2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e6      	bne.n	8001fd4 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002006:	2001      	movs	r0, #1
 8002008:	f7fe ffa2 	bl	8000f50 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	6992      	ldr	r2, [r2, #24]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
 8002016:	e01e      	b.n	8002056 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002018:	f7fe ff8e 	bl	8000f38 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d90a      	bls.n	800203c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f043 0208 	orr.w	r2, r3, #8
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2203      	movs	r2, #3
 8002036:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e0c2      	b.n	80021c2 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	dbe8      	blt.n	8002018 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002046:	2001      	movs	r0, #1
 8002048:	f7fe ff82 	bl	8000f50 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	6992      	ldr	r2, [r2, #24]
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	ea02 0103 	and.w	r1, r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	21ff      	movs	r1, #255	; 0xff
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	ea02 0103 	and.w	r1, r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d11d      	bne.n	80020f4 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	221f      	movs	r2, #31
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2207      	movs	r2, #7
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	431a      	orrs	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4313      	orrs	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43da      	mvns	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	400a      	ands	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	f640 72fc 	movw	r2, #4092	; 0xffc
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	22c0      	movs	r2, #192	; 0xc0
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	400a      	ands	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021da:	e154      	b.n	8002486 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8146 	beq.w	8002480 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x40>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d017      	beq.n	80022aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d123      	bne.n	80022fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	08da      	lsrs	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3208      	adds	r2, #8
 80022be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	6939      	ldr	r1, [r7, #16]
 80022fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a0 	beq.w	8002480 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <HAL_GPIO_Init+0x2d8>)
 8002342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002344:	4a57      	ldr	r2, [pc, #348]	; (80024a4 <HAL_GPIO_Init+0x2d8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6613      	str	r3, [r2, #96]	; 0x60
 800234c:	4b55      	ldr	r3, [pc, #340]	; (80024a4 <HAL_GPIO_Init+0x2d8>)
 800234e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002358:	4a53      	ldr	r2, [pc, #332]	; (80024a8 <HAL_GPIO_Init+0x2dc>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	220f      	movs	r2, #15
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002382:	d019      	beq.n	80023b8 <HAL_GPIO_Init+0x1ec>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a49      	ldr	r2, [pc, #292]	; (80024ac <HAL_GPIO_Init+0x2e0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_GPIO_Init+0x1e8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a48      	ldr	r2, [pc, #288]	; (80024b0 <HAL_GPIO_Init+0x2e4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00d      	beq.n	80023b0 <HAL_GPIO_Init+0x1e4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a47      	ldr	r2, [pc, #284]	; (80024b4 <HAL_GPIO_Init+0x2e8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_Init+0x1e0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <HAL_GPIO_Init+0x2ec>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d101      	bne.n	80023a8 <HAL_GPIO_Init+0x1dc>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e008      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023a8:	2307      	movs	r3, #7
 80023aa:	e006      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e004      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e002      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_GPIO_Init+0x1ee>
 80023b8:	2300      	movs	r3, #0
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	f002 0203 	and.w	r2, r2, #3
 80023c0:	0092      	lsls	r2, r2, #2
 80023c2:	4093      	lsls	r3, r2
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ca:	4937      	ldr	r1, [pc, #220]	; (80024a8 <HAL_GPIO_Init+0x2dc>)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023fc:	4a2f      	ldr	r2, [pc, #188]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002426:	4a25      	ldr	r2, [pc, #148]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002450:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_GPIO_Init+0x2f0>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f aea3 	bne.w	80021dc <HAL_GPIO_Init+0x10>
  }
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00
 80024b8:	48001000 	.word	0x48001000
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f806 	bl	8002520 <HAL_GPIO_EXTI_Callback>
  }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40010400 	.word	0x40010400

08002520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_PWREx_GetVoltageRange+0x18>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40007000 	.word	0x40007000

08002554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002562:	d130      	bne.n	80025c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002570:	d038      	beq.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002598:	e002      	b.n	80025a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3b01      	subs	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d102      	bne.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f2      	bne.n	800259a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c0:	d110      	bne.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e00f      	b.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d007      	beq.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40007000 	.word	0x40007000
 80025f8:	20000000 	.word	0x20000000
 80025fc:	431bde83 	.word	0x431bde83

08002600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f000 bc02 	b.w	8002e18 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002614:	4b96      	ldr	r3, [pc, #600]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261e:	4b94      	ldr	r3, [pc, #592]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80e4 	beq.w	80027fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_RCC_OscConfig+0x4c>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	f040 808b 	bne.w	800275a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b01      	cmp	r3, #1
 8002648:	f040 8087 	bne.w	800275a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264c:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_OscConfig+0x64>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e3d9      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_RCC_OscConfig+0x7e>
 8002674:	4b7e      	ldr	r3, [pc, #504]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267c:	e005      	b.n	800268a <HAL_RCC_OscConfig+0x8a>
 800267e:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268a:	4293      	cmp	r3, r2
 800268c:	d223      	bcs.n	80026d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fd8a 	bl	80031ac <RCC_SetFlashLatencyFromMSIRange>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e3ba      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a2:	4b73      	ldr	r3, [pc, #460]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a72      	ldr	r2, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b70      	ldr	r3, [pc, #448]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	496d      	ldr	r1, [pc, #436]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	4968      	ldr	r1, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e025      	b.n	8002722 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d6:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026dc:	f043 0308 	orr.w	r3, r3, #8
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4960      	ldr	r1, [pc, #384]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f4:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	495b      	ldr	r1, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fd4a 	bl	80031ac <RCC_SetFlashLatencyFromMSIRange>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e37a      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002722:	f000 fc81 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b51      	ldr	r3, [pc, #324]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4950      	ldr	r1, [pc, #320]	; (8002874 <HAL_RCC_OscConfig+0x274>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_RCC_OscConfig+0x278>)
 8002740:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002742:	4b4e      	ldr	r3, [pc, #312]	; (800287c <HAL_RCC_OscConfig+0x27c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fba6 	bl	8000e98 <HAL_InitTick>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d052      	beq.n	80027fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	e35e      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d032      	beq.n	80027c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a42      	ldr	r2, [pc, #264]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800276e:	f7fe fbe3 	bl	8000f38 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002776:	f7fe fbdf 	bl	8000f38 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e347      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a35      	ldr	r2, [pc, #212]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b33      	ldr	r3, [pc, #204]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4930      	ldr	r1, [pc, #192]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	492b      	ldr	r1, [pc, #172]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
 80027c6:	e01a      	b.n	80027fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a28      	ldr	r2, [pc, #160]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fbb0 	bl	8000f38 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027dc:	f7fe fbac 	bl	8000f38 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e314      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x1dc>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d073      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b08      	cmp	r3, #8
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x21c>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d10e      	bne.n	8002834 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d063      	beq.n	80028f0 <HAL_RCC_OscConfig+0x2f0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d15f      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2f1      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x24c>
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e025      	b.n	8002898 <HAL_RCC_OscConfig+0x298>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002854:	d114      	bne.n	8002880 <HAL_RCC_OscConfig+0x280>
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a02      	ldr	r2, [pc, #8]	; (8002870 <HAL_RCC_OscConfig+0x270>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e013      	b.n	8002898 <HAL_RCC_OscConfig+0x298>
 8002870:	40021000 	.word	0x40021000
 8002874:	08005190 	.word	0x08005190
 8002878:	20000000 	.word	0x20000000
 800287c:	20000004 	.word	0x20000004
 8002880:	4ba0      	ldr	r3, [pc, #640]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a9f      	ldr	r2, [pc, #636]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b9d      	ldr	r3, [pc, #628]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a9c      	ldr	r2, [pc, #624]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fb4a 	bl	8000f38 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7fe fb46 	bl	8000f38 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e2ae      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ba:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2a8>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fb36 	bl	8000f38 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe fb32 	bl	8000f38 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e29a      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e2:	4b88      	ldr	r3, [pc, #544]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2d0>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d060      	beq.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x310>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d119      	bne.n	800293e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d116      	bne.n	800293e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002910:	4b7c      	ldr	r3, [pc, #496]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x328>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e277      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	4973      	ldr	r1, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293c:	e040      	b.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d023      	beq.n	800298e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002946:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe faf1 	bl	8000f38 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe faed 	bl	8000f38 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e255      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800296c:	4b65      	ldr	r3, [pc, #404]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b62      	ldr	r3, [pc, #392]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	495f      	ldr	r1, [pc, #380]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	e018      	b.n	80029c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5c      	ldr	r2, [pc, #368]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe facd 	bl	8000f38 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe fac9 	bl	8000f38 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e231      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d03c      	beq.n	8002a46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01c      	beq.n	8002a0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d4:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	4a4a      	ldr	r2, [pc, #296]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe faa8 	bl	8000f38 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe faa4 	bl	8000f38 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e20c      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fe:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ef      	beq.n	80029ec <HAL_RCC_OscConfig+0x3ec>
 8002a0c:	e01b      	b.n	8002a46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a14:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fa8b 	bl	8000f38 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a26:	f7fe fa87 	bl	8000f38 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1ef      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a38:	4b32      	ldr	r3, [pc, #200]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ef      	bne.n	8002a26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80a6 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a58:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	4a26      	ldr	r2, [pc, #152]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a70:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x508>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d118      	bne.n	8002abe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_RCC_OscConfig+0x508>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x508>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a98:	f7fe fa4e 	bl	8000f38 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe fa4a 	bl	8000f38 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1b2      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x508>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d108      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4d8>
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad6:	e029      	b.n	8002b2c <HAL_RCC_OscConfig+0x52c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d115      	bne.n	8002b0c <HAL_RCC_OscConfig+0x50c>
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <HAL_RCC_OscConfig+0x504>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b00:	e014      	b.n	8002b2c <HAL_RCC_OscConfig+0x52c>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	4b9a      	ldr	r3, [pc, #616]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a99      	ldr	r2, [pc, #612]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1c:	4b96      	ldr	r3, [pc, #600]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	4a95      	ldr	r2, [pc, #596]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d016      	beq.n	8002b62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fa00 	bl	8000f38 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f9fc 	bl	8000f38 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e162      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b52:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ed      	beq.n	8002b3c <HAL_RCC_OscConfig+0x53c>
 8002b60:	e015      	b.n	8002b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b62:	f7fe f9e9 	bl	8000f38 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe f9e5 	bl	8000f38 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e14b      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b80:	4b7d      	ldr	r3, [pc, #500]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ed      	bne.n	8002b6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7ffb      	ldrb	r3, [r7, #31]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b78      	ldr	r3, [pc, #480]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d03c      	beq.n	8002c26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01c      	beq.n	8002bee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bb4:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bba:	4a6f      	ldr	r2, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe f9b8 	bl	8000f38 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bcc:	f7fe f9b4 	bl	8000f38 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e11c      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bde:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ef      	beq.n	8002bcc <HAL_RCC_OscConfig+0x5cc>
 8002bec:	e01b      	b.n	8002c26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bee:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf4:	4a60      	ldr	r2, [pc, #384]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7fe f99b 	bl	8000f38 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c06:	f7fe f997 	bl	8000f38 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0ff      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c18:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1ef      	bne.n	8002c06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80f3 	beq.w	8002e16 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	f040 80c9 	bne.w	8002dcc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c3a:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0203 	and.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d12c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d123      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d113      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	085b      	lsrs	r3, r3, #1
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d109      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d06b      	beq.n	8002d80 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d062      	beq.n	8002d74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cae:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0ac      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2d      	ldr	r2, [pc, #180]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002cc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cca:	f7fe f935 	bl	8000f38 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe f931 	bl	8000f38 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e099      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_OscConfig+0x77c>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d0a:	0212      	lsls	r2, r2, #8
 8002d0c:	4311      	orrs	r1, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d12:	0852      	lsrs	r2, r2, #1
 8002d14:	3a01      	subs	r2, #1
 8002d16:	0552      	lsls	r2, r2, #21
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d1e:	0852      	lsrs	r2, r2, #1
 8002d20:	3a01      	subs	r2, #1
 8002d22:	0652      	lsls	r2, r2, #25
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d2a:	06d2      	lsls	r2, r2, #27
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	4912      	ldr	r1, [pc, #72]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d4c:	f7fe f8f4 	bl	8000f38 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe f8f0 	bl	8000f38 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e058      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <HAL_RCC_OscConfig+0x778>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d72:	e050      	b.n	8002e16 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e04f      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d144      	bne.n	8002e16 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002da2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da4:	f7fe f8c8 	bl	8000f38 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe f8c4 	bl	8000f38 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e02c      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dbe:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x7ac>
 8002dca:	e024      	b.n	8002e16 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d01f      	beq.n	8002e12 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe f8ab 	bl	8000f38 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe f8a7 	bl	8000f38 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	4905      	ldr	r1, [pc, #20]	; (8002e20 <HAL_RCC_OscConfig+0x820>)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x824>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
 8002e10:	e001      	b.n	8002e16 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	feeefffc 	.word	0xfeeefffc

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0e7      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b75      	ldr	r3, [pc, #468]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d910      	bls.n	8002e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b72      	ldr	r3, [pc, #456]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	4970      	ldr	r1, [pc, #448]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b6e      	ldr	r3, [pc, #440]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0cf      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b66      	ldr	r3, [pc, #408]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d908      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e88:	4b63      	ldr	r3, [pc, #396]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4960      	ldr	r1, [pc, #384]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d04c      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eae:	4b5a      	ldr	r3, [pc, #360]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d121      	bne.n	8002efe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0a6      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d115      	bne.n	8002efe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e09a      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ede:	4b4e      	ldr	r3, [pc, #312]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e08e      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eee:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e086      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b46      	ldr	r3, [pc, #280]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4943      	ldr	r1, [pc, #268]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe f812 	bl	8000f38 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7fe f80e 	bl	8000f38 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e06e      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d208      	bcs.n	8002f6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	492b      	ldr	r1, [pc, #172]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6e:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d210      	bcs.n	8002f9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 0207 	bic.w	r2, r3, #7
 8002f84:	4923      	ldr	r1, [pc, #140]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCC_ClockConfig+0x1ec>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e036      	b.n	800300c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4918      	ldr	r1, [pc, #96]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	4910      	ldr	r1, [pc, #64]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fdc:	f000 f824 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	490b      	ldr	r1, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x1f4>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002ffa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1fc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd ff49 	bl	8000e98 <HAL_InitTick>
 8003006:	4603      	mov	r3, r0
 8003008:	72fb      	strb	r3, [r7, #11]

  return status;
 800300a:	7afb      	ldrb	r3, [r7, #11]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40022000 	.word	0x40022000
 8003018:	40021000 	.word	0x40021000
 800301c:	08005190 	.word	0x08005190
 8003020:	20000000 	.word	0x20000000
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003036:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003040:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x34>
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d121      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d11e      	bne.n	800309a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800305c:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 800306a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10d      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCC_GetSysClockFreq+0x110>)
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	e004      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d134      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0xa6>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d003      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0xac>
 80030cc:	e005      	b.n	80030da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <HAL_RCC_GetSysClockFreq+0x110>)
 80030d0:	617b      	str	r3, [r7, #20]
      break;
 80030d2:	e005      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_RCC_GetSysClockFreq+0x110>)
 80030d6:	617b      	str	r3, [r7, #20]
      break;
 80030d8:	e002      	b.n	80030e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	617b      	str	r3, [r7, #20]
      break;
 80030de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	3301      	adds	r3, #1
 80030ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	fb03 f202 	mul.w	r2, r3, r2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	0e5b      	lsrs	r3, r3, #25
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	3301      	adds	r3, #1
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003120:	69bb      	ldr	r3, [r7, #24]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	080051a8 	.word	0x080051a8
 8003138:	00f42400 	.word	0x00f42400

0800313c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4904      	ldr	r1, [pc, #16]	; (800317c <HAL_RCC_GetPCLK1Freq+0x28>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	080051a0 	.word	0x080051a0

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003184:	f7ff ffda 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0adb      	lsrs	r3, r3, #11
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4904      	ldr	r1, [pc, #16]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	080051a0 	.word	0x080051a0

080031ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031c4:	f7ff f9b8 	bl	8002538 <HAL_PWREx_GetVoltageRange>
 80031c8:	6178      	str	r0, [r7, #20]
 80031ca:	e014      	b.n	80031f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031cc:	4b25      	ldr	r3, [pc, #148]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d6:	6593      	str	r3, [r2, #88]	; 0x58
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031e4:	f7ff f9a8 	bl	8002538 <HAL_PWREx_GetVoltageRange>
 80031e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d10b      	bne.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b80      	cmp	r3, #128	; 0x80
 8003202:	d919      	bls.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2ba0      	cmp	r3, #160	; 0xa0
 8003208:	d902      	bls.n	8003210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800320a:	2302      	movs	r3, #2
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e013      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003210:	2301      	movs	r3, #1
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	e010      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d902      	bls.n	8003222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800321c:	2303      	movs	r3, #3
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	e00a      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b80      	cmp	r3, #128	; 0x80
 8003226:	d102      	bne.n	800322e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003228:	2302      	movs	r3, #2
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e004      	b.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b70      	cmp	r3, #112	; 0x70
 8003232:	d101      	bne.n	8003238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003234:	2301      	movs	r3, #1
 8003236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 0207 	bic.w	r2, r3, #7
 8003240:	4909      	ldr	r1, [pc, #36]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	429a      	cmp	r2, r3
 8003254:	d001      	beq.n	800325a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	40022000 	.word	0x40022000

0800326c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003274:	2300      	movs	r3, #0
 8003276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003278:	2300      	movs	r3, #0
 800327a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	2b00      	cmp	r3, #0
 8003286:	d031      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003290:	d01a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003292:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003296:	d814      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800329c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a0:	d10f      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032a2:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fa22 	bl	8003700 <RCCEx_PLLSAI1_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	74fb      	strb	r3, [r7, #19]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d0:	4b51      	ldr	r3, [pc, #324]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	494e      	ldr	r1, [pc, #312]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 809e 	beq.w	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032fe:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b40      	ldr	r3, [pc, #256]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	4a3f      	ldr	r2, [pc, #252]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6593      	str	r3, [r2, #88]	; 0x58
 8003320:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332c:	2301      	movs	r3, #1
 800332e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003330:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a39      	ldr	r2, [pc, #228]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800333c:	f7fd fdfc 	bl	8000f38 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003342:	e009      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fd fdf8 	bl	8000f38 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	74fb      	strb	r3, [r7, #19]
        break;
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003358:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d15a      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01e      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	429a      	cmp	r2, r3
 8003384:	d019      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003390:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003392:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033b2:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d016      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd fdb8 	bl	8000f38 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ca:	e00b      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fd fdb4 	bl	8000f38 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d902      	bls.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	74fb      	strb	r3, [r7, #19]
            break;
 80033e2:	e006      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ec      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	4904      	ldr	r1, [pc, #16]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800340e:	e009      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	74bb      	strb	r3, [r7, #18]
 8003414:	e006      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003424:	7c7b      	ldrb	r3, [r7, #17]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b8d      	ldr	r3, [pc, #564]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	4a8c      	ldr	r2, [pc, #560]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003442:	4b87      	ldr	r3, [pc, #540]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f023 0203 	bic.w	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4983      	ldr	r1, [pc, #524]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003464:	4b7e      	ldr	r3, [pc, #504]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f023 020c 	bic.w	r2, r3, #12
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	497b      	ldr	r1, [pc, #492]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003486:	4b76      	ldr	r3, [pc, #472]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	4972      	ldr	r1, [pc, #456]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a8:	4b6d      	ldr	r3, [pc, #436]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	496a      	ldr	r1, [pc, #424]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ca:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	4961      	ldr	r1, [pc, #388]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ec:	4b5c      	ldr	r3, [pc, #368]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4959      	ldr	r1, [pc, #356]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800350e:	4b54      	ldr	r3, [pc, #336]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4950      	ldr	r1, [pc, #320]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353e:	4948      	ldr	r1, [pc, #288]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003552:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	493f      	ldr	r1, [pc, #252]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d028      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003574:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	4937      	ldr	r1, [pc, #220]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003592:	d106      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a31      	ldr	r2, [pc, #196]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800359a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359e:	60d3      	str	r3, [r2, #12]
 80035a0:	e011      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f8a4 	bl	8003700 <RCCEx_PLLSAI1_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d028      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	491f      	ldr	r1, [pc, #124]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035f0:	d106      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80035f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035fc:	60d3      	str	r3, [r2, #12]
 80035fe:	e011      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f875 	bl	8003700 <RCCEx_PLLSAI1_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02b      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	4908      	ldr	r1, [pc, #32]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800364e:	d109      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a02      	ldr	r2, [pc, #8]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800365a:	60d3      	str	r3, [r2, #12]
 800365c:	e014      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366c:	d10c      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	2101      	movs	r1, #1
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f843 	bl	8003700 <RCCEx_PLLSAI1_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01c      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b2:	d10c      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	2102      	movs	r1, #2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f820 	bl	8003700 <RCCEx_PLLSAI1_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	4904      	ldr	r1, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000

08003700 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800370e:	4b74      	ldr	r3, [pc, #464]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800371a:	4b71      	ldr	r3, [pc, #452]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0203 	and.w	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d10d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
       ||
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003732:	4b6b      	ldr	r3, [pc, #428]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
       ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d047      	beq.n	80037d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
 800374a:	e044      	b.n	80037d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d018      	beq.n	8003786 <RCCEx_PLLSAI1_Config+0x86>
 8003754:	2b03      	cmp	r3, #3
 8003756:	d825      	bhi.n	80037a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003758:	2b01      	cmp	r3, #1
 800375a:	d002      	beq.n	8003762 <RCCEx_PLLSAI1_Config+0x62>
 800375c:	2b02      	cmp	r3, #2
 800375e:	d009      	beq.n	8003774 <RCCEx_PLLSAI1_Config+0x74>
 8003760:	e020      	b.n	80037a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003762:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11d      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003772:	e01a      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003774:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d116      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003784:	e013      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003786:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003792:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037a2:	e006      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e004      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037ba:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6819      	ldr	r1, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	430b      	orrs	r3, r1
 80037d0:	4943      	ldr	r1, [pc, #268]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d17c      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037dc:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a3f      	ldr	r2, [pc, #252]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e8:	f7fd fba6 	bl	8000f38 <HAL_GetTick>
 80037ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ee:	e009      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f0:	f7fd fba2 	bl	8000f38 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d902      	bls.n	8003804 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	73fb      	strb	r3, [r7, #15]
        break;
 8003802:	e005      	b.n	8003810 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003804:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ef      	bne.n	80037f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d15f      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d110      	bne.n	800383e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381c:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003824:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6892      	ldr	r2, [r2, #8]
 800382c:	0211      	lsls	r1, r2, #8
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68d2      	ldr	r2, [r2, #12]
 8003832:	06d2      	lsls	r2, r2, #27
 8003834:	430a      	orrs	r2, r1
 8003836:	492a      	ldr	r1, [pc, #168]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	610b      	str	r3, [r1, #16]
 800383c:	e027      	b.n	800388e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d112      	bne.n	800386a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003844:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800384c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	0211      	lsls	r1, r2, #8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6912      	ldr	r2, [r2, #16]
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0552      	lsls	r2, r2, #21
 8003860:	430a      	orrs	r2, r1
 8003862:	491f      	ldr	r1, [pc, #124]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
 8003868:	e011      	b.n	800388e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003872:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	0211      	lsls	r1, r2, #8
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6952      	ldr	r2, [r2, #20]
 8003880:	0852      	lsrs	r2, r2, #1
 8003882:	3a01      	subs	r2, #1
 8003884:	0652      	lsls	r2, r2, #25
 8003886:	430a      	orrs	r2, r1
 8003888:	4915      	ldr	r1, [pc, #84]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800388a:	4313      	orrs	r3, r2
 800388c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800388e:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003898:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fd fb4d 	bl	8000f38 <HAL_GetTick>
 800389e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038a0:	e009      	b.n	80038b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a2:	f7fd fb49 	bl	8000f38 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d902      	bls.n	80038b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	73fb      	strb	r3, [r7, #15]
          break;
 80038b4:	e005      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0ef      	beq.n	80038a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e095      	b.n	8003a22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003906:	d009      	beq.n	800391c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
 800390e:	e005      	b.n	800391c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd f914 	bl	8000b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003952:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800395c:	d902      	bls.n	8003964 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e002      	b.n	800396a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003968:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003972:	d007      	beq.n	8003984 <HAL_SPI_Init+0xa0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800397c:	d002      	beq.n	8003984 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	ea42 0103 	orr.w	r1, r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	f003 0204 	and.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a00:	ea42 0103 	orr.w	r1, r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b088      	sub	sp, #32
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_SPI_Transmit+0x22>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e158      	b.n	8003cfe <HAL_SPI_Transmit+0x2d4>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a54:	f7fd fa70 	bl	8000f38 <HAL_GetTick>
 8003a58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d002      	beq.n	8003a70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a6e:	e13d      	b.n	8003cec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0x52>
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a80:	e134      	b.n	8003cec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2203      	movs	r2, #3
 8003a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	88fa      	ldrh	r2, [r7, #6]
 8003a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	88fa      	ldrh	r2, [r7, #6]
 8003aa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003acc:	d10f      	bne.n	8003aee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003adc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b14:	d94b      	bls.n	8003bae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_Transmit+0xfa>
 8003b1e:	8afb      	ldrh	r3, [r7, #22]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d13e      	bne.n	8003ba2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	1c9a      	adds	r2, r3, #2
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b48:	e02b      	b.n	8003ba2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d112      	bne.n	8003b7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b7c:	e011      	b.n	8003ba2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7e:	f7fd f9db 	bl	8000f38 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d803      	bhi.n	8003b96 <HAL_SPI_Transmit+0x16c>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d102      	bne.n	8003b9c <HAL_SPI_Transmit+0x172>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ba0:	e0a4      	b.n	8003cec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ce      	bne.n	8003b4a <HAL_SPI_Transmit+0x120>
 8003bac:	e07c      	b.n	8003ca8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_SPI_Transmit+0x192>
 8003bb6:	8afb      	ldrh	r3, [r7, #22]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d170      	bne.n	8003c9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d912      	bls.n	8003bec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	881a      	ldrh	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	1c9a      	adds	r2, r3, #2
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b02      	subs	r3, #2
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bea:	e058      	b.n	8003c9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c12:	e044      	b.n	8003c9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d12b      	bne.n	8003c7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d912      	bls.n	8003c52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	1c9a      	adds	r2, r3, #2
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b02      	subs	r3, #2
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c50:	e025      	b.n	8003c9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c78:	e011      	b.n	8003c9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c7a:	f7fd f95d 	bl	8000f38 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d803      	bhi.n	8003c92 <HAL_SPI_Transmit+0x268>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d102      	bne.n	8003c98 <HAL_SPI_Transmit+0x26e>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c9c:	e026      	b.n	8003cec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1b5      	bne.n	8003c14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	6839      	ldr	r1, [r7, #0]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f949 	bl	8003f44 <SPI_EndRxTxTransaction>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e000      	b.n	8003cec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003cea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d18:	f7fd f90e 	bl	8000f38 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d28:	f7fd f906 	bl	8000f38 <HAL_GetTick>
 8003d2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d2e:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	015b      	lsls	r3, r3, #5
 8003d34:	0d1b      	lsrs	r3, r3, #20
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	fb02 f303 	mul.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d3e:	e054      	b.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d050      	beq.n	8003dea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d48:	f7fd f8f6 	bl	8000f38 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d902      	bls.n	8003d5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d13d      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d76:	d111      	bne.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d80:	d004      	beq.n	8003d8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8a:	d107      	bne.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da4:	d10f      	bne.n	8003dc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e017      	b.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4013      	ands	r3, r2
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d19b      	bne.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000000 	.word	0x20000000

08003e18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e2a:	f7fd f885 	bl	8000f38 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	4413      	add	r3, r2
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e3a:	f7fd f87d 	bl	8000f38 <HAL_GetTick>
 8003e3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e48:	4b3d      	ldr	r3, [pc, #244]	; (8003f40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	00da      	lsls	r2, r3, #3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	0d1b      	lsrs	r3, r3, #20
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e60:	e060      	b.n	8003f24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e68:	d107      	bne.n	8003e7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e80:	d050      	beq.n	8003f24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e82:	f7fd f859 	bl	8000f38 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d902      	bls.n	8003e98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d13d      	bne.n	8003f14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ea6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb0:	d111      	bne.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eba:	d004      	beq.n	8003ec6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d107      	bne.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ede:	d10f      	bne.n	8003f00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003efe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e010      	b.n	8003f36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d196      	bne.n	8003e62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3728      	adds	r7, #40	; 0x28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	20000000 	.word	0x20000000

08003f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff ff5b 	bl	8003e18 <SPI_WaitFifoStateUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	f043 0220 	orr.w	r2, r3, #32
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e027      	b.n	8003fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff fec0 	bl	8003d08 <SPI_WaitFlagStateUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e014      	b.n	8003fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff ff34 	bl	8003e18 <SPI_WaitFifoStateUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e000      	b.n	8003fc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e049      	b.n	8004076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fe14 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 faa4 	bl	800455c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e03b      	b.n	8004110 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <HAL_TIM_Base_Start_IT+0x9c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d009      	beq.n	80040ce <HAL_TIM_Base_Start_IT+0x4e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c2:	d004      	beq.n	80040ce <HAL_TIM_Base_Start_IT+0x4e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a15      	ldr	r2, [pc, #84]	; (8004120 <HAL_TIM_Base_Start_IT+0xa0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d115      	bne.n	80040fa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <HAL_TIM_Base_Start_IT+0xa4>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b06      	cmp	r3, #6
 80040de:	d015      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x8c>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d011      	beq.n	800410c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f8:	e008      	b.n	800410c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e000      	b.n	800410e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014000 	.word	0x40014000
 8004124:	00010007 	.word	0x00010007

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0202 	mvn.w	r2, #2
 8004154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9d8 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9ca 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f9db 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f9ae 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9a0 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f9b1 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0208 	mvn.w	r2, #8
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f984 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f976 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f987 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d122      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b10      	cmp	r3, #16
 8004246:	d11b      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0210 	mvn.w	r2, #16
 8004250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2208      	movs	r2, #8
 8004256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f95a 	bl	8004520 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f94c 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f95d 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0201 	mvn.w	r2, #1
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f926 	bl	80044f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 fab0 	bl	8004838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d10e      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 faa3 	bl	800484c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d10e      	bne.n	8004332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d107      	bne.n	8004332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800432a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f90b 	bl	8004548 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b20      	cmp	r3, #32
 800433e:	d10e      	bne.n	800435e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	d107      	bne.n	800435e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0220 	mvn.w	r2, #32
 8004356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fa63 	bl	8004824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_TIM_ConfigClockSource+0x1c>
 800437e:	2302      	movs	r3, #2
 8004380:	e0b6      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x18a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043be:	d03e      	beq.n	800443e <HAL_TIM_ConfigClockSource+0xd8>
 80043c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c4:	f200 8087 	bhi.w	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	f000 8086 	beq.w	80044dc <HAL_TIM_ConfigClockSource+0x176>
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d87f      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043d6:	2b70      	cmp	r3, #112	; 0x70
 80043d8:	d01a      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0xaa>
 80043da:	2b70      	cmp	r3, #112	; 0x70
 80043dc:	d87b      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043de:	2b60      	cmp	r3, #96	; 0x60
 80043e0:	d050      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0x11e>
 80043e2:	2b60      	cmp	r3, #96	; 0x60
 80043e4:	d877      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043e6:	2b50      	cmp	r3, #80	; 0x50
 80043e8:	d03c      	beq.n	8004464 <HAL_TIM_ConfigClockSource+0xfe>
 80043ea:	2b50      	cmp	r3, #80	; 0x50
 80043ec:	d873      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d058      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0x13e>
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d86f      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043f6:	2b30      	cmp	r3, #48	; 0x30
 80043f8:	d064      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 80043fa:	2b30      	cmp	r3, #48	; 0x30
 80043fc:	d86b      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d060      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 8004402:	2b20      	cmp	r3, #32
 8004404:	d867      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d05c      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 800440a:	2b10      	cmp	r3, #16
 800440c:	d05a      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x15e>
 800440e:	e062      	b.n	80044d6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f000 f97a 	bl	8004718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004432:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e04f      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6899      	ldr	r1, [r3, #8]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f000 f963 	bl	8004718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004460:	609a      	str	r2, [r3, #8]
      break;
 8004462:	e03c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	461a      	mov	r2, r3
 8004472:	f000 f8d7 	bl	8004624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2150      	movs	r1, #80	; 0x50
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f930 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 8004482:	e02c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	461a      	mov	r2, r3
 8004492:	f000 f8f6 	bl	8004682 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2160      	movs	r1, #96	; 0x60
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f920 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 80044a2:	e01c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f000 f8b7 	bl	8004624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2140      	movs	r1, #64	; 0x40
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f910 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 80044c2:	e00c      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4619      	mov	r1, r3
 80044ce:	4610      	mov	r0, r2
 80044d0:	f000 f907 	bl	80046e2 <TIM_ITRx_SetConfig>
      break;
 80044d4:	e003      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
      break;
 80044da:	e000      	b.n	80044de <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <TIM_Base_SetConfig+0xbc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x20>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a21      	ldr	r2, [pc, #132]	; (8004618 <TIM_Base_SetConfig+0xbc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0x52>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0x52>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a1e      	ldr	r2, [pc, #120]	; (800461c <TIM_Base_SetConfig+0xc0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0x52>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <TIM_Base_SetConfig+0xc4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <TIM_Base_SetConfig+0xbc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d007      	beq.n	80045fc <TIM_Base_SetConfig+0xa0>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a0b      	ldr	r2, [pc, #44]	; (800461c <TIM_Base_SetConfig+0xc0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_Base_SetConfig+0xa0>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <TIM_Base_SetConfig+0xc4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d103      	bne.n	8004604 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	615a      	str	r2, [r3, #20]
}
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40014000 	.word	0x40014000
 8004620:	40014400 	.word	0x40014400

08004624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f023 0201 	bic.w	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 030a 	bic.w	r3, r3, #10
 8004660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004682:	b480      	push	{r7}
 8004684:	b087      	sub	sp, #28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f023 0210 	bic.w	r2, r3, #16
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	031b      	lsls	r3, r3, #12
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	f043 0307 	orr.w	r3, r3, #7
 8004704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	021a      	lsls	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	431a      	orrs	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800476c:	2302      	movs	r3, #2
 800476e:	e04f      	b.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a21      	ldr	r2, [pc, #132]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d108      	bne.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a14      	ldr	r2, [pc, #80]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d004      	beq.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a10      	ldr	r2, [pc, #64]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10c      	bne.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40014000 	.word	0x40014000

08004824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e048      	b.n	8004904 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fc f9f2 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f834 	bl	800490c <UART_SetConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e02a      	b.n	8004904 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa82 	bl	8004dc0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80048da:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0208 	orr.w	r2, r2, #8
 80048ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fb01 	bl	8004f04 <UART_CheckIdleState>
 8004902:	4603      	mov	r3, r0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b08a      	sub	sp, #40	; 0x28
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	431a      	orrs	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	431a      	orrs	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	4313      	orrs	r3, r2
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b9e      	ldr	r3, [pc, #632]	; (8004bb4 <UART_SetConfig+0x2a8>)
 800493c:	4013      	ands	r3, r2
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004944:	430b      	orrs	r3, r1
 8004946:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a93      	ldr	r2, [pc, #588]	; (8004bb8 <UART_SetConfig+0x2ac>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004974:	4313      	orrs	r3, r2
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a8a      	ldr	r2, [pc, #552]	; (8004bbc <UART_SetConfig+0x2b0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d126      	bne.n	80049e4 <UART_SetConfig+0xd8>
 8004996:	4b8a      	ldr	r3, [pc, #552]	; (8004bc0 <UART_SetConfig+0x2b4>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d81b      	bhi.n	80049dc <UART_SetConfig+0xd0>
 80049a4:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0xa0>)
 80049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	080049bd 	.word	0x080049bd
 80049b0:	080049cd 	.word	0x080049cd
 80049b4:	080049c5 	.word	0x080049c5
 80049b8:	080049d5 	.word	0x080049d5
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c2:	e0ab      	b.n	8004b1c <UART_SetConfig+0x210>
 80049c4:	2302      	movs	r3, #2
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ca:	e0a7      	b.n	8004b1c <UART_SetConfig+0x210>
 80049cc:	2304      	movs	r3, #4
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d2:	e0a3      	b.n	8004b1c <UART_SetConfig+0x210>
 80049d4:	2308      	movs	r3, #8
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049da:	e09f      	b.n	8004b1c <UART_SetConfig+0x210>
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e2:	e09b      	b.n	8004b1c <UART_SetConfig+0x210>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a76      	ldr	r2, [pc, #472]	; (8004bc4 <UART_SetConfig+0x2b8>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d138      	bne.n	8004a60 <UART_SetConfig+0x154>
 80049ee:	4b74      	ldr	r3, [pc, #464]	; (8004bc0 <UART_SetConfig+0x2b4>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d82d      	bhi.n	8004a58 <UART_SetConfig+0x14c>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0xf8>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004a59 	.word	0x08004a59
 8004a0c:	08004a59 	.word	0x08004a59
 8004a10:	08004a59 	.word	0x08004a59
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004a59 	.word	0x08004a59
 8004a1c:	08004a59 	.word	0x08004a59
 8004a20:	08004a59 	.word	0x08004a59
 8004a24:	08004a41 	.word	0x08004a41
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3e:	e06d      	b.n	8004b1c <UART_SetConfig+0x210>
 8004a40:	2302      	movs	r3, #2
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e069      	b.n	8004b1c <UART_SetConfig+0x210>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e065      	b.n	8004b1c <UART_SetConfig+0x210>
 8004a50:	2308      	movs	r3, #8
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a56:	e061      	b.n	8004b1c <UART_SetConfig+0x210>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5e:	e05d      	b.n	8004b1c <UART_SetConfig+0x210>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a58      	ldr	r2, [pc, #352]	; (8004bc8 <UART_SetConfig+0x2bc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d125      	bne.n	8004ab6 <UART_SetConfig+0x1aa>
 8004a6a:	4b55      	ldr	r3, [pc, #340]	; (8004bc0 <UART_SetConfig+0x2b4>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a74:	2b30      	cmp	r3, #48	; 0x30
 8004a76:	d016      	beq.n	8004aa6 <UART_SetConfig+0x19a>
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d818      	bhi.n	8004aae <UART_SetConfig+0x1a2>
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d00a      	beq.n	8004a96 <UART_SetConfig+0x18a>
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d814      	bhi.n	8004aae <UART_SetConfig+0x1a2>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <UART_SetConfig+0x182>
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d008      	beq.n	8004a9e <UART_SetConfig+0x192>
 8004a8c:	e00f      	b.n	8004aae <UART_SetConfig+0x1a2>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a94:	e042      	b.n	8004b1c <UART_SetConfig+0x210>
 8004a96:	2302      	movs	r3, #2
 8004a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9c:	e03e      	b.n	8004b1c <UART_SetConfig+0x210>
 8004a9e:	2304      	movs	r3, #4
 8004aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa4:	e03a      	b.n	8004b1c <UART_SetConfig+0x210>
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aac:	e036      	b.n	8004b1c <UART_SetConfig+0x210>
 8004aae:	2310      	movs	r3, #16
 8004ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab4:	e032      	b.n	8004b1c <UART_SetConfig+0x210>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3f      	ldr	r2, [pc, #252]	; (8004bb8 <UART_SetConfig+0x2ac>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d12a      	bne.n	8004b16 <UART_SetConfig+0x20a>
 8004ac0:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <UART_SetConfig+0x2b4>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ace:	d01a      	beq.n	8004b06 <UART_SetConfig+0x1fa>
 8004ad0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ad4:	d81b      	bhi.n	8004b0e <UART_SetConfig+0x202>
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ada:	d00c      	beq.n	8004af6 <UART_SetConfig+0x1ea>
 8004adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae0:	d815      	bhi.n	8004b0e <UART_SetConfig+0x202>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <UART_SetConfig+0x1e2>
 8004ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aea:	d008      	beq.n	8004afe <UART_SetConfig+0x1f2>
 8004aec:	e00f      	b.n	8004b0e <UART_SetConfig+0x202>
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af4:	e012      	b.n	8004b1c <UART_SetConfig+0x210>
 8004af6:	2302      	movs	r3, #2
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afc:	e00e      	b.n	8004b1c <UART_SetConfig+0x210>
 8004afe:	2304      	movs	r3, #4
 8004b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b04:	e00a      	b.n	8004b1c <UART_SetConfig+0x210>
 8004b06:	2308      	movs	r3, #8
 8004b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0c:	e006      	b.n	8004b1c <UART_SetConfig+0x210>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b14:	e002      	b.n	8004b1c <UART_SetConfig+0x210>
 8004b16:	2310      	movs	r3, #16
 8004b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <UART_SetConfig+0x2ac>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	f040 808a 	bne.w	8004c3c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d824      	bhi.n	8004b7a <UART_SetConfig+0x26e>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0x22c>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004b7b 	.word	0x08004b7b
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b7b 	.word	0x08004b7b
 8004b48:	08004b6b 	.word	0x08004b6b
 8004b4c:	08004b7b 	.word	0x08004b7b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b7b 	.word	0x08004b7b
 8004b58:	08004b73 	.word	0x08004b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5c:	f7fe fafa 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004b60:	61f8      	str	r0, [r7, #28]
        break;
 8004b62:	e010      	b.n	8004b86 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <UART_SetConfig+0x2c0>)
 8004b66:	61fb      	str	r3, [r7, #28]
        break;
 8004b68:	e00d      	b.n	8004b86 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7fe fa5d 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8004b6e:	61f8      	str	r0, [r7, #28]
        break;
 8004b70:	e009      	b.n	8004b86 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b76:	61fb      	str	r3, [r7, #28]
        break;
 8004b78:	e005      	b.n	8004b86 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8109 	beq.w	8004da0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d305      	bcc.n	8004baa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d912      	bls.n	8004bd0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bb0:	e0f6      	b.n	8004da0 <UART_SetConfig+0x494>
 8004bb2:	bf00      	nop
 8004bb4:	efff69f3 	.word	0xefff69f3
 8004bb8:	40008000 	.word	0x40008000
 8004bbc:	40013800 	.word	0x40013800
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	40004400 	.word	0x40004400
 8004bc8:	40004800 	.word	0x40004800
 8004bcc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	461c      	mov	r4, r3
 8004bd6:	4615      	mov	r5, r2
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	022b      	lsls	r3, r5, #8
 8004be2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004be6:	0222      	lsls	r2, r4, #8
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	6849      	ldr	r1, [r1, #4]
 8004bec:	0849      	lsrs	r1, r1, #1
 8004bee:	2000      	movs	r0, #0
 8004bf0:	4688      	mov	r8, r1
 8004bf2:	4681      	mov	r9, r0
 8004bf4:	eb12 0a08 	adds.w	sl, r2, r8
 8004bf8:	eb43 0b09 	adc.w	fp, r3, r9
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c0a:	4650      	mov	r0, sl
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	f7fb fadd 	bl	80001cc <__aeabi_uldivmod>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4613      	mov	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c20:	d308      	bcc.n	8004c34 <UART_SetConfig+0x328>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c28:	d204      	bcs.n	8004c34 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	e0b5      	b.n	8004da0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c3a:	e0b1      	b.n	8004da0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c44:	d15d      	bne.n	8004d02 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d827      	bhi.n	8004c9e <UART_SetConfig+0x392>
 8004c4e:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0x348>)
 8004c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c9f 	.word	0x08004c9f
 8004c64:	08004c8f 	.word	0x08004c8f
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004c9f 	.word	0x08004c9f
 8004c70:	08004c9f 	.word	0x08004c9f
 8004c74:	08004c97 	.word	0x08004c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c78:	f7fe fa6c 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	61f8      	str	r0, [r7, #28]
        break;
 8004c7e:	e014      	b.n	8004caa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c80:	f7fe fa7e 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8004c84:	61f8      	str	r0, [r7, #28]
        break;
 8004c86:	e010      	b.n	8004caa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c88:	4b4c      	ldr	r3, [pc, #304]	; (8004dbc <UART_SetConfig+0x4b0>)
 8004c8a:	61fb      	str	r3, [r7, #28]
        break;
 8004c8c:	e00d      	b.n	8004caa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7fe f9cb 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8004c92:	61f8      	str	r0, [r7, #28]
        break;
 8004c94:	e009      	b.n	8004caa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9a:	61fb      	str	r3, [r7, #28]
        break;
 8004c9c:	e005      	b.n	8004caa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d077      	beq.n	8004da0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005a      	lsls	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	441a      	add	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b0f      	cmp	r3, #15
 8004cca:	d916      	bls.n	8004cfa <UART_SetConfig+0x3ee>
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd2:	d212      	bcs.n	8004cfa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f023 030f 	bic.w	r3, r3, #15
 8004cdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	8afb      	ldrh	r3, [r7, #22]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	8afa      	ldrh	r2, [r7, #22]
 8004cf6:	60da      	str	r2, [r3, #12]
 8004cf8:	e052      	b.n	8004da0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d00:	e04e      	b.n	8004da0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d827      	bhi.n	8004d5a <UART_SetConfig+0x44e>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <UART_SetConfig+0x404>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	08004d5b 	.word	0x08004d5b
 8004d20:	08004d4b 	.word	0x08004d4b
 8004d24:	08004d5b 	.word	0x08004d5b
 8004d28:	08004d5b 	.word	0x08004d5b
 8004d2c:	08004d5b 	.word	0x08004d5b
 8004d30:	08004d53 	.word	0x08004d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d34:	f7fe fa0e 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004d38:	61f8      	str	r0, [r7, #28]
        break;
 8004d3a:	e014      	b.n	8004d66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7fe fa20 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8004d40:	61f8      	str	r0, [r7, #28]
        break;
 8004d42:	e010      	b.n	8004d66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d44:	4b1d      	ldr	r3, [pc, #116]	; (8004dbc <UART_SetConfig+0x4b0>)
 8004d46:	61fb      	str	r3, [r7, #28]
        break;
 8004d48:	e00d      	b.n	8004d66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4a:	f7fe f96d 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8004d4e:	61f8      	str	r0, [r7, #28]
        break;
 8004d50:	e009      	b.n	8004d66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d56:	61fb      	str	r3, [r7, #28]
        break;
 8004d58:	e005      	b.n	8004d66 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d64:	bf00      	nop
    }

    if (pclk != 0U)
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d019      	beq.n	8004da0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	085a      	lsrs	r2, r3, #1
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	441a      	add	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b0f      	cmp	r3, #15
 8004d84:	d909      	bls.n	8004d9a <UART_SetConfig+0x48e>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d8c:	d205      	bcs.n	8004d9a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	e002      	b.n	8004da0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004dac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dba:	bf00      	nop
 8004dbc:	00f42400 	.word	0x00f42400

08004dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ebe:	d10a      	bne.n	8004ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f14:	f7fc f810 	bl	8000f38 <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d10e      	bne.n	8004f46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f82d 	bl	8004f96 <UART_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e023      	b.n	8004f8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d10e      	bne.n	8004f72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f817 	bl	8004f96 <UART_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e00d      	b.n	8004f8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b09c      	sub	sp, #112	; 0x70
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa6:	e0a5      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	f000 80a1 	beq.w	80050f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb2:	f7fb ffc1 	bl	8000f38 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d13e      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fdc:	667b      	str	r3, [r7, #100]	; 0x64
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fe8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e6      	bne.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3308      	adds	r3, #8
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	663b      	str	r3, [r7, #96]	; 0x60
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3308      	adds	r3, #8
 8005018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800501a:	64ba      	str	r2, [r7, #72]	; 0x48
 800501c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005022:	e841 2300 	strex	r3, r2, [r1]
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e5      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e067      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d04f      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005062:	d147      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800506c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	461a      	mov	r2, r3
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
 800508e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e6      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	613b      	str	r3, [r7, #16]
   return(result);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050c0:	623a      	str	r2, [r7, #32]
 80050c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	69f9      	ldr	r1, [r7, #28]
 80050c6:	6a3a      	ldr	r2, [r7, #32]
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e5      	bne.n	80050a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e010      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69da      	ldr	r2, [r3, #28]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	429a      	cmp	r2, r3
 8005110:	f43f af4a 	beq.w	8004fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3770      	adds	r7, #112	; 0x70
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <__libc_init_array>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4d0d      	ldr	r5, [pc, #52]	; (8005158 <__libc_init_array+0x38>)
 8005124:	4c0d      	ldr	r4, [pc, #52]	; (800515c <__libc_init_array+0x3c>)
 8005126:	1b64      	subs	r4, r4, r5
 8005128:	10a4      	asrs	r4, r4, #2
 800512a:	2600      	movs	r6, #0
 800512c:	42a6      	cmp	r6, r4
 800512e:	d109      	bne.n	8005144 <__libc_init_array+0x24>
 8005130:	4d0b      	ldr	r5, [pc, #44]	; (8005160 <__libc_init_array+0x40>)
 8005132:	4c0c      	ldr	r4, [pc, #48]	; (8005164 <__libc_init_array+0x44>)
 8005134:	f000 f820 	bl	8005178 <_init>
 8005138:	1b64      	subs	r4, r4, r5
 800513a:	10a4      	asrs	r4, r4, #2
 800513c:	2600      	movs	r6, #0
 800513e:	42a6      	cmp	r6, r4
 8005140:	d105      	bne.n	800514e <__libc_init_array+0x2e>
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	f855 3b04 	ldr.w	r3, [r5], #4
 8005148:	4798      	blx	r3
 800514a:	3601      	adds	r6, #1
 800514c:	e7ee      	b.n	800512c <__libc_init_array+0xc>
 800514e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005152:	4798      	blx	r3
 8005154:	3601      	adds	r6, #1
 8005156:	e7f2      	b.n	800513e <__libc_init_array+0x1e>
 8005158:	080051e0 	.word	0x080051e0
 800515c:	080051e0 	.word	0x080051e0
 8005160:	080051e0 	.word	0x080051e0
 8005164:	080051e4 	.word	0x080051e4

08005168 <memset>:
 8005168:	4402      	add	r2, r0
 800516a:	4603      	mov	r3, r0
 800516c:	4293      	cmp	r3, r2
 800516e:	d100      	bne.n	8005172 <memset+0xa>
 8005170:	4770      	bx	lr
 8005172:	f803 1b01 	strb.w	r1, [r3], #1
 8005176:	e7f9      	b.n	800516c <memset+0x4>

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	bf00      	nop
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr
