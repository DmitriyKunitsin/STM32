
Manchester_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004060  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004234  08004234  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004234  08004234  00014234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800423c  0800423c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08004250  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004250  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa3e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0002fa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00031888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  00032700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ae9  00000000  00000000  000334c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010204  00000000  00000000  00054fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d14eb  00000000  00000000  000651ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  001366e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080041d4 	.word	0x080041d4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080041d4 	.word	0x080041d4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <getCurrentValueByte>:
#include  "../Inc/Manchester.h"

uint8_t getCurrentValueByte() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	Byte *byte = getCurrentStructByte();
 80004d6:	f000 f84d 	bl	8000574 <getCurrentStructByte>
 80004da:	6078      	str	r0, [r7, #4]
	uint8_t currentByte = (byte->bit0_DA00 << 0) | (byte->bit1_DA01 << 1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	b25a      	sxtb	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b25a      	sxtb	r2, r3
			| (byte->bit2_DA02 << 2) | (byte->bit3_DA03 << 3)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	b25b      	sxtb	r3, r3
 8000508:	4313      	orrs	r3, r2
 800050a:	b25a      	sxtb	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	b25b      	sxtb	r3, r3
 800051a:	4313      	orrs	r3, r2
 800051c:	b25a      	sxtb	r2, r3
			| (byte->bit4_DA04 << 4) | (byte->bit5_DA05 << 5)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000526:	b2db      	uxtb	r3, r3
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	b25b      	sxtb	r3, r3
 800052c:	4313      	orrs	r3, r2
 800052e:	b25a      	sxtb	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	015b      	lsls	r3, r3, #5
 800053c:	b25b      	sxtb	r3, r3
 800053e:	4313      	orrs	r3, r2
 8000540:	b25a      	sxtb	r2, r3
			| (byte->bit6_DA06 << 6) | (byte->bit7_DA07 << 7);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	019b      	lsls	r3, r3, #6
 800054e:	b25b      	sxtb	r3, r3
 8000550:	4313      	orrs	r3, r2
 8000552:	b25a      	sxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	01db      	lsls	r3, r3, #7
 8000560:	b25b      	sxtb	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b25b      	sxtb	r3, r3
	uint8_t currentByte = (byte->bit0_DA00 << 0) | (byte->bit1_DA01 << 1)
 8000566:	70fb      	strb	r3, [r7, #3]
	return currentByte;
 8000568:	78fb      	ldrb	r3, [r7, #3]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <getCurrentStructByte>:

Byte* getCurrentStructByte() {
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	static Byte currentByte;
	return &currentByte;
 8000578:	4b02      	ldr	r3, [pc, #8]	; (8000584 <getCurrentStructByte+0x10>)
}
 800057a:	4618      	mov	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	20000028 	.word	0x20000028

08000588 <readByteFromPort>:

void readByteFromPort() {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	Byte *byte = getCurrentStructByte();
 800058e:	f7ff fff1 	bl	8000574 <getCurrentStructByte>
 8000592:	6078      	str	r0, [r7, #4]
	byte->bit0_DA00 = HAL_GPIO_ReadPin(GPIOA, DA0_Pin);
 8000594:	2101      	movs	r1, #1
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f000 ff49 	bl	8001430 <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	b2d9      	uxtb	r1, r3
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	7813      	ldrb	r3, [r2, #0]
 80005aa:	f361 0300 	bfi	r3, r1, #0, #1
 80005ae:	7013      	strb	r3, [r2, #0]
	byte->bit1_DA01 = HAL_GPIO_ReadPin(GPIOA, DA1_Pin);
 80005b0:	2102      	movs	r1, #2
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f000 ff3b 	bl	8001430 <HAL_GPIO_ReadPin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	b2d9      	uxtb	r1, r3
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7813      	ldrb	r3, [r2, #0]
 80005c6:	f361 0341 	bfi	r3, r1, #1, #1
 80005ca:	7013      	strb	r3, [r2, #0]
	byte->bit2_DA02 = HAL_GPIO_ReadPin(GPIOA, DA2_Pin);
 80005cc:	2104      	movs	r1, #4
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f000 ff2d 	bl	8001430 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	b2d9      	uxtb	r1, r3
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7813      	ldrb	r3, [r2, #0]
 80005e2:	f361 0382 	bfi	r3, r1, #2, #1
 80005e6:	7013      	strb	r3, [r2, #0]
	byte->bit3_DA03 = HAL_GPIO_ReadPin(GPIOA, DA3_Pin);
 80005e8:	2108      	movs	r1, #8
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f000 ff1f 	bl	8001430 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b2d9      	uxtb	r1, r3
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7813      	ldrb	r3, [r2, #0]
 80005fe:	f361 03c3 	bfi	r3, r1, #3, #1
 8000602:	7013      	strb	r3, [r2, #0]
	byte->bit4_DA04 = HAL_GPIO_ReadPin(GPIOA, DA4_Pin);
 8000604:	2110      	movs	r1, #16
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f000 ff11 	bl	8001430 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	b2d9      	uxtb	r1, r3
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7813      	ldrb	r3, [r2, #0]
 800061a:	f361 1304 	bfi	r3, r1, #4, #1
 800061e:	7013      	strb	r3, [r2, #0]
	byte->bit5_DA05 = HAL_GPIO_ReadPin(GPIOA, DA5_Pin);
 8000620:	2120      	movs	r1, #32
 8000622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000626:	f000 ff03 	bl	8001430 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2d9      	uxtb	r1, r3
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7813      	ldrb	r3, [r2, #0]
 8000636:	f361 1345 	bfi	r3, r1, #5, #1
 800063a:	7013      	strb	r3, [r2, #0]
	byte->bit6_DA06 = HAL_GPIO_ReadPin(GPIOA, DA6_Pin);
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f000 fef5 	bl	8001430 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	b2d9      	uxtb	r1, r3
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7813      	ldrb	r3, [r2, #0]
 8000652:	f361 1386 	bfi	r3, r1, #6, #1
 8000656:	7013      	strb	r3, [r2, #0]
	byte->bit7_DA07 = HAL_GPIO_ReadPin(GPIOA, DA7_Pin);
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 fee7 	bl	8001430 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	b2d9      	uxtb	r1, r3
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	7813      	ldrb	r3, [r2, #0]
 800066e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000672:	7013      	strb	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <readDatesToPorts>:
	}
	HAL_GPIO_WritePin(GPIOB, ASD_Pin, GPIO_PIN_RESET);
	HAL_Delay(1);
}

uint16_t readDatesToPorts() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOB, ANED_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOB, ANED_Pin, GPIO_PIN_RESET);
	AINT_RX_OK;
 8000682:	bf00      	nop
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f000 fed0 	bl	8001430 <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f6      	bne.n	8000684 <readDatesToPorts+0x8>
	HAL_GPIO_WritePin(GPIOB, ARDL_1byte_Pin, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	4816      	ldr	r0, [pc, #88]	; (80006f8 <readDatesToPorts+0x7c>)
 800069e:	f000 fedf 	bl	8001460 <HAL_GPIO_WritePin>
	readByteFromPort();
 80006a2:	f7ff ff71 	bl	8000588 <readByteFromPort>
	uint8_t firstByte = getCurrentValueByte();
 80006a6:	f7ff ff13 	bl	80004d0 <getCurrentValueByte>
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, ARDL_1byte_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <readDatesToPorts+0x7c>)
 80006b6:	f000 fed3 	bl	8001460 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ARDH_2byte_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2120      	movs	r1, #32
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <readDatesToPorts+0x7c>)
 80006c0:	f000 fece 	bl	8001460 <HAL_GPIO_WritePin>
	readByteFromPort();
 80006c4:	f7ff ff60 	bl	8000588 <readByteFromPort>
	uint8_t secondByte = getCurrentValueByte();
 80006c8:	f7ff ff02 	bl	80004d0 <getCurrentValueByte>
 80006cc:	4603      	mov	r3, r0
 80006ce:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, ARDH_2byte_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2120      	movs	r1, #32
 80006d4:	4808      	ldr	r0, [pc, #32]	; (80006f8 <readDatesToPorts+0x7c>)
 80006d6:	f000 fec3 	bl	8001460 <HAL_GPIO_WritePin>

	uint16_t result = 0x0000;
 80006da:	2300      	movs	r3, #0
 80006dc:	80bb      	strh	r3, [r7, #4]
	result = (firstByte << 8) | secondByte;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	021b      	lsls	r3, r3, #8
 80006e2:	b21a      	sxth	r2, r3
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	80bb      	strh	r3, [r7, #4]
	return result;
 80006ee:	88bb      	ldrh	r3, [r7, #4]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	48000400 	.word	0x48000400

080006fc <changeConfigureForRead>:

void changeConfigureForRead(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DA0_Pin | DA1_Pin|DA2_Pin|DA3_Pin
 8000710:	23ff      	movs	r3, #255	; 0xff
 8000712:	607b      	str	r3, [r7, #4]
            |DA4_Pin|DA5_Pin|DA6_Pin|DA7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,  &GPIO_InitStruct);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f000 fd0a 	bl	800113c <HAL_GPIO_Init>
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000736:	f000 fba6 	bl	8000e86 <HAL_Init>
	/* USER CODE BEGIN Init */
//	HAL_Delay(1000);
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800073a:	f000 f841 	bl	80007c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800073e:	f000 f99b 	bl	8000a78 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000742:	f000 f939 	bl	80009b8 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000746:	f000 f88b 	bl	8000860 <MX_TIM1_Init>
	MX_USART3_UART_Init();
 800074a:	f000 f965 	bl	8000a18 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	START_READ_MODE;
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000754:	4817      	ldr	r0, [pc, #92]	; (80007b4 <main+0x84>)
 8000756:	f000 fe83 	bl	8001460 <HAL_GPIO_WritePin>
	changeConfigureForRead();
 800075a:	f7ff ffcf 	bl	80006fc <changeConfigureForRead>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800075e:	2104      	movs	r1, #4
 8000760:	4815      	ldr	r0, [pc, #84]	; (80007b8 <main+0x88>)
 8000762:	f002 fe7d 	bl	8003460 <HAL_TIMEx_PWMN_Start>
	HAL_GPIO_WritePin(GPIOA, UAR_SETTING_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f000 fe76 	bl	8001460 <HAL_GPIO_WritePin>
//		while(HAL_GPIO_ReadPin(GPIOB, AINTRX_Pin) != 0) {}
//		if(HAL_GPIO_ReadPin(GPIOA, AINTRX_Pin) == 1) {
//			count += 1;
//		}
//		if(count == 2) {
		while(HAL_GPIO_ReadPin(GPIOA, AINTRX_Pin) == 0) {}
 8000774:	bf00      	nop
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f000 fe57 	bl	8001430 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0f6      	beq.n	8000776 <main+0x46>
		while(HAL_GPIO_ReadPin(GPIOA, AINTRX_Pin) != 0) {}
 8000788:	bf00      	nop
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f000 fe4d 	bl	8001430 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f6      	bne.n	800078a <main+0x5a>
			uint16_t answer = /* (0b11110000 << 8) | 0b11110000;*/ readDatesToPorts();
 800079c:	f7ff ff6e 	bl	800067c <readDatesToPorts>
 80007a0:	4603      	mov	r3, r0
 80007a2:	80fb      	strh	r3, [r7, #6]
			HAL_UART_Transmit(&huart1, (uint8_t *)&answer, sizeof(answer), HAL_MAX_DELAY);
 80007a4:	1db9      	adds	r1, r7, #6
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	2202      	movs	r2, #2
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <main+0x8c>)
 80007ae:	f003 f846 	bl	800383e <HAL_UART_Transmit>
	while (1) {
 80007b2:	e7df      	b.n	8000774 <main+0x44>
 80007b4:	48000400 	.word	0x48000400
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	20000078 	.word	0x20000078

080007c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2244      	movs	r2, #68	; 0x44
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fcf8 	bl	80041c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e6:	f000 fe61 	bl	80014ac <HAL_PWREx_ControlVoltageScaling>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80007f0:	f000 f9c0 	bl	8000b74 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2303      	movs	r3, #3
 8000804:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800080a:	230a      	movs	r3, #10
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080e:	2307      	movs	r3, #7
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fe9a 	bl	8001558 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x6e>
		Error_Handler();
 800082a:	f000 f9a3 	bl	8000b74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000842:	463b      	mov	r3, r7
 8000844:	2104      	movs	r1, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fa9a 	bl	8001d80 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x96>
		Error_Handler();
 8000852:	f000 f98f 	bl	8000b74 <Error_Handler>
	}
}
 8000856:	bf00      	nop
 8000858:	3758      	adds	r7, #88	; 0x58
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b09a      	sub	sp, #104	; 0x68
 8000864:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000874:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
 8000890:	615a      	str	r2, [r3, #20]
 8000892:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	222c      	movs	r2, #44	; 0x2c
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fc92 	bl	80041c4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008a0:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008a2:	4a44      	ldr	r2, [pc, #272]	; (80009b4 <MX_TIM1_Init+0x154>)
 80008a4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1;
 80008a6:	4b42      	ldr	r3, [pc, #264]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b40      	ldr	r3, [pc, #256]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 79;
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008b4:	224f      	movs	r2, #79	; 0x4f
 80008b6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80008ca:	4839      	ldr	r0, [pc, #228]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008cc:	f001 ffb6 	bl	800283c <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x7a>
		Error_Handler();
 80008d6:	f000 f94d 	bl	8000b74 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008de:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80008e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008e4:	4619      	mov	r1, r3
 80008e6:	4832      	ldr	r0, [pc, #200]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008e8:	f002 f974 	bl	8002bd4 <HAL_TIM_ConfigClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x96>
		Error_Handler();
 80008f2:	f000 f93f 	bl	8000b74 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80008f6:	482e      	ldr	r0, [pc, #184]	; (80009b0 <MX_TIM1_Init+0x150>)
 80008f8:	f001 fff7 	bl	80028ea <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8000902:	f000 f937 	bl	8000b74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000912:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000916:	4619      	mov	r1, r3
 8000918:	4825      	ldr	r0, [pc, #148]	; (80009b0 <MX_TIM1_Init+0x150>)
 800091a:	f002 fe3f 	bl	800359c <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xc8>
			!= HAL_OK) {
		Error_Handler();
 8000924:	f000 f926 	bl	8000b74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 39;
 800092c:	2327      	movs	r3, #39	; 0x27
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000948:	2204      	movs	r2, #4
 800094a:	4619      	mov	r1, r3
 800094c:	4818      	ldr	r0, [pc, #96]	; (80009b0 <MX_TIM1_Init+0x150>)
 800094e:	f002 f82d 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8000958:	f000 f90c 	bl	8000b74 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800097e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4619      	mov	r1, r3
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM1_Init+0x150>)
 8000992:	f002 fe69 	bl	8003668 <HAL_TIMEx_ConfigBreakDeadTime>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 800099c:	f000 f8ea 	bl	8000b74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM1_Init+0x150>)
 80009a2:	f000 f931 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 80009a6:	bf00      	nop
 80009a8:	3768      	adds	r7, #104	; 0x68
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000002c 	.word	0x2000002c
 80009b4:	40012c00 	.word	0x40012c00

080009b8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <MX_USART1_UART_Init+0x5c>)
 80009c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART1_UART_Init+0x58>)
 80009fc:	f002 fed1 	bl	80037a2 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000a06:	f000 f8b5 	bl	8000b74 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */
	/* USER CODE END USART1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000078 	.word	0x20000078
 8000a14:	40013800 	.word	0x40013800

08000a18 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a1e:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <MX_USART3_UART_Init+0x5c>)
 8000a20:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART3_UART_Init+0x58>)
 8000a5c:	f002 fea1 	bl	80037a2 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000a66:	f000 f885 	bl	8000b74 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000fc 	.word	0x200000fc
 8000a74:	40004800 	.word	0x40004800

08000a78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a36      	ldr	r2, [pc, #216]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a30      	ldr	r2, [pc, #192]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_GPIO_Init+0xf4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fcbe 	bl	8001460 <HAL_GPIO_WritePin>
			DA0_Pin | DA1_Pin | DA2_Pin | DA3_Pin | DA4_Pin | DA5_Pin | DA6_Pin
					| DA7_Pin | UAR_SETTING_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f24f 0126 	movw	r1, #61478	; 0xf026
 8000aea:	4821      	ldr	r0, [pc, #132]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000aec:	f000 fcb8 	bl	8001460 <HAL_GPIO_WritePin>
					| ANED_Pin | AMODE_Pin | ARDH_2byte_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : DA0_Pin DA1_Pin DA2_Pin DA3_Pin
	 DA4_Pin DA5_Pin DA6_Pin DA7_Pin
	 UAR_SETTING_Pin */
	GPIO_InitStruct.Pin = DA0_Pin | DA1_Pin | DA2_Pin | DA3_Pin | DA4_Pin
 8000af0:	f241 03ff 	movw	r3, #4351	; 0x10ff
 8000af4:	60fb      	str	r3, [r7, #12]
			| DA5_Pin | DA6_Pin | DA7_Pin | UAR_SETTING_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f000 fb16 	bl	800113c <HAL_GPIO_Init>

	/*Configure GPIO pins : ASD_Pin AWRH_2byte_Pin AWRL_1byte_Pin ARDL_1byte_Pin
	 ANED_Pin AMODE_Pin ARDH_2byte_Pin */
	GPIO_InitStruct.Pin = ASD_Pin | AWRH_2byte_Pin | AWRL_1byte_Pin
 8000b10:	f24f 0326 	movw	r3, #61478	; 0xf026
 8000b14:	60fb      	str	r3, [r7, #12]
			| ARDL_1byte_Pin | ANED_Pin | AMODE_Pin | ARDH_2byte_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000b2a:	f000 fb07 	bl	800113c <HAL_GPIO_Init>

	/*Configure GPIO pins : AINTRX_Pin AINTTX_Pin */
	GPIO_InitStruct.Pin = AINTRX_Pin | AINTTX_Pin;
 8000b2e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000b32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f000 faf9 	bl	800113c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000b5e:	f000 faed 	bl	800113c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000400 	.word	0x48000400

08000b74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_TIM_Base_MspInit+0x38>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_Base_MspInit+0x3c>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x3c>)
 8000be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_TIM_Base_MspInit+0x3c>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <HAL_TIM_MspPostInit+0x64>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11b      	bne.n	8000c62 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c42:	2301      	movs	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c5e:	f000 fa6d 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40012c00 	.word	0x40012c00
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000400 	.word	0x48000400

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0a4      	sub	sp, #144	; 0x90
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	2260      	movs	r2, #96	; 0x60
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fa93 	bl	80041c4 <memset>
  if(huart->Instance==USART1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a42      	ldr	r2, [pc, #264]	; (8000dac <HAL_UART_MspInit+0x134>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d13c      	bne.n	8000d22 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fa85 	bl	80021c4 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f7ff ff58 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc8:	4a39      	ldr	r2, [pc, #228]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a33      	ldr	r2, [pc, #204]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cf4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1c:	f000 fa0e 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d20:	e03f      	b.n	8000da2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <HAL_UART_MspInit+0x13c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d13a      	bne.n	8000da2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fa43 	bl	80021c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000d44:	f7ff ff16 	bl	8000b74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d52:	6593      	str	r3, [r2, #88]	; 0x58
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x138>)
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4806      	ldr	r0, [pc, #24]	; (8000db8 <HAL_UART_MspInit+0x140>)
 8000d9e:	f000 f9cd 	bl	800113c <HAL_GPIO_Init>
}
 8000da2:	bf00      	nop
 8000da4:	3790      	adds	r7, #144	; 0x90
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40013800 	.word	0x40013800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40004800 	.word	0x40004800
 8000db8:	48000400 	.word	0x48000400

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f892 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e38:	f7ff ffea 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	; (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e62:	f003 f98b 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e66:	f7ff fc63 	bl	8000730 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e78:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e80:	20000184 	.word	0x20000184

08000e84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>

08000e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f91f 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 f80e 	bl	8000eb8 <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	e001      	b.n	8000eac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea8:	f7ff fe6a 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eac:	79fb      	ldrb	r3, [r7, #7]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_InitTick+0x6c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d023      	beq.n	8000f14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_InitTick+0x70>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_InitTick+0x6c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f91d 	bl	8001122 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10f      	bne.n	8000f0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d809      	bhi.n	8000f08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f8f5 	bl	80010ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_InitTick+0x74>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e007      	b.n	8000f18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e004      	b.n	8000f18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e001      	b.n	8000f18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000180 	.word	0x20000180

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000180 	.word	0x20000180

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e154      	b.n	80013f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8146 	beq.w	80013f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b01      	cmp	r3, #1
 800116e:	d005      	beq.n	800117c <HAL_GPIO_Init+0x40>
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d130      	bne.n	80011de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b2:	2201      	movs	r2, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	f003 0201 	and.w	r2, r3, #1
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d017      	beq.n	800121a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d123      	bne.n	800126e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0203 	and.w	r2, r3, #3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80a0 	beq.w	80013f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	4b58      	ldr	r3, [pc, #352]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6613      	str	r3, [r2, #96]	; 0x60
 80012bc:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 80012be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c8:	4a53      	ldr	r2, [pc, #332]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012f2:	d019      	beq.n	8001328 <HAL_GPIO_Init+0x1ec>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a49      	ldr	r2, [pc, #292]	; (800141c <HAL_GPIO_Init+0x2e0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d013      	beq.n	8001324 <HAL_GPIO_Init+0x1e8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a48      	ldr	r2, [pc, #288]	; (8001420 <HAL_GPIO_Init+0x2e4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00d      	beq.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a47      	ldr	r2, [pc, #284]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d007      	beq.n	800131c <HAL_GPIO_Init+0x1e0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a46      	ldr	r2, [pc, #280]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d101      	bne.n	8001318 <HAL_GPIO_Init+0x1dc>
 8001314:	2304      	movs	r3, #4
 8001316:	e008      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001318:	2307      	movs	r3, #7
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 800131c:	2303      	movs	r3, #3
 800131e:	e004      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001320:	2302      	movs	r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_GPIO_Init+0x1ee>
 8001328:	2300      	movs	r3, #0
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4093      	lsls	r3, r2
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800133a:	4937      	ldr	r1, [pc, #220]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001396:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c0:	4a1a      	ldr	r2, [pc, #104]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_GPIO_Init+0x2f0>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	f47f aea3 	bne.w	800114c <HAL_GPIO_Init+0x10>
  }
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000
 800141c:	48000400 	.word	0x48000400
 8001420:	48000800 	.word	0x48000800
 8001424:	48000c00 	.word	0x48000c00
 8001428:	48001000 	.word	0x48001000
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e001      	b.n	8001452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40007000 	.word	0x40007000

080014ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ba:	d130      	bne.n	800151e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c8:	d038      	beq.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9b      	lsrs	r3, r3, #18
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f0:	e002      	b.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001504:	d102      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f2      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d110      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e00f      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152a:	d007      	beq.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000
 8001550:	20000000 	.word	0x20000000
 8001554:	431bde83 	.word	0x431bde83

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	f000 bc02 	b.w	8001d70 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156c:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001576:	4b94      	ldr	r3, [pc, #592]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80e4 	beq.w	8001756 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d007      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4c>
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	f040 808b 	bne.w	80016b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	f040 8087 	bne.w	80016b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a4:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_OscConfig+0x64>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e3d9      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1a      	ldr	r2, [r3, #32]
 80015c0:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <HAL_RCC_OscConfig+0x7e>
 80015cc:	4b7e      	ldr	r3, [pc, #504]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d4:	e005      	b.n	80015e2 <HAL_RCC_OscConfig+0x8a>
 80015d6:	4b7c      	ldr	r3, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d223      	bcs.n	800162e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fd8a 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e3ba      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fa:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a72      	ldr	r2, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	496d      	ldr	r1, [pc, #436]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001618:	4b6b      	ldr	r3, [pc, #428]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	4968      	ldr	r1, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
 800162c:	e025      	b.n	800167a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162e:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a65      	ldr	r2, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4960      	ldr	r1, [pc, #384]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164c:	4b5e      	ldr	r3, [pc, #376]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	495b      	ldr	r1, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fd4a 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e37a      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800167a:	f000 fc81 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 800167e:	4602      	mov	r2, r0
 8001680:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4950      	ldr	r1, [pc, #320]	; (80017cc <HAL_RCC_OscConfig+0x274>)
 800168c:	5ccb      	ldrb	r3, [r1, r3]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_RCC_OscConfig+0x278>)
 8001698:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800169a:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fc0a 	bl	8000eb8 <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d052      	beq.n	8001754 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	e35e      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d032      	beq.n	8001720 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ba:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fc47 	bl	8000f58 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc43 	bl	8000f58 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e347      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a35      	ldr	r2, [pc, #212]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4930      	ldr	r1, [pc, #192]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170a:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	492b      	ldr	r1, [pc, #172]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e01a      	b.n	8001756 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172c:	f7ff fc14 	bl	8000f58 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff fc10 	bl	8000f58 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e314      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x1dc>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d073      	beq.n	800184a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b08      	cmp	r3, #8
 8001766:	d005      	beq.n	8001774 <HAL_RCC_OscConfig+0x21c>
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d10e      	bne.n	800178c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d10b      	bne.n	800178c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d063      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d15f      	bne.n	8001848 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e2f1      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x24c>
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e025      	b.n	80017f0 <HAL_RCC_OscConfig+0x298>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ac:	d114      	bne.n	80017d8 <HAL_RCC_OscConfig+0x280>
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a02      	ldr	r2, [pc, #8]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e013      	b.n	80017f0 <HAL_RCC_OscConfig+0x298>
 80017c8:	40021000 	.word	0x40021000
 80017cc:	080041ec 	.word	0x080041ec
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004
 80017d8:	4ba0      	ldr	r3, [pc, #640]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a9f      	ldr	r2, [pc, #636]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b9d      	ldr	r3, [pc, #628]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a9c      	ldr	r2, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbae 	bl	8000f58 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fbaa 	bl	8000f58 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e2ae      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x2a8>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fb9a 	bl	8000f58 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fb96 	bl	8000f58 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e29a      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x2d0>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d060      	beq.n	8001918 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x310>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d119      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x328>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e277      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b76      	ldr	r3, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	4973      	ldr	r1, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001894:	e040      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d023      	beq.n	80018e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb55 	bl	8000f58 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb51 	bl	8000f58 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e255      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	495f      	ldr	r1, [pc, #380]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e018      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fb31 	bl	8000f58 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fb2d 	bl	8000f58 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e231      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01c      	beq.n	8001966 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fb0c 	bl	8000f58 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fb08 	bl	8000f58 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e20c      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <HAL_RCC_OscConfig+0x3ec>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196c:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff faef 	bl	8000f58 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff faeb 	bl	8000f58 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1ef      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a6 	beq.w	8001af8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d118      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fab2 	bl	8000f58 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f8:	f7ff faae 	bl	8000f58 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1b2      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d8>
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2e:	e029      	b.n	8001a84 <HAL_RCC_OscConfig+0x52c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d115      	bne.n	8001a64 <HAL_RCC_OscConfig+0x50c>
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x52c>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	4b9a      	ldr	r3, [pc, #616]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a99      	ldr	r2, [pc, #612]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a74:	4b96      	ldr	r3, [pc, #600]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	4a95      	ldr	r2, [pc, #596]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d016      	beq.n	8001aba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fa64 	bl	8000f58 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff fa60 	bl	8000f58 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e162      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ed      	beq.n	8001a94 <HAL_RCC_OscConfig+0x53c>
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff fa4d 	bl	8000f58 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fa49 	bl	8000f58 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e14b      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad8:	4b7d      	ldr	r3, [pc, #500]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ed      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d03c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b0c:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b12:	4a6f      	ldr	r2, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fa1c 	bl	8000f58 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b24:	f7ff fa18 	bl	8000f58 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e11c      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b36:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ef      	beq.n	8001b24 <HAL_RCC_OscConfig+0x5cc>
 8001b44:	e01b      	b.n	8001b7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b46:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b4c:	4a60      	ldr	r2, [pc, #384]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff f9ff 	bl	8000f58 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b5e:	f7ff f9fb 	bl	8000f58 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0ff      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1ef      	bne.n	8001b5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80f3 	beq.w	8001d6e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	f040 80c9 	bne.w	8001d24 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b92:	4b4f      	ldr	r3, [pc, #316]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0203 	and.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d12c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d123      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d11b      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d113      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d109      	bne.n	8001c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d06b      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d062      	beq.n	8001ccc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c06:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0ac      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c20:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c22:	f7ff f999 	bl	8000f58 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff f995 	bl	8000f58 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e099      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x77c>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c58:	3a01      	subs	r2, #1
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	4311      	orrs	r1, r2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c62:	0212      	lsls	r2, r2, #8
 8001c64:	4311      	orrs	r1, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c6a:	0852      	lsrs	r2, r2, #1
 8001c6c:	3a01      	subs	r2, #1
 8001c6e:	0552      	lsls	r2, r2, #21
 8001c70:	4311      	orrs	r1, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c76:	0852      	lsrs	r2, r2, #1
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	0652      	lsls	r2, r2, #25
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c82:	06d2      	lsls	r2, r2, #27
 8001c84:	430a      	orrs	r2, r1
 8001c86:	4912      	ldr	r1, [pc, #72]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ca4:	f7ff f958 	bl	8000f58 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff f954 	bl	8000f58 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e058      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <HAL_RCC_OscConfig+0x778>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cca:	e050      	b.n	8001d6e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04f      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d144      	bne.n	8001d6e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cfc:	f7ff f92c 	bl	8000f58 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f928 	bl	8000f58 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e02c      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x7ac>
 8001d22:	e024      	b.n	8001d6e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d01f      	beq.n	8001d6a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff f90f 	bl	8000f58 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f90b 	bl	8000f58 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e00f      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4905      	ldr	r1, [pc, #20]	; (8001d78 <HAL_RCC_OscConfig+0x820>)
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_OscConfig+0x824>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
 8001d68:	e001      	b.n	8001d6e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	feeefffc 	.word	0xfeeefffc

08001d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0e7      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b75      	ldr	r3, [pc, #468]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4970      	ldr	r1, [pc, #448]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b6e      	ldr	r3, [pc, #440]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0cf      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b66      	ldr	r3, [pc, #408]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d908      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4960      	ldr	r1, [pc, #384]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d04c      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	4b5a      	ldr	r3, [pc, #360]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d121      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0a6      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1e:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d115      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e09a      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e08e      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e46:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e086      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4943      	ldr	r1, [pc, #268]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e68:	f7ff f876 	bl	8000f58 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7ff f872 	bl	8000f58 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e06e      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 020c 	and.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1eb      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d010      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d208      	bcs.n	8001ec6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	492b      	ldr	r1, [pc, #172]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d210      	bcs.n	8001ef6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 0207 	bic.w	r2, r3, #7
 8001edc:	4923      	ldr	r1, [pc, #140]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e036      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	4918      	ldr	r1, [pc, #96]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4910      	ldr	r1, [pc, #64]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f34:	f000 f824 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	490b      	ldr	r1, [pc, #44]	; (8001f74 <HAL_RCC_ClockConfig+0x1f4>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1f8>)
 8001f52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1fc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe ffad 	bl	8000eb8 <HAL_InitTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f62:	7afb      	ldrb	r3, [r7, #11]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	080041ec 	.word	0x080041ec
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f98:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	d121      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d11e      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	e005      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	; (800208c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10d      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d102      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ffa:	61bb      	str	r3, [r7, #24]
 8001ffc:	e004      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d101      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_RCC_GetSysClockFreq+0x110>)
 8002006:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d134      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0xa6>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d003      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0xac>
 8002024:	e005      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_RCC_GetSysClockFreq+0x110>)
 8002028:	617b      	str	r3, [r7, #20]
      break;
 800202a:	e005      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800202c:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_RCC_GetSysClockFreq+0x110>)
 800202e:	617b      	str	r3, [r7, #20]
      break;
 8002030:	e002      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	617b      	str	r3, [r7, #20]
      break;
 8002036:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	3301      	adds	r3, #1
 8002044:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	fb03 f202 	mul.w	r2, r3, r2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <HAL_RCC_GetSysClockFreq+0x108>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	0e5b      	lsrs	r3, r3, #25
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	3301      	adds	r3, #1
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002078:	69bb      	ldr	r3, [r7, #24]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	08004204 	.word	0x08004204
 8002090:	00f42400 	.word	0x00f42400

08002094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b0:	f7ff fff0 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	080041fc 	.word	0x080041fc

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020dc:	f7ff ffda 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0adb      	lsrs	r3, r3, #11
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4904      	ldr	r1, [pc, #16]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	080041fc 	.word	0x080041fc

08002104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800211c:	f7ff f9b8 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 8002120:	6178      	str	r0, [r7, #20]
 8002122:	e014      	b.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a24      	ldr	r2, [pc, #144]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800213c:	f7ff f9a8 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 8002140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002154:	d10b      	bne.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d919      	bls.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2ba0      	cmp	r3, #160	; 0xa0
 8002160:	d902      	bls.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	e013      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e010      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d902      	bls.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002174:	2303      	movs	r3, #3
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e00a      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d102      	bne.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002180:	2302      	movs	r3, #2
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	e004      	b.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b70      	cmp	r3, #112	; 0x70
 800218a:	d101      	bne.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800218c:	2301      	movs	r3, #1
 800218e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 0207 	bic.w	r2, r3, #7
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40022000 	.word	0x40022000

080021c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021cc:	2300      	movs	r3, #0
 80021ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021d0:	2300      	movs	r3, #0
 80021d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d031      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021e8:	d01a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ee:	d814      	bhi.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021f8:	d10f      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002206:	e00c      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fa22 	bl	8002658 <RCCEx_PLLSAI1_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002218:	e003      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	74fb      	strb	r3, [r7, #19]
      break;
 800221e:	e000      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002228:	4b51      	ldr	r3, [pc, #324]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	494e      	ldr	r1, [pc, #312]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800223e:	e001      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002240:	7cfb      	ldrb	r3, [r7, #19]
 8002242:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 809e 	beq.w	800238e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002266:	2300      	movs	r3, #0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00d      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	4b40      	ldr	r3, [pc, #256]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	4a3f      	ldr	r2, [pc, #252]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002276:	6593      	str	r3, [r2, #88]	; 0x58
 8002278:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002284:	2301      	movs	r3, #1
 8002286:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002288:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a39      	ldr	r2, [pc, #228]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002294:	f7fe fe60 	bl	8000f58 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800229a:	e009      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7fe fe5c 	bl	8000f58 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d902      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	74fb      	strb	r3, [r7, #19]
        break;
 80022ae:	e005      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0ef      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d15a      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022c2:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01e      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d019      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022ea:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800230a:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d016      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fe1c 	bl	8000f58 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002322:	e00b      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7fe fe18 	bl	8000f58 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d902      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	74fb      	strb	r3, [r7, #19]
            break;
 800233a:	e006      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0ec      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	4904      	ldr	r1, [pc, #16]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002366:	e009      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
 800236c:	e006      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237c:	7c7b      	ldrb	r3, [r7, #17]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	4a8c      	ldr	r2, [pc, #560]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800239a:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f023 0203 	bic.w	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4983      	ldr	r1, [pc, #524]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 020c 	bic.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	497b      	ldr	r1, [pc, #492]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	4972      	ldr	r1, [pc, #456]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	496a      	ldr	r1, [pc, #424]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00a      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002422:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002428:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	4961      	ldr	r1, [pc, #388]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002444:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4959      	ldr	r1, [pc, #356]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4950      	ldr	r1, [pc, #320]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002488:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	4948      	ldr	r1, [pc, #288]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	493f      	ldr	r1, [pc, #252]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d028      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024da:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ea:	d106      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f6:	60d3      	str	r3, [r2, #12]
 80024f8:	e011      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002502:	d10c      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f8a4 	bl	8002658 <RCCEx_PLLSAI1_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800251a:	7cfb      	ldrb	r3, [r7, #19]
 800251c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d028      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002538:	491f      	ldr	r1, [pc, #124]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002548:	d106      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	e011      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002560:	d10c      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f875 	bl	8002658 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d02b      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a6:	d109      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	e014      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f843 	bl	8002658 <RCCEx_PLLSAI1_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01c      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	4916      	ldr	r1, [pc, #88]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260a:	d10c      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f820 	bl	8002658 <RCCEx_PLLSAI1_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	4904      	ldr	r1, [pc, #16]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002648:	7cbb      	ldrb	r3, [r7, #18]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002666:	4b74      	ldr	r3, [pc, #464]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d018      	beq.n	80026a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002672:	4b71      	ldr	r3, [pc, #452]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0203 	and.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d10d      	bne.n	800269e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
       ||
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800268a:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
       ||
 800269a:	429a      	cmp	r2, r3
 800269c:	d047      	beq.n	800272e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e044      	b.n	800272e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d018      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x86>
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d825      	bhi.n	80026fc <RCCEx_PLLSAI1_Config+0xa4>
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d002      	beq.n	80026ba <RCCEx_PLLSAI1_Config+0x62>
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d009      	beq.n	80026cc <RCCEx_PLLSAI1_Config+0x74>
 80026b8:	e020      	b.n	80026fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ba:	4b5f      	ldr	r3, [pc, #380]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11d      	bne.n	8002702 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ca:	e01a      	b.n	8002702 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e013      	b.n	8002706 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026de:	4b56      	ldr	r3, [pc, #344]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ea:	4b53      	ldr	r3, [pc, #332]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026fa:	e006      	b.n	800270a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002700:	e004      	b.n	800270c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002702:	bf00      	nop
 8002704:	e002      	b.n	800270c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002706:	bf00      	nop
 8002708:	e000      	b.n	800270c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800270a:	bf00      	nop
    }

    if(status == HAL_OK)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	430b      	orrs	r3, r1
 8002728:	4943      	ldr	r1, [pc, #268]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d17c      	bne.n	800282e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002734:	4b40      	ldr	r3, [pc, #256]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3f      	ldr	r2, [pc, #252]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800273e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fc0a 	bl	8000f58 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002746:	e009      	b.n	800275c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002748:	f7fe fc06 	bl	8000f58 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	73fb      	strb	r3, [r7, #15]
        break;
 800275a:	e005      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1ef      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d15f      	bne.n	800282e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d110      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002774:	4b30      	ldr	r3, [pc, #192]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800277c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	0211      	lsls	r1, r2, #8
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	06d2      	lsls	r2, r2, #27
 800278c:	430a      	orrs	r2, r1
 800278e:	492a      	ldr	r1, [pc, #168]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	610b      	str	r3, [r1, #16]
 8002794:	e027      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d112      	bne.n	80027c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6892      	ldr	r2, [r2, #8]
 80027ac:	0211      	lsls	r1, r2, #8
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6912      	ldr	r2, [r2, #16]
 80027b2:	0852      	lsrs	r2, r2, #1
 80027b4:	3a01      	subs	r2, #1
 80027b6:	0552      	lsls	r2, r2, #21
 80027b8:	430a      	orrs	r2, r1
 80027ba:	491f      	ldr	r1, [pc, #124]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	610b      	str	r3, [r1, #16]
 80027c0:	e011      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	0211      	lsls	r1, r2, #8
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6952      	ldr	r2, [r2, #20]
 80027d8:	0852      	lsrs	r2, r2, #1
 80027da:	3a01      	subs	r2, #1
 80027dc:	0652      	lsls	r2, r2, #25
 80027de:	430a      	orrs	r2, r1
 80027e0:	4915      	ldr	r1, [pc, #84]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fbb1 	bl	8000f58 <HAL_GetTick>
 80027f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027f8:	e009      	b.n	800280e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027fa:	f7fe fbad 	bl	8000f58 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d902      	bls.n	800280e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	73fb      	strb	r3, [r7, #15]
          break;
 800280c:	e005      	b.n	800281a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ef      	beq.n	80027fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e049      	b.n	80028e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe f9b0 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 fa74 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e049      	b.n	8002990 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f841 	bl	8002998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 fa1d 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0ff      	b.n	8002bca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b14      	cmp	r3, #20
 80029d6:	f200 80f0 	bhi.w	8002bba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a35 	.word	0x08002a35
 80029e4:	08002bbb 	.word	0x08002bbb
 80029e8:	08002bbb 	.word	0x08002bbb
 80029ec:	08002bbb 	.word	0x08002bbb
 80029f0:	08002a75 	.word	0x08002a75
 80029f4:	08002bbb 	.word	0x08002bbb
 80029f8:	08002bbb 	.word	0x08002bbb
 80029fc:	08002bbb 	.word	0x08002bbb
 8002a00:	08002ab7 	.word	0x08002ab7
 8002a04:	08002bbb 	.word	0x08002bbb
 8002a08:	08002bbb 	.word	0x08002bbb
 8002a0c:	08002bbb 	.word	0x08002bbb
 8002a10:	08002af7 	.word	0x08002af7
 8002a14:	08002bbb 	.word	0x08002bbb
 8002a18:	08002bbb 	.word	0x08002bbb
 8002a1c:	08002bbb 	.word	0x08002bbb
 8002a20:	08002b39 	.word	0x08002b39
 8002a24:	08002bbb 	.word	0x08002bbb
 8002a28:	08002bbb 	.word	0x08002bbb
 8002a2c:	08002bbb 	.word	0x08002bbb
 8002a30:	08002b79 	.word	0x08002b79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f9f8 	bl	8002e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0208 	orr.w	r2, r2, #8
 8002a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0204 	bic.w	r2, r2, #4
 8002a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6999      	ldr	r1, [r3, #24]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	619a      	str	r2, [r3, #24]
      break;
 8002a72:	e0a5      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fa54 	bl	8002f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6999      	ldr	r1, [r3, #24]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	021a      	lsls	r2, r3, #8
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	619a      	str	r2, [r3, #24]
      break;
 8002ab4:	e084      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 faad 	bl	800301c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0208 	orr.w	r2, r2, #8
 8002ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0204 	bic.w	r2, r2, #4
 8002ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69d9      	ldr	r1, [r3, #28]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	61da      	str	r2, [r3, #28]
      break;
 8002af4:	e064      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fb05 	bl	800310c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69d9      	ldr	r1, [r3, #28]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	61da      	str	r2, [r3, #28]
      break;
 8002b36:	e043      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fb42 	bl	80031c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0208 	orr.w	r2, r2, #8
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b76:	e023      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fb7a 	bl	8003278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	021a      	lsls	r2, r3, #8
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bb8:	e002      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8002bbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop

08002bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0b6      	b.n	8002d5e <HAL_TIM_ConfigClockSource+0x18a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c2c:	d03e      	beq.n	8002cac <HAL_TIM_ConfigClockSource+0xd8>
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	f200 8087 	bhi.w	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3a:	f000 8086 	beq.w	8002d4a <HAL_TIM_ConfigClockSource+0x176>
 8002c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c42:	d87f      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c44:	2b70      	cmp	r3, #112	; 0x70
 8002c46:	d01a      	beq.n	8002c7e <HAL_TIM_ConfigClockSource+0xaa>
 8002c48:	2b70      	cmp	r3, #112	; 0x70
 8002c4a:	d87b      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c4c:	2b60      	cmp	r3, #96	; 0x60
 8002c4e:	d050      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x11e>
 8002c50:	2b60      	cmp	r3, #96	; 0x60
 8002c52:	d877      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c54:	2b50      	cmp	r3, #80	; 0x50
 8002c56:	d03c      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0xfe>
 8002c58:	2b50      	cmp	r3, #80	; 0x50
 8002c5a:	d873      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d058      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0x13e>
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d86f      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c64:	2b30      	cmp	r3, #48	; 0x30
 8002c66:	d064      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15e>
 8002c68:	2b30      	cmp	r3, #48	; 0x30
 8002c6a:	d86b      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d060      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15e>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d867      	bhi.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d05c      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15e>
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d05a      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0x15e>
 8002c7c:	e062      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f000 fbc7 	bl	8003420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	609a      	str	r2, [r3, #8]
      break;
 8002caa:	e04f      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f000 fbb0 	bl	8003420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cce:	609a      	str	r2, [r3, #8]
      break;
 8002cd0:	e03c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f000 fb24 	bl	800332c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2150      	movs	r1, #80	; 0x50
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fb7d 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e02c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f000 fb43 	bl	800338a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2160      	movs	r1, #96	; 0x60
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fb6d 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8002d10:	e01c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f000 fb04 	bl	800332c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2140      	movs	r1, #64	; 0x40
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fb5d 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8002d30:	e00c      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 fb54 	bl	80033ea <TIM_ITRx_SetConfig>
      break;
 8002d42:	e003      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
      break;
 8002d48:	e000      	b.n	8002d4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	; (8002e24 <TIM_Base_SetConfig+0xbc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0x20>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d86:	d108      	bne.n	8002d9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <TIM_Base_SetConfig+0xbc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00b      	beq.n	8002dba <TIM_Base_SetConfig+0x52>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d007      	beq.n	8002dba <TIM_Base_SetConfig+0x52>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <TIM_Base_SetConfig+0xc0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d003      	beq.n	8002dba <TIM_Base_SetConfig+0x52>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <TIM_Base_SetConfig+0xc4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d108      	bne.n	8002dcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <TIM_Base_SetConfig+0xbc>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <TIM_Base_SetConfig+0xa0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <TIM_Base_SetConfig+0xc0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d003      	beq.n	8002e08 <TIM_Base_SetConfig+0xa0>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <TIM_Base_SetConfig+0xc4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	615a      	str	r2, [r3, #20]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400

08002e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0201 	bic.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 0302 	bic.w	r3, r3, #2
 8002e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a24      	ldr	r2, [pc, #144]	; (8002f1c <TIM_OC1_SetConfig+0xec>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_OC1_SetConfig+0x70>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <TIM_OC1_SetConfig+0xf0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC1_SetConfig+0x70>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <TIM_OC1_SetConfig+0xf4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0308 	bic.w	r3, r3, #8
 8002ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <TIM_OC1_SetConfig+0xec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d007      	beq.n	8002ed2 <TIM_OC1_SetConfig+0xa2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <TIM_OC1_SetConfig+0xf0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_OC1_SetConfig+0xa2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <TIM_OC1_SetConfig+0xf4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d111      	bne.n	8002ef6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400

08002f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0210 	bic.w	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f023 0320 	bic.w	r3, r3, #32
 8002f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a22      	ldr	r2, [pc, #136]	; (8003010 <TIM_OC2_SetConfig+0xe8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d10d      	bne.n	8002fa8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <TIM_OC2_SetConfig+0xe8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <TIM_OC2_SetConfig+0x98>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <TIM_OC2_SetConfig+0xec>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_OC2_SetConfig+0x98>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a17      	ldr	r2, [pc, #92]	; (8003018 <TIM_OC2_SetConfig+0xf0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d113      	bne.n	8002fe8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	621a      	str	r2, [r3, #32]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400

0800301c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	021b      	lsls	r3, r3, #8
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a21      	ldr	r2, [pc, #132]	; (8003100 <TIM_OC3_SetConfig+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10d      	bne.n	800309a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <TIM_OC3_SetConfig+0xe4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <TIM_OC3_SetConfig+0x96>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <TIM_OC3_SetConfig+0xe8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_OC3_SetConfig+0x96>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a16      	ldr	r2, [pc, #88]	; (8003108 <TIM_OC3_SetConfig+0xec>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d113      	bne.n	80030da <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400

0800310c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800315a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <TIM_OC4_SetConfig+0xb0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_OC4_SetConfig+0x74>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <TIM_OC4_SetConfig+0xb4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC4_SetConfig+0x74>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <TIM_OC4_SetConfig+0xb8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d109      	bne.n	8003194 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400

080031c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800320c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <TIM_OC5_SetConfig+0xa4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_OC5_SetConfig+0x6a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a12      	ldr	r2, [pc, #72]	; (8003270 <TIM_OC5_SetConfig+0xa8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_OC5_SetConfig+0x6a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a11      	ldr	r2, [pc, #68]	; (8003274 <TIM_OC5_SetConfig+0xac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d109      	bne.n	8003246 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400

08003278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_OC6_SetConfig+0xa8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_OC6_SetConfig+0x6c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <TIM_OC6_SetConfig+0xac>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_OC6_SetConfig+0x6c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <TIM_OC6_SetConfig+0xb0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d109      	bne.n	80032f8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	029b      	lsls	r3, r3, #10
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400

0800332c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f023 0201 	bic.w	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f023 030a 	bic.w	r3, r3, #10
 8003368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800338a:	b480      	push	{r7}
 800338c:	b087      	sub	sp, #28
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	031b      	lsls	r3, r3, #12
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	f043 0307 	orr.w	r3, r3, #7
 800340c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	609a      	str	r2, [r3, #8]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	021a      	lsls	r2, r3, #8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	431a      	orrs	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	609a      	str	r2, [r3, #8]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_TIMEx_PWMN_Start+0x24>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e022      	b.n	80034ca <HAL_TIMEx_PWMN_Start+0x6a>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d109      	bne.n	800349e <HAL_TIMEx_PWMN_Start+0x3e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	bf14      	ite	ne
 8003496:	2301      	movne	r3, #1
 8003498:	2300      	moveq	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e015      	b.n	80034ca <HAL_TIMEx_PWMN_Start+0x6a>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d109      	bne.n	80034b8 <HAL_TIMEx_PWMN_Start+0x58>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e008      	b.n	80034ca <HAL_TIMEx_PWMN_Start+0x6a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e05a      	b.n	8003588 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_TIMEx_PWMN_Start+0x82>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e0:	e013      	b.n	800350a <HAL_TIMEx_PWMN_Start+0xaa>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d104      	bne.n	80034f2 <HAL_TIMEx_PWMN_Start+0x92>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034f0:	e00b      	b.n	800350a <HAL_TIMEx_PWMN_Start+0xaa>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d104      	bne.n	8003502 <HAL_TIMEx_PWMN_Start+0xa2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003500:	e003      	b.n	800350a <HAL_TIMEx_PWMN_Start+0xaa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f920 	bl	8003758 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003526:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIMEx_PWMN_Start+0x130>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_TIMEx_PWMN_Start+0xe6>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d004      	beq.n	8003546 <HAL_TIMEx_PWMN_Start+0xe6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a14      	ldr	r2, [pc, #80]	; (8003594 <HAL_TIMEx_PWMN_Start+0x134>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d115      	bne.n	8003572 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_TIMEx_PWMN_Start+0x138>)
 800354e:	4013      	ands	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d015      	beq.n	8003584 <HAL_TIMEx_PWMN_Start+0x124>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355e:	d011      	beq.n	8003584 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	e008      	b.n	8003584 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e000      	b.n	8003586 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40014000 	.word	0x40014000
 8003598:	00010007 	.word	0x00010007

0800359c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e04f      	b.n	8003654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d004      	beq.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10c      	bne.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40014000 	.word	0x40014000

08003668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003680:	2302      	movs	r3, #2
 8003682:	e060      	b.n	8003746 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a14      	ldr	r2, [pc, #80]	; (8003754 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d115      	bne.n	8003734 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	051b      	lsls	r3, r3, #20
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40012c00 	.word	0x40012c00

08003758 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2204      	movs	r2, #4
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	43db      	mvns	r3, r3
 800377a:	401a      	ands	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e040      	b.n	8003836 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fa57 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2224      	movs	r2, #36	; 0x24
 80037ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8c1 	bl	8003968 <UART_SetConfig>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e022      	b.n	8003836 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb0f 	bl	8003e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800380c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800381c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fb96 	bl	8003f60 <UART_CheckIdleState>
 8003834:	4603      	mov	r3, r0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b08a      	sub	sp, #40	; 0x28
 8003842:	af02      	add	r7, sp, #8
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003852:	2b20      	cmp	r3, #32
 8003854:	f040 8082 	bne.w	800395c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_UART_Transmit+0x26>
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e07a      	b.n	800395e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_UART_Transmit+0x38>
 8003872:	2302      	movs	r3, #2
 8003874:	e073      	b.n	800395e <HAL_UART_Transmit+0x120>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2221      	movs	r2, #33	; 0x21
 800388a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388c:	f7fd fb64 	bl	8000f58 <HAL_GetTick>
 8003890:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	88fa      	ldrh	r2, [r7, #6]
 8003896:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88fa      	ldrh	r2, [r7, #6]
 800389e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038aa:	d108      	bne.n	80038be <HAL_UART_Transmit+0x80>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e003      	b.n	80038c6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038ce:	e02d      	b.n	800392c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	2180      	movs	r1, #128	; 0x80
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fb89 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e039      	b.n	800395e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fc:	b292      	uxth	r2, r2
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	3302      	adds	r3, #2
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e008      	b.n	800391a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	b292      	uxth	r2, r2
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3301      	adds	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1cb      	bne.n	80038d0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fb55 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e005      	b.n	800395e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800396c:	b08a      	sub	sp, #40	; 0x28
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	4313      	orrs	r3, r2
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b9e      	ldr	r3, [pc, #632]	; (8003c10 <UART_SetConfig+0x2a8>)
 8003998:	4013      	ands	r3, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a93      	ldr	r2, [pc, #588]	; (8003c14 <UART_SetConfig+0x2ac>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	4313      	orrs	r3, r2
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a8a      	ldr	r2, [pc, #552]	; (8003c18 <UART_SetConfig+0x2b0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d126      	bne.n	8003a40 <UART_SetConfig+0xd8>
 80039f2:	4b8a      	ldr	r3, [pc, #552]	; (8003c1c <UART_SetConfig+0x2b4>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d81b      	bhi.n	8003a38 <UART_SetConfig+0xd0>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <UART_SetConfig+0xa0>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a29 	.word	0x08003a29
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e0ab      	b.n	8003b78 <UART_SetConfig+0x210>
 8003a20:	2302      	movs	r3, #2
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e0a7      	b.n	8003b78 <UART_SetConfig+0x210>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e0a3      	b.n	8003b78 <UART_SetConfig+0x210>
 8003a30:	2308      	movs	r3, #8
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e09f      	b.n	8003b78 <UART_SetConfig+0x210>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e09b      	b.n	8003b78 <UART_SetConfig+0x210>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a76      	ldr	r2, [pc, #472]	; (8003c20 <UART_SetConfig+0x2b8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d138      	bne.n	8003abc <UART_SetConfig+0x154>
 8003a4a:	4b74      	ldr	r3, [pc, #464]	; (8003c1c <UART_SetConfig+0x2b4>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d82d      	bhi.n	8003ab4 <UART_SetConfig+0x14c>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <UART_SetConfig+0xf8>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003ab5 	.word	0x08003ab5
 8003a68:	08003ab5 	.word	0x08003ab5
 8003a6c:	08003ab5 	.word	0x08003ab5
 8003a70:	08003aa5 	.word	0x08003aa5
 8003a74:	08003ab5 	.word	0x08003ab5
 8003a78:	08003ab5 	.word	0x08003ab5
 8003a7c:	08003ab5 	.word	0x08003ab5
 8003a80:	08003a9d 	.word	0x08003a9d
 8003a84:	08003ab5 	.word	0x08003ab5
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003aad 	.word	0x08003aad
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e06d      	b.n	8003b78 <UART_SetConfig+0x210>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e069      	b.n	8003b78 <UART_SetConfig+0x210>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e065      	b.n	8003b78 <UART_SetConfig+0x210>
 8003aac:	2308      	movs	r3, #8
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e061      	b.n	8003b78 <UART_SetConfig+0x210>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e05d      	b.n	8003b78 <UART_SetConfig+0x210>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <UART_SetConfig+0x2bc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d125      	bne.n	8003b12 <UART_SetConfig+0x1aa>
 8003ac6:	4b55      	ldr	r3, [pc, #340]	; (8003c1c <UART_SetConfig+0x2b4>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d016      	beq.n	8003b02 <UART_SetConfig+0x19a>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d818      	bhi.n	8003b0a <UART_SetConfig+0x1a2>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d00a      	beq.n	8003af2 <UART_SetConfig+0x18a>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d814      	bhi.n	8003b0a <UART_SetConfig+0x1a2>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <UART_SetConfig+0x182>
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d008      	beq.n	8003afa <UART_SetConfig+0x192>
 8003ae8:	e00f      	b.n	8003b0a <UART_SetConfig+0x1a2>
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af0:	e042      	b.n	8003b78 <UART_SetConfig+0x210>
 8003af2:	2302      	movs	r3, #2
 8003af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af8:	e03e      	b.n	8003b78 <UART_SetConfig+0x210>
 8003afa:	2304      	movs	r3, #4
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b00:	e03a      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b02:	2308      	movs	r3, #8
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b08:	e036      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b10:	e032      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a3f      	ldr	r2, [pc, #252]	; (8003c14 <UART_SetConfig+0x2ac>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d12a      	bne.n	8003b72 <UART_SetConfig+0x20a>
 8003b1c:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <UART_SetConfig+0x2b4>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b2a:	d01a      	beq.n	8003b62 <UART_SetConfig+0x1fa>
 8003b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b30:	d81b      	bhi.n	8003b6a <UART_SetConfig+0x202>
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b36:	d00c      	beq.n	8003b52 <UART_SetConfig+0x1ea>
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3c:	d815      	bhi.n	8003b6a <UART_SetConfig+0x202>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <UART_SetConfig+0x1e2>
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d008      	beq.n	8003b5a <UART_SetConfig+0x1f2>
 8003b48:	e00f      	b.n	8003b6a <UART_SetConfig+0x202>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b50:	e012      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b52:	2302      	movs	r3, #2
 8003b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b58:	e00e      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b60:	e00a      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b62:	2308      	movs	r3, #8
 8003b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b68:	e006      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b70:	e002      	b.n	8003b78 <UART_SetConfig+0x210>
 8003b72:	2310      	movs	r3, #16
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <UART_SetConfig+0x2ac>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f040 808a 	bne.w	8003c98 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d824      	bhi.n	8003bd6 <UART_SetConfig+0x26e>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x22c>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bd7 	.word	0x08003bd7
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bd7 	.word	0x08003bd7
 8003ba4:	08003bc7 	.word	0x08003bc7
 8003ba8:	08003bd7 	.word	0x08003bd7
 8003bac:	08003bd7 	.word	0x08003bd7
 8003bb0:	08003bd7 	.word	0x08003bd7
 8003bb4:	08003bcf 	.word	0x08003bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7fe fa78 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003bbc:	61f8      	str	r0, [r7, #28]
        break;
 8003bbe:	e010      	b.n	8003be2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <UART_SetConfig+0x2c0>)
 8003bc2:	61fb      	str	r3, [r7, #28]
        break;
 8003bc4:	e00d      	b.n	8003be2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7fe f9db 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8003bca:	61f8      	str	r0, [r7, #28]
        break;
 8003bcc:	e009      	b.n	8003be2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	61fb      	str	r3, [r7, #28]
        break;
 8003bd4:	e005      	b.n	8003be2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8109 	beq.w	8003dfc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d305      	bcc.n	8003c06 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d912      	bls.n	8003c2c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c0c:	e0f6      	b.n	8003dfc <UART_SetConfig+0x494>
 8003c0e:	bf00      	nop
 8003c10:	efff69f3 	.word	0xefff69f3
 8003c14:	40008000 	.word	0x40008000
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40004400 	.word	0x40004400
 8003c24:	40004800 	.word	0x40004800
 8003c28:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	461c      	mov	r4, r3
 8003c32:	4615      	mov	r5, r2
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	022b      	lsls	r3, r5, #8
 8003c3e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c42:	0222      	lsls	r2, r4, #8
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	6849      	ldr	r1, [r1, #4]
 8003c48:	0849      	lsrs	r1, r1, #1
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	4688      	mov	r8, r1
 8003c4e:	4681      	mov	r9, r0
 8003c50:	eb12 0a08 	adds.w	sl, r2, r8
 8003c54:	eb43 0b09 	adc.w	fp, r3, r9
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c66:	4650      	mov	r0, sl
 8003c68:	4659      	mov	r1, fp
 8003c6a:	f7fc faaf 	bl	80001cc <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4613      	mov	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7c:	d308      	bcc.n	8003c90 <UART_SetConfig+0x328>
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c84:	d204      	bcs.n	8003c90 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	e0b5      	b.n	8003dfc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c96:	e0b1      	b.n	8003dfc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca0:	d15d      	bne.n	8003d5e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003ca2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d827      	bhi.n	8003cfa <UART_SetConfig+0x392>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <UART_SetConfig+0x348>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003cdd 	.word	0x08003cdd
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003cfb 	.word	0x08003cfb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003cfb 	.word	0x08003cfb
 8003ccc:	08003cfb 	.word	0x08003cfb
 8003cd0:	08003cf3 	.word	0x08003cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7fe f9ea 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003cd8:	61f8      	str	r0, [r7, #28]
        break;
 8003cda:	e014      	b.n	8003d06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cdc:	f7fe f9fc 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8003ce0:	61f8      	str	r0, [r7, #28]
        break;
 8003ce2:	e010      	b.n	8003d06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce4:	4b4c      	ldr	r3, [pc, #304]	; (8003e18 <UART_SetConfig+0x4b0>)
 8003ce6:	61fb      	str	r3, [r7, #28]
        break;
 8003ce8:	e00d      	b.n	8003d06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cea:	f7fe f949 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8003cee:	61f8      	str	r0, [r7, #28]
        break;
 8003cf0:	e009      	b.n	8003d06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf6:	61fb      	str	r3, [r7, #28]
        break;
 8003cf8:	e005      	b.n	8003d06 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d077      	beq.n	8003dfc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	005a      	lsls	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	441a      	add	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d916      	bls.n	8003d56 <UART_SetConfig+0x3ee>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d212      	bcs.n	8003d56 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f023 030f 	bic.w	r3, r3, #15
 8003d38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	8afb      	ldrh	r3, [r7, #22]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	8afa      	ldrh	r2, [r7, #22]
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	e052      	b.n	8003dfc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d5c:	e04e      	b.n	8003dfc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d827      	bhi.n	8003db6 <UART_SetConfig+0x44e>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <UART_SetConfig+0x404>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003d99 	.word	0x08003d99
 8003d74:	08003da1 	.word	0x08003da1
 8003d78:	08003db7 	.word	0x08003db7
 8003d7c:	08003da7 	.word	0x08003da7
 8003d80:	08003db7 	.word	0x08003db7
 8003d84:	08003db7 	.word	0x08003db7
 8003d88:	08003db7 	.word	0x08003db7
 8003d8c:	08003daf 	.word	0x08003daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe f98c 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
        break;
 8003d96:	e014      	b.n	8003dc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d98:	f7fe f99e 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	61f8      	str	r0, [r7, #28]
        break;
 8003d9e:	e010      	b.n	8003dc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <UART_SetConfig+0x4b0>)
 8003da2:	61fb      	str	r3, [r7, #28]
        break;
 8003da4:	e00d      	b.n	8003dc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003da6:	f7fe f8eb 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8003daa:	61f8      	str	r0, [r7, #28]
        break;
 8003dac:	e009      	b.n	8003dc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	61fb      	str	r3, [r7, #28]
        break;
 8003db4:	e005      	b.n	8003dc2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dc0:	bf00      	nop
    }

    if (pclk != 0U)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d019      	beq.n	8003dfc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	085a      	lsrs	r2, r3, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d909      	bls.n	8003df6 <UART_SetConfig+0x48e>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de8:	d205      	bcs.n	8003df6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	e002      	b.n	8003dfc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e16:	bf00      	nop
 8003e18:	00f42400 	.word	0x00f42400

08003e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1a:	d10a      	bne.n	8003f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f70:	f7fc fff2 	bl	8000f58 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d10e      	bne.n	8003fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f82d 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e023      	b.n	8003fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d10e      	bne.n	8003fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f817 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e00d      	b.n	8003fea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b09c      	sub	sp, #112	; 0x70
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004002:	e0a5      	b.n	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	f000 80a1 	beq.w	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fc ffa3 	bl	8000f58 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <UART_WaitOnFlagUntilTimeout+0x32>
 800401e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004020:	2b00      	cmp	r3, #0
 8004022:	d13e      	bne.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004038:	667b      	str	r3, [r7, #100]	; 0x64
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004044:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e6      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3308      	adds	r3, #8
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	663b      	str	r3, [r7, #96]	; 0x60
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004076:	64ba      	str	r2, [r7, #72]	; 0x48
 8004078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800407c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e5      	bne.n	8004056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e067      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d04f      	beq.n	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040be:	d147      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e6      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	613b      	str	r3, [r7, #16]
   return(result);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	66bb      	str	r3, [r7, #104]	; 0x68
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800411c:	623a      	str	r2, [r7, #32]
 800411e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	69f9      	ldr	r1, [r7, #28]
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	61bb      	str	r3, [r7, #24]
   return(result);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e010      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	429a      	cmp	r2, r3
 800416c:	f43f af4a 	beq.w	8004004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3770      	adds	r7, #112	; 0x70
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4d0d      	ldr	r5, [pc, #52]	; (80041b4 <__libc_init_array+0x38>)
 8004180:	4c0d      	ldr	r4, [pc, #52]	; (80041b8 <__libc_init_array+0x3c>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2600      	movs	r6, #0
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	4d0b      	ldr	r5, [pc, #44]	; (80041bc <__libc_init_array+0x40>)
 800418e:	4c0c      	ldr	r4, [pc, #48]	; (80041c0 <__libc_init_array+0x44>)
 8004190:	f000 f820 	bl	80041d4 <_init>
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	2600      	movs	r6, #0
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	0800423c 	.word	0x0800423c
 80041b8:	0800423c 	.word	0x0800423c
 80041bc:	0800423c 	.word	0x0800423c
 80041c0:	08004240 	.word	0x08004240

080041c4 <memset>:
 80041c4:	4402      	add	r2, r0
 80041c6:	4603      	mov	r3, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d100      	bne.n	80041ce <memset+0xa>
 80041cc:	4770      	bx	lr
 80041ce:	f803 1b01 	strb.w	r1, [r3], #1
 80041d2:	e7f9      	b.n	80041c8 <memset+0x4>

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
