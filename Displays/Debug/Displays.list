
Displays.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000152c  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad4  08004ad4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004adc  08004adc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000004e4  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000564  20000564  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008184  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001652  00000000  00000000  00028234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000738  00000000  00000000  0002a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208f0  00000000  00000000  0002a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4d2  00000000  00000000  0004b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c305d  00000000  00000000  0005556a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001185c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002448  00000000  00000000  00118618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003590 	.word	0x08003590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08003590 	.word	0x08003590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b099      	sub	sp, #100	; 0x64
 8000578:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 feb7 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f8a5 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f95d 	bl	8000840 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000586:	f000 f8ff 	bl	8000788 <MX_I2C1_Init>
  MX_I2C2_Init();
 800058a:	f000 f92b 	bl	80007e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(hi2c1);
 800058e:	4c47      	ldr	r4, [pc, #284]	; (80006ac <main+0x138>)
 8000590:	4668      	mov	r0, sp
 8000592:	f104 0310 	add.w	r3, r4, #16
 8000596:	2244      	movs	r2, #68	; 0x44
 8000598:	4619      	mov	r1, r3
 800059a:	f002 fb83 	bl	8002ca4 <memcpy>
 800059e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005a2:	f000 f97b 	bl	800089c <SSD1306_Init>
  SSD1306_Init(hi2c2);
 80005a6:	4c42      	ldr	r4, [pc, #264]	; (80006b0 <main+0x13c>)
 80005a8:	4668      	mov	r0, sp
 80005aa:	f104 0310 	add.w	r3, r4, #16
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	4619      	mov	r1, r3
 80005b2:	f002 fb77 	bl	8002ca4 <memcpy>
 80005b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005ba:	f000 f96f 	bl	800089c <SSD1306_Init>
  uint16_t count = 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	82fb      	strh	r3, [r7, #22]
  uint16_t countLVL = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	82bb      	strh	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  SSD1306_Clear();
	  char One_print[5] = "";
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	2300      	movs	r3, #0
 80005cc:	743b      	strb	r3, [r7, #16]
	  char Two_print[5] = "";
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	2300      	movs	r3, #0
 80005d4:	723b      	strb	r3, [r7, #8]
	  	  SSD1306_GotoXY(35, 0);
 80005d6:	2100      	movs	r1, #0
 80005d8:	2023      	movs	r0, #35	; 0x23
 80005da:	f000 fbef 	bl	8000dbc <SSD1306_GotoXY>
	  	  SSD1306_Puts("SCORE", &Font_11x18, 1);
 80005de:	2201      	movs	r2, #1
 80005e0:	4934      	ldr	r1, [pc, #208]	; (80006b4 <main+0x140>)
 80005e2:	4835      	ldr	r0, [pc, #212]	; (80006b8 <main+0x144>)
 80005e4:	f000 fc80 	bl	8000ee8 <SSD1306_Puts>
	  	  sprintf(One_print, "%u", count);
 80005e8:	8afa      	ldrh	r2, [r7, #22]
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4933      	ldr	r1, [pc, #204]	; (80006bc <main+0x148>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fb6d 	bl	8002cd0 <siprintf>
			SSD1306_GotoXY(35, 35);
 80005f6:	2123      	movs	r1, #35	; 0x23
 80005f8:	2023      	movs	r0, #35	; 0x23
 80005fa:	f000 fbdf 	bl	8000dbc <SSD1306_GotoXY>
			SSD1306_Puts(One_print, &Font_11x18, 1);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2201      	movs	r2, #1
 8000604:	492b      	ldr	r1, [pc, #172]	; (80006b4 <main+0x140>)
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fc6e 	bl	8000ee8 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(hi2c1);
 800060c:	4c27      	ldr	r4, [pc, #156]	; (80006ac <main+0x138>)
 800060e:	4668      	mov	r0, sp
 8000610:	f104 0310 	add.w	r3, r4, #16
 8000614:	2244      	movs	r2, #68	; 0x44
 8000616:	4619      	mov	r1, r3
 8000618:	f002 fb44 	bl	8002ca4 <memcpy>
 800061c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000620:	f000 faf8 	bl	8000c14 <SSD1306_UpdateScreen>
	  	  count =  count == 65000 ? 1 : count + 1;
 8000624:	8afb      	ldrh	r3, [r7, #22]
 8000626:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800062a:	4293      	cmp	r3, r2
 800062c:	d003      	beq.n	8000636 <main+0xc2>
 800062e:	8afb      	ldrh	r3, [r7, #22]
 8000630:	3301      	adds	r3, #1
 8000632:	b29b      	uxth	r3, r3
 8000634:	e000      	b.n	8000638 <main+0xc4>
 8000636:	2301      	movs	r3, #1
 8000638:	82fb      	strh	r3, [r7, #22]
	  	  countLVL =  count % 100 == 0 ? countLVL + 1 : countLVL;
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <main+0x14c>)
 800063e:	fba2 1203 	umull	r1, r2, r2, r3
 8000642:	0952      	lsrs	r2, r2, #5
 8000644:	2164      	movs	r1, #100	; 0x64
 8000646:	fb01 f202 	mul.w	r2, r1, r2
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	b29b      	uxth	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <main+0xe6>
 8000652:	8abb      	ldrh	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	b29b      	uxth	r3, r3
 8000658:	e000      	b.n	800065c <main+0xe8>
 800065a:	8abb      	ldrh	r3, [r7, #20]
 800065c:	82bb      	strh	r3, [r7, #20]


//
	  	  SSD1306_GotoXY(35, 0);
 800065e:	2100      	movs	r1, #0
 8000660:	2023      	movs	r0, #35	; 0x23
 8000662:	f000 fbab 	bl	8000dbc <SSD1306_GotoXY>
	  	  SSD1306_Puts("SCORE LVL", &Font_7x10, 1);
 8000666:	2201      	movs	r2, #1
 8000668:	4916      	ldr	r1, [pc, #88]	; (80006c4 <main+0x150>)
 800066a:	4817      	ldr	r0, [pc, #92]	; (80006c8 <main+0x154>)
 800066c:	f000 fc3c 	bl	8000ee8 <SSD1306_Puts>
	  	  sprintf(Two_print, "%u", countLVL);
 8000670:	8aba      	ldrh	r2, [r7, #20]
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4911      	ldr	r1, [pc, #68]	; (80006bc <main+0x148>)
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fb2a 	bl	8002cd0 <siprintf>
	  	  SSD1306_GotoXY(35, 35);
 800067c:	2123      	movs	r1, #35	; 0x23
 800067e:	2023      	movs	r0, #35	; 0x23
 8000680:	f000 fb9c 	bl	8000dbc <SSD1306_GotoXY>
 	  	  SSD1306_Puts(Two_print, &Font_11x18, 1);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2201      	movs	r2, #1
 8000688:	490a      	ldr	r1, [pc, #40]	; (80006b4 <main+0x140>)
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fc2c 	bl	8000ee8 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(hi2c2);
 8000690:	4c07      	ldr	r4, [pc, #28]	; (80006b0 <main+0x13c>)
 8000692:	4668      	mov	r0, sp
 8000694:	f104 0310 	add.w	r3, r4, #16
 8000698:	2244      	movs	r2, #68	; 0x44
 800069a:	4619      	mov	r1, r3
 800069c:	f002 fb02 	bl	8002ca4 <memcpy>
 80006a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006a4:	f000 fab6 	bl	8000c14 <SSD1306_UpdateScreen>
  {
 80006a8:	e78d      	b.n	80005c6 <main+0x52>
 80006aa:	bf00      	nop
 80006ac:	2000009c 	.word	0x2000009c
 80006b0:	200000f0 	.word	0x200000f0
 80006b4:	20000008 	.word	0x20000008
 80006b8:	080035a8 	.word	0x080035a8
 80006bc:	080035b0 	.word	0x080035b0
 80006c0:	51eb851f 	.word	0x51eb851f
 80006c4:	20000000 	.word	0x20000000
 80006c8:	080035b4 	.word	0x080035b4

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2230      	movs	r2, #48	; 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 faf0 	bl	8002cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <SystemClock_Config+0xb4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xb4>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xb4>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <SystemClock_Config+0xb8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <SystemClock_Config+0xb8>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <SystemClock_Config+0xb8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fe43 	bl	80023c8 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000748:	f000 f8a2 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f8a6 	bl	80028b8 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000772:	f000 f88d 	bl	8000890 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x50>)
 800078e:	4a13      	ldr	r2, [pc, #76]	; (80007dc <MX_I2C1_Init+0x54>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C1_Init+0x50>)
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x58>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_I2C1_Init+0x50>)
 80007a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_I2C1_Init+0x50>)
 80007c6:	f001 f885 	bl	80018d4 <HAL_I2C_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d0:	f000 f85e 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000009c 	.word	0x2000009c
 80007dc:	40005400 	.word	0x40005400
 80007e0:	00061a80 	.word	0x00061a80

080007e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2C2_Init+0x50>)
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_I2C2_Init+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_I2C2_Init+0x50>)
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_I2C2_Init+0x58>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_I2C2_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_I2C2_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_I2C2_Init+0x50>)
 8000802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000806:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_I2C2_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_I2C2_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_I2C2_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_I2C2_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_I2C2_Init+0x50>)
 8000822:	f001 f857 	bl	80018d4 <HAL_I2C_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 f830 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000f0 	.word	0x200000f0
 8000838:	40005800 	.word	0x40005800
 800083c:	00061a80 	.word	0x00061a80

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_GPIO_Init+0x4c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <MX_GPIO_Init+0x4c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_GPIO_Init+0x4c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_GPIO_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <MX_GPIO_Init+0x4c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_GPIO_Init+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <SSD1306_Init>:





uint8_t SSD1306_Init(I2C_HandleTypeDef hi2c) {
 800089c:	b084      	sub	sp, #16
 800089e:	b580      	push	{r7, lr}
 80008a0:	b096      	sub	sp, #88	; 0x58
 80008a2:	af14      	add	r7, sp, #80	; 0x50
 80008a4:	f107 0c10 	add.w	ip, r7, #16
 80008a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	/* Init I2C */
	ssd1306_I2C_Init();
 80008ac:	f000 fb42 	bl	8000f34 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008b0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008b4:	2201      	movs	r2, #1
 80008b6:	2178      	movs	r1, #120	; 0x78
 80008b8:	f107 0010 	add.w	r0, r7, #16
 80008bc:	f001 fa4c 	bl	8001d58 <HAL_I2C_IsDeviceReady>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SSD1306_Init+0x2e>
		/* Return false */
		return 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e19b      	b.n	8000c02 <SSD1306_Init+0x366>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008ca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008d0:	e002      	b.n	80008d8 <SSD1306_Init+0x3c>
		p--;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f9      	bne.n	80008d2 <SSD1306_Init+0x36>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE, hi2c); //display off
 80008de:	4668      	mov	r0, sp
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2250      	movs	r2, #80	; 0x50
 80008e6:	4619      	mov	r1, r3
 80008e8:	f002 f9dc 	bl	8002ca4 <memcpy>
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	22ae      	movs	r2, #174	; 0xae
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	; 0x78
 80008f4:	f000 fb99 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20, hi2c); //Set Memory Addressing Mode
 80008f8:	4668      	mov	r0, sp
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	2250      	movs	r2, #80	; 0x50
 8000900:	4619      	mov	r1, r3
 8000902:	f002 f9cf 	bl	8002ca4 <memcpy>
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	2078      	movs	r0, #120	; 0x78
 800090e:	f000 fb8c 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10, hi2c); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000912:	4668      	mov	r0, sp
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2250      	movs	r2, #80	; 0x50
 800091a:	4619      	mov	r1, r3
 800091c:	f002 f9c2 	bl	8002ca4 <memcpy>
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	2210      	movs	r2, #16
 8000924:	2100      	movs	r1, #0
 8000926:	2078      	movs	r0, #120	; 0x78
 8000928:	f000 fb7f 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0, hi2c); //Set Page Start Address for Page Addressing Mode,0-7
 800092c:	4668      	mov	r0, sp
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	2250      	movs	r2, #80	; 0x50
 8000934:	4619      	mov	r1, r3
 8000936:	f002 f9b5 	bl	8002ca4 <memcpy>
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	22b0      	movs	r2, #176	; 0xb0
 800093e:	2100      	movs	r1, #0
 8000940:	2078      	movs	r0, #120	; 0x78
 8000942:	f000 fb72 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8, hi2c); //Set COM Output Scan Direction
 8000946:	4668      	mov	r0, sp
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2250      	movs	r2, #80	; 0x50
 800094e:	4619      	mov	r1, r3
 8000950:	f002 f9a8 	bl	8002ca4 <memcpy>
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	22c8      	movs	r2, #200	; 0xc8
 8000958:	2100      	movs	r1, #0
 800095a:	2078      	movs	r0, #120	; 0x78
 800095c:	f000 fb65 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00, hi2c); //---set low column address
 8000960:	4668      	mov	r0, sp
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2250      	movs	r2, #80	; 0x50
 8000968:	4619      	mov	r1, r3
 800096a:	f002 f99b 	bl	8002ca4 <memcpy>
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2078      	movs	r0, #120	; 0x78
 8000976:	f000 fb58 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10, hi2c); //---set high column address
 800097a:	4668      	mov	r0, sp
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2250      	movs	r2, #80	; 0x50
 8000982:	4619      	mov	r1, r3
 8000984:	f002 f98e 	bl	8002ca4 <memcpy>
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	2210      	movs	r2, #16
 800098c:	2100      	movs	r1, #0
 800098e:	2078      	movs	r0, #120	; 0x78
 8000990:	f000 fb4b 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40, hi2c); //--set start line address
 8000994:	4668      	mov	r0, sp
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2250      	movs	r2, #80	; 0x50
 800099c:	4619      	mov	r1, r3
 800099e:	f002 f981 	bl	8002ca4 <memcpy>
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	2240      	movs	r2, #64	; 0x40
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	; 0x78
 80009aa:	f000 fb3e 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81, hi2c); //--set contrast control register
 80009ae:	4668      	mov	r0, sp
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2250      	movs	r2, #80	; 0x50
 80009b6:	4619      	mov	r1, r3
 80009b8:	f002 f974 	bl	8002ca4 <memcpy>
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	2281      	movs	r2, #129	; 0x81
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 fb31 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF, hi2c);
 80009c8:	4668      	mov	r0, sp
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2250      	movs	r2, #80	; 0x50
 80009d0:	4619      	mov	r1, r3
 80009d2:	f002 f967 	bl	8002ca4 <memcpy>
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	22ff      	movs	r2, #255	; 0xff
 80009da:	2100      	movs	r1, #0
 80009dc:	2078      	movs	r0, #120	; 0x78
 80009de:	f000 fb24 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1, hi2c); //--set segment re-map 0 to 127
 80009e2:	4668      	mov	r0, sp
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2250      	movs	r2, #80	; 0x50
 80009ea:	4619      	mov	r1, r3
 80009ec:	f002 f95a 	bl	8002ca4 <memcpy>
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	22a1      	movs	r2, #161	; 0xa1
 80009f4:	2100      	movs	r1, #0
 80009f6:	2078      	movs	r0, #120	; 0x78
 80009f8:	f000 fb17 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6, hi2c); //--set normal display
 80009fc:	4668      	mov	r0, sp
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2250      	movs	r2, #80	; 0x50
 8000a04:	4619      	mov	r1, r3
 8000a06:	f002 f94d 	bl	8002ca4 <memcpy>
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	22a6      	movs	r2, #166	; 0xa6
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2078      	movs	r0, #120	; 0x78
 8000a12:	f000 fb0a 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8, hi2c); //--set multiplex ratio(1 to 64)
 8000a16:	4668      	mov	r0, sp
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2250      	movs	r2, #80	; 0x50
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f002 f940 	bl	8002ca4 <memcpy>
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	22a8      	movs	r2, #168	; 0xa8
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	; 0x78
 8000a2c:	f000 fafd 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F, hi2c); //
 8000a30:	4668      	mov	r0, sp
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2250      	movs	r2, #80	; 0x50
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f002 f933 	bl	8002ca4 <memcpy>
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	223f      	movs	r2, #63	; 0x3f
 8000a42:	2100      	movs	r1, #0
 8000a44:	2078      	movs	r0, #120	; 0x78
 8000a46:	f000 faf0 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4, hi2c); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a4a:	4668      	mov	r0, sp
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2250      	movs	r2, #80	; 0x50
 8000a52:	4619      	mov	r1, r3
 8000a54:	f002 f926 	bl	8002ca4 <memcpy>
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	22a4      	movs	r2, #164	; 0xa4
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2078      	movs	r0, #120	; 0x78
 8000a60:	f000 fae3 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3, hi2c); //-set display offset
 8000a64:	4668      	mov	r0, sp
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2250      	movs	r2, #80	; 0x50
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f002 f919 	bl	8002ca4 <memcpy>
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	22d3      	movs	r2, #211	; 0xd3
 8000a76:	2100      	movs	r1, #0
 8000a78:	2078      	movs	r0, #120	; 0x78
 8000a7a:	f000 fad6 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00, hi2c); //-not offset
 8000a7e:	4668      	mov	r0, sp
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2250      	movs	r2, #80	; 0x50
 8000a86:	4619      	mov	r1, r3
 8000a88:	f002 f90c 	bl	8002ca4 <memcpy>
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2078      	movs	r0, #120	; 0x78
 8000a94:	f000 fac9 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5, hi2c); //--set display clock divide ratio/oscillator frequency
 8000a98:	4668      	mov	r0, sp
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2250      	movs	r2, #80	; 0x50
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f002 f8ff 	bl	8002ca4 <memcpy>
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	22d5      	movs	r2, #213	; 0xd5
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2078      	movs	r0, #120	; 0x78
 8000aae:	f000 fabc 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0, hi2c); //--set divide ratio
 8000ab2:	4668      	mov	r0, sp
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2250      	movs	r2, #80	; 0x50
 8000aba:	4619      	mov	r1, r3
 8000abc:	f002 f8f2 	bl	8002ca4 <memcpy>
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	22f0      	movs	r2, #240	; 0xf0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2078      	movs	r0, #120	; 0x78
 8000ac8:	f000 faaf 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9, hi2c); //--set pre-charge period
 8000acc:	4668      	mov	r0, sp
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2250      	movs	r2, #80	; 0x50
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f002 f8e5 	bl	8002ca4 <memcpy>
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	22d9      	movs	r2, #217	; 0xd9
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2078      	movs	r0, #120	; 0x78
 8000ae2:	f000 faa2 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22, hi2c); //
 8000ae6:	4668      	mov	r0, sp
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2250      	movs	r2, #80	; 0x50
 8000aee:	4619      	mov	r1, r3
 8000af0:	f002 f8d8 	bl	8002ca4 <memcpy>
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	2222      	movs	r2, #34	; 0x22
 8000af8:	2100      	movs	r1, #0
 8000afa:	2078      	movs	r0, #120	; 0x78
 8000afc:	f000 fa95 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA, hi2c); //--set com pins hardware configuration
 8000b00:	4668      	mov	r0, sp
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2250      	movs	r2, #80	; 0x50
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f002 f8cb 	bl	8002ca4 <memcpy>
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	22da      	movs	r2, #218	; 0xda
 8000b12:	2100      	movs	r1, #0
 8000b14:	2078      	movs	r0, #120	; 0x78
 8000b16:	f000 fa88 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12, hi2c);
 8000b1a:	4668      	mov	r0, sp
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2250      	movs	r2, #80	; 0x50
 8000b22:	4619      	mov	r1, r3
 8000b24:	f002 f8be 	bl	8002ca4 <memcpy>
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	2212      	movs	r2, #18
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2078      	movs	r0, #120	; 0x78
 8000b30:	f000 fa7b 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB, hi2c); //--set vcomh
 8000b34:	4668      	mov	r0, sp
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2250      	movs	r2, #80	; 0x50
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f002 f8b1 	bl	8002ca4 <memcpy>
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	22db      	movs	r2, #219	; 0xdb
 8000b46:	2100      	movs	r1, #0
 8000b48:	2078      	movs	r0, #120	; 0x78
 8000b4a:	f000 fa6e 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20, hi2c); //0x20,0.77xVcc
 8000b4e:	4668      	mov	r0, sp
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2250      	movs	r2, #80	; 0x50
 8000b56:	4619      	mov	r1, r3
 8000b58:	f002 f8a4 	bl	8002ca4 <memcpy>
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	2220      	movs	r2, #32
 8000b60:	2100      	movs	r1, #0
 8000b62:	2078      	movs	r0, #120	; 0x78
 8000b64:	f000 fa61 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D, hi2c); //--set DC-DC enable
 8000b68:	4668      	mov	r0, sp
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2250      	movs	r2, #80	; 0x50
 8000b70:	4619      	mov	r1, r3
 8000b72:	f002 f897 	bl	8002ca4 <memcpy>
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	228d      	movs	r2, #141	; 0x8d
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2078      	movs	r0, #120	; 0x78
 8000b7e:	f000 fa54 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14, hi2c); //
 8000b82:	4668      	mov	r0, sp
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2250      	movs	r2, #80	; 0x50
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f002 f88a 	bl	8002ca4 <memcpy>
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	2214      	movs	r2, #20
 8000b94:	2100      	movs	r1, #0
 8000b96:	2078      	movs	r0, #120	; 0x78
 8000b98:	f000 fa47 	bl	800102a <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF, hi2c); //--turn on SSD1306 panel
 8000b9c:	4668      	mov	r0, sp
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2250      	movs	r2, #80	; 0x50
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f002 f87d 	bl	8002ca4 <memcpy>
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	22af      	movs	r2, #175	; 0xaf
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f000 fa3a 	bl	800102a <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL, hi2c);
 8000bb6:	4668      	mov	r0, sp
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2250      	movs	r2, #80	; 0x50
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f002 f870 	bl	8002ca4 <memcpy>
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	222e      	movs	r2, #46	; 0x2e
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2078      	movs	r0, #120	; 0x78
 8000bcc:	f000 fa2d 	bl	800102a <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f87b 	bl	8000ccc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(hi2c);
 8000bd6:	4668      	mov	r0, sp
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	2244      	movs	r2, #68	; 0x44
 8000bde:	4619      	mov	r1, r3
 8000be0:	f002 f860 	bl	8002ca4 <memcpy>
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bea:	f000 f813 	bl	8000c14 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <SSD1306_Init+0x374>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SSD1306_Init+0x374>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SSD1306_Init+0x374>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr
 8000c10:	20000544 	.word	0x20000544

08000c14 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(I2C_HandleTypeDef hi2c) {
 8000c14:	b084      	sub	sp, #16
 8000c16:	b590      	push	{r4, r7, lr}
 8000c18:	b099      	sub	sp, #100	; 0x64
 8000c1a:	af16      	add	r7, sp, #88	; 0x58
 8000c1c:	f107 0418 	add.w	r4, r7, #24
 8000c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	e03d      	b.n	8000ca6 <SSD1306_UpdateScreen+0x92>
		SSD1306_WRITECOMMAND(0xB0 + m, hi2c);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	3b50      	subs	r3, #80	; 0x50
 8000c2e:	b2dc      	uxtb	r4, r3
 8000c30:	4668      	mov	r0, sp
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	2250      	movs	r2, #80	; 0x50
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f002 f833 	bl	8002ca4 <memcpy>
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4622      	mov	r2, r4
 8000c42:	2100      	movs	r1, #0
 8000c44:	2078      	movs	r0, #120	; 0x78
 8000c46:	f000 f9f0 	bl	800102a <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00, hi2c);
 8000c4a:	4668      	mov	r0, sp
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	2250      	movs	r2, #80	; 0x50
 8000c52:	4619      	mov	r1, r3
 8000c54:	f002 f826 	bl	8002ca4 <memcpy>
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2078      	movs	r0, #120	; 0x78
 8000c60:	f000 f9e3 	bl	800102a <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10, hi2c);
 8000c64:	4668      	mov	r0, sp
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2250      	movs	r2, #80	; 0x50
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f002 f819 	bl	8002ca4 <memcpy>
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	2210      	movs	r2, #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	2078      	movs	r0, #120	; 0x78
 8000c7a:	f000 f9d6 	bl	800102a <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH, hi2c);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	01db      	lsls	r3, r3, #7
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <SSD1306_UpdateScreen+0xb4>)
 8000c84:	189c      	adds	r4, r3, r2
 8000c86:	466b      	mov	r3, sp
 8000c88:	f107 0118 	add.w	r1, r7, #24
 8000c8c:	2254      	movs	r2, #84	; 0x54
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 f808 	bl	8002ca4 <memcpy>
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	4622      	mov	r2, r4
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	2078      	movs	r0, #120	; 0x78
 8000c9c:	f000 f960 	bl	8000f60 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d9be      	bls.n	8000c2a <SSD1306_UpdateScreen+0x16>

	}
	memset(&SSD1306_Buffer, 0, sizeof(SSD1306_Buffer));
 8000cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <SSD1306_UpdateScreen+0xb4>)
 8000cb4:	f002 f804 	bl	8002cc0 <memset>
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000144 	.word	0x20000144

08000ccc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <SSD1306_Fill+0x14>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e000      	b.n	8000ce2 <SSD1306_Fill+0x16>
 8000ce0:	23ff      	movs	r3, #255	; 0xff
 8000ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <SSD1306_Fill+0x2c>)
 8000cea:	f001 ffe9 	bl	8002cc0 <memset>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000144 	.word	0x20000144

08000cfc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
 8000d06:	460b      	mov	r3, r1
 8000d08:	80bb      	strh	r3, [r7, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	2b7f      	cmp	r3, #127	; 0x7f
 8000d12:	d848      	bhi.n	8000da6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	2b3f      	cmp	r3, #63	; 0x3f
 8000d18:	d845      	bhi.n	8000da6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <SSD1306_DrawPixel+0xb8>)
 8000d1c:	791b      	ldrb	r3, [r3, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf0c      	ite	eq
 8000d28:	2301      	moveq	r3, #1
 8000d2a:	2300      	movne	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d11a      	bne.n	8000d6c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d36:	88fa      	ldrh	r2, [r7, #6]
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	b298      	uxth	r0, r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	01db      	lsls	r3, r3, #7
 8000d42:	4413      	add	r3, r2
 8000d44:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <SSD1306_DrawPixel+0xbc>)
 8000d46:	5cd3      	ldrb	r3, [r2, r3]
 8000d48:	b25a      	sxtb	r2, r3
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	2101      	movs	r1, #1
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b259      	sxtb	r1, r3
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	4603      	mov	r3, r0
 8000d60:	01db      	lsls	r3, r3, #7
 8000d62:	4413      	add	r3, r2
 8000d64:	b2c9      	uxtb	r1, r1
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <SSD1306_DrawPixel+0xbc>)
 8000d68:	54d1      	strb	r1, [r2, r3]
 8000d6a:	e01d      	b.n	8000da8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	b298      	uxth	r0, r3
 8000d74:	4603      	mov	r3, r0
 8000d76:	01db      	lsls	r3, r3, #7
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <SSD1306_DrawPixel+0xbc>)
 8000d7c:	5cd3      	ldrb	r3, [r2, r3]
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	88bb      	ldrh	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	4013      	ands	r3, r2
 8000d94:	b259      	sxtb	r1, r3
 8000d96:	88fa      	ldrh	r2, [r7, #6]
 8000d98:	4603      	mov	r3, r0
 8000d9a:	01db      	lsls	r3, r3, #7
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2c9      	uxtb	r1, r1
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SSD1306_DrawPixel+0xbc>)
 8000da2:	54d1      	strb	r1, [r2, r3]
 8000da4:	e000      	b.n	8000da8 <SSD1306_DrawPixel+0xac>
		return;
 8000da6:	bf00      	nop
	}
}
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000544 	.word	0x20000544
 8000db8:	20000144 	.word	0x20000144

08000dbc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460a      	mov	r2, r1
 8000dc6:	80fb      	strh	r3, [r7, #6]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000dcc:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SSD1306_GotoXY+0x28>)
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <SSD1306_GotoXY+0x28>)
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	8053      	strh	r3, [r2, #2]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	20000544 	.word	0x20000544

08000de8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000df8:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
	if (
 8000e04:	2b7f      	cmp	r3, #127	; 0x7f
 8000e06:	dc07      	bgt.n	8000e18 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e08:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000e0a:	885b      	ldrh	r3, [r3, #2]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	785b      	ldrb	r3, [r3, #1]
 8000e12:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e14:	2b3f      	cmp	r3, #63	; 0x3f
 8000e16:	dd01      	ble.n	8000e1c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e05e      	b.n	8000eda <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	e04b      	b.n	8000eba <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	3b20      	subs	r3, #32
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	7849      	ldrb	r1, [r1, #1]
 8000e2e:	fb01 f303 	mul.w	r3, r1, r3
 8000e32:	4619      	mov	r1, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	440b      	add	r3, r1
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	e030      	b.n	8000ea8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d010      	beq.n	8000e78 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000e58:	881a      	ldrh	r2, [r3, #0]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	b298      	uxth	r0, r3
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000e64:	885a      	ldrh	r2, [r3, #2]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	79ba      	ldrb	r2, [r7, #6]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff ff43 	bl	8000cfc <SSD1306_DrawPixel>
 8000e76:	e014      	b.n	8000ea2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000e7a:	881a      	ldrh	r2, [r3, #0]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	b298      	uxth	r0, r3
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000e86:	885a      	ldrh	r2, [r3, #2]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f7ff ff2d 	bl	8000cfc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d3c8      	bcc.n	8000e46 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d3ad      	bcc.n	8000e22 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000ec8:	881a      	ldrh	r2, [r3, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <SSD1306_Putc+0xfc>)
 8000ed6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000544 	.word	0x20000544

08000ee8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ef6:	e012      	b.n	8000f1e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff71 	bl	8000de8 <SSD1306_Putc>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d002      	beq.n	8000f18 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	e008      	b.n	8000f2a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1e8      	bne.n	8000ef8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	781b      	ldrb	r3, [r3, #0]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <ssd1306_I2C_Init+0x28>)
 8000f3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f3e:	e002      	b.n	8000f46 <ssd1306_I2C_Init+0x12>
		p--;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f9      	bne.n	8000f40 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--
	//MX_I2C1_Init();
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0003d090 	.word	0x0003d090

08000f60 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count, I2C_HandleTypeDef hi2c) {
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b0c7      	sub	sp, #284	; 0x11c
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4604      	mov	r4, r0
 8000f68:	4608      	mov	r0, r1
 8000f6a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f6e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f72:	600a      	str	r2, [r1, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f7a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f7e:	4622      	mov	r2, r4
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f86:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f96:	460a      	mov	r2, r1
 8000f98:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fa2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fa6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++) {
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fb4:	e015      	b.n	8000fe2 <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8000fb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fbe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fca:	3301      	adds	r3, #1
 8000fcc:	7811      	ldrb	r1, [r2, #0]
 8000fce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fd2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000fd6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++) {
 8000fd8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fe2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8df      	bhi.n	8000fb6 <ssd1306_I2C_WriteMulti+0x56>
}
HAL_I2C_Master_Transmit(&hi2c, address, dt, count+1, 10);
 8000ff6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ffa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b299      	uxth	r1, r3
 8001002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001006:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	200a      	movs	r0, #10
 8001016:	9000      	str	r0, [sp, #0]
 8001018:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800101c:	f000 fd9e 	bl	8001b5c <HAL_I2C_Master_Transmit>
}
 8001020:	bf00      	nop
 8001022:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}

0800102a <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data, I2C_HandleTypeDef hi2c) {
 800102a:	b082      	sub	sp, #8
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	460b      	mov	r3, r1
 800103a:	71bb      	strb	r3, [r7, #6]
 800103c:	4613      	mov	r3, r2
 800103e:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c, address, dt, 2, 10);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	b299      	uxth	r1, r3
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f107 001c 	add.w	r0, r7, #28
 8001054:	230a      	movs	r3, #10
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2302      	movs	r3, #2
 800105a:	f000 fd7f 	bl	8001b5c <HAL_I2C_Master_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001068:	b002      	add	sp, #8
 800106a:	4770      	bx	lr

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a32      	ldr	r2, [pc, #200]	; (80011a4 <HAL_I2C_MspInit+0xe8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12c      	bne.n	8001138 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fa:	23c0      	movs	r3, #192	; 0xc0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	2312      	movs	r3, #18
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110a:	2304      	movs	r3, #4
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4825      	ldr	r0, [pc, #148]	; (80011ac <HAL_I2C_MspInit+0xf0>)
 8001116:	f000 fa41 	bl	800159c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001136:	e031      	b.n	800119c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <HAL_I2C_MspInit+0xf4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12c      	bne.n	800119c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800115e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001170:	2304      	movs	r3, #4
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	480c      	ldr	r0, [pc, #48]	; (80011ac <HAL_I2C_MspInit+0xf0>)
 800117c:	f000 fa0e 	bl	800159c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 800118a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_I2C_MspInit+0xec>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	bf00      	nop
 800119e:	3730      	adds	r7, #48	; 0x30
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400
 80011b0:	40005800 	.word	0x40005800

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f8c6 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f001 fd0a 	bl	8002c50 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20020000 	.word	0x20020000
 8001268:	00000400 	.word	0x00000400
 800126c:	2000054c 	.word	0x2000054c
 8001270:	20000568 	.word	0x20000568

08001274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SystemInit+0x20>)
 800127a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <SystemInit+0x20>)
 8001280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800129e:	490e      	ldr	r1, [pc, #56]	; (80012d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
   adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012b4:	4c0b      	ldr	r4, [pc, #44]	; (80012e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c2:	f7ff ffd7 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c6:	f001 fcc9 	bl	8002c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ca:	f7ff f953 	bl	8000574 <main>
  bx  lr    
 80012ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012dc:	08004ae4 	.word	0x08004ae4
  ldr r2, =_sbss
 80012e0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012e4:	20000564 	.word	0x20000564

080012e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_Init+0x40>)
 80012f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <HAL_Init+0x40>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x40>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f000 f90d 	bl	8001534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	200f      	movs	r0, #15
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fea4 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f917 	bl	8001582 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f8ed 	bl	800154a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000010 	.word	0x20000010
 8001388:	20000018 	.word	0x20000018
 800138c:	20000014 	.word	0x20000014

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000018 	.word	0x20000018
 80013b4:	20000550 	.word	0x20000550

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000550 	.word	0x20000550

080013d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <__NVIC_SetPriorityGrouping+0x44>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	60d3      	str	r3, [r2, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <__NVIC_GetPriorityGrouping+0x18>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 0307 	and.w	r3, r3, #7
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001500:	d301      	bcc.n	8001506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001502:	2301      	movs	r3, #1
 8001504:	e00f      	b.n	8001526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <SysTick_Config+0x40>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150e:	210f      	movs	r1, #15
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f7ff ff8e 	bl	8001434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <SysTick_Config+0x40>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151e:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x40>)
 8001520:	2207      	movs	r2, #7
 8001522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff47 	bl	80013d0 <__NVIC_SetPriorityGrouping>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff5c 	bl	8001418 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff8e 	bl	8001488 <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5d 	bl	8001434 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffb0 	bl	80014f0 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	e16b      	b.n	8001890 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b8:	2201      	movs	r2, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 815a 	bne.w	800188a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d005      	beq.n	80015ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d130      	bne.n	8001650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	68da      	ldr	r2, [r3, #12]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b03      	cmp	r3, #3
 800165a:	d017      	beq.n	800168c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d123      	bne.n	80016e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	08da      	lsrs	r2, r3, #3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	220f      	movs	r2, #15
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	08da      	lsrs	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3208      	adds	r2, #8
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0203 	and.w	r2, r3, #3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80b4 	beq.w	800188a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b60      	ldr	r3, [pc, #384]	; (80018a8 <HAL_GPIO_Init+0x30c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a5f      	ldr	r2, [pc, #380]	; (80018a8 <HAL_GPIO_Init+0x30c>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_GPIO_Init+0x30c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173e:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <HAL_GPIO_Init+0x310>)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3302      	adds	r3, #2
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	220f      	movs	r2, #15
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_GPIO_Init+0x314>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d02b      	beq.n	80017c2 <HAL_GPIO_Init+0x226>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a51      	ldr	r2, [pc, #324]	; (80018b4 <HAL_GPIO_Init+0x318>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d025      	beq.n	80017be <HAL_GPIO_Init+0x222>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a50      	ldr	r2, [pc, #320]	; (80018b8 <HAL_GPIO_Init+0x31c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01f      	beq.n	80017ba <HAL_GPIO_Init+0x21e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4f      	ldr	r2, [pc, #316]	; (80018bc <HAL_GPIO_Init+0x320>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_Init+0x21a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4e      	ldr	r2, [pc, #312]	; (80018c0 <HAL_GPIO_Init+0x324>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x216>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <HAL_GPIO_Init+0x328>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x212>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4c      	ldr	r2, [pc, #304]	; (80018c8 <HAL_GPIO_Init+0x32c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x20e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <HAL_GPIO_Init+0x330>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x20a>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e00e      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017a6:	2308      	movs	r3, #8
 80017a8:	e00c      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017aa:	2306      	movs	r3, #6
 80017ac:	e00a      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x228>
 80017c2:	2300      	movs	r3, #0
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d4:	4935      	ldr	r1, [pc, #212]	; (80018ac <HAL_GPIO_Init+0x310>)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <HAL_GPIO_Init+0x334>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001806:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_GPIO_Init+0x334>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800185a:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_GPIO_Init+0x334>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <HAL_GPIO_Init+0x334>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	f67f ae90 	bls.w	80015b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40013c00 	.word	0x40013c00

080018d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e12b      	b.n	8001b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fbde 	bl	80010bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2224      	movs	r2, #36	; 0x24
 8001904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001938:	f001 f976 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4a81      	ldr	r2, [pc, #516]	; (8001b48 <HAL_I2C_Init+0x274>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d807      	bhi.n	8001958 <HAL_I2C_Init+0x84>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4a80      	ldr	r2, [pc, #512]	; (8001b4c <HAL_I2C_Init+0x278>)
 800194c:	4293      	cmp	r3, r2
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e006      	b.n	8001966 <HAL_I2C_Init+0x92>
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a7d      	ldr	r2, [pc, #500]	; (8001b50 <HAL_I2C_Init+0x27c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	bf94      	ite	ls
 8001960:	2301      	movls	r3, #1
 8001962:	2300      	movhi	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0e7      	b.n	8001b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4a78      	ldr	r2, [pc, #480]	; (8001b54 <HAL_I2C_Init+0x280>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0c9b      	lsrs	r3, r3, #18
 8001978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <HAL_I2C_Init+0x274>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d802      	bhi.n	80019a8 <HAL_I2C_Init+0xd4>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	e009      	b.n	80019bc <HAL_I2C_Init+0xe8>
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	4a69      	ldr	r2, [pc, #420]	; (8001b58 <HAL_I2C_Init+0x284>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	3301      	adds	r3, #1
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	495c      	ldr	r1, [pc, #368]	; (8001b48 <HAL_I2C_Init+0x274>)
 80019d8:	428b      	cmp	r3, r1
 80019da:	d819      	bhi.n	8001a10 <HAL_I2C_Init+0x13c>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e59      	subs	r1, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ea:	1c59      	adds	r1, r3, #1
 80019ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019f0:	400b      	ands	r3, r1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00a      	beq.n	8001a0c <HAL_I2C_Init+0x138>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e59      	subs	r1, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a04:	3301      	adds	r3, #1
 8001a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0a:	e051      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	e04f      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d111      	bne.n	8001a3c <HAL_I2C_Init+0x168>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1e58      	subs	r0, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	440b      	add	r3, r1
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e012      	b.n	8001a62 <HAL_I2C_Init+0x18e>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	0099      	lsls	r1, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_Init+0x196>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e022      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10e      	bne.n	8001a90 <HAL_I2C_Init+0x1bc>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1e58      	subs	r0, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	440b      	add	r3, r1
 8001a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a84:	3301      	adds	r3, #1
 8001a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8e:	e00f      	b.n	8001ab0 <HAL_I2C_Init+0x1dc>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1e58      	subs	r0, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	0099      	lsls	r1, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	6809      	ldr	r1, [r1, #0]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6911      	ldr	r1, [r2, #16]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68d2      	ldr	r2, [r2, #12]
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	000186a0 	.word	0x000186a0
 8001b4c:	001e847f 	.word	0x001e847f
 8001b50:	003d08ff 	.word	0x003d08ff
 8001b54:	431bde83 	.word	0x431bde83
 8001b58:	10624dd3 	.word	0x10624dd3

08001b5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	461a      	mov	r2, r3
 8001b68:	460b      	mov	r3, r1
 8001b6a:	817b      	strh	r3, [r7, #10]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff fc22 	bl	80013b8 <HAL_GetTick>
 8001b74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	f040 80e0 	bne.w	8001d44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2319      	movs	r3, #25
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4970      	ldr	r1, [pc, #448]	; (8001d50 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fa92 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e0d3      	b.n	8001d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_I2C_Master_Transmit+0x50>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e0cc      	b.n	8001d46 <HAL_I2C_Master_Transmit+0x1ea>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d007      	beq.n	8001bd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2221      	movs	r2, #33	; 0x21
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2210      	movs	r2, #16
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	893a      	ldrh	r2, [r7, #8]
 8001c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a50      	ldr	r2, [pc, #320]	; (8001d54 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c14:	8979      	ldrh	r1, [r7, #10]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	6a3a      	ldr	r2, [r7, #32]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f9ca 	bl	8001fb4 <I2C_MasterRequestWrite>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e08d      	b.n	8001d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c40:	e066      	b.n	8001d10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	6a39      	ldr	r1, [r7, #32]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fb0c 	bl	8002264 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00d      	beq.n	8001c6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d107      	bne.n	8001c6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06b      	b.n	8001d46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d11b      	bne.n	8001ce4 <HAL_I2C_Master_Transmit+0x188>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d017      	beq.n	8001ce4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	6a39      	ldr	r1, [r7, #32]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fafc 	bl	80022e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e01a      	b.n	8001d46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d194      	bne.n	8001c42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	00100002 	.word	0x00100002
 8001d54:	ffff0000 	.word	0xffff0000

08001d58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	460b      	mov	r3, r1
 8001d66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fb26 	bl	80013b8 <HAL_GetTick>
 8001d6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	f040 8111 	bne.w	8001fa2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2319      	movs	r3, #25
 8001d86:	2201      	movs	r2, #1
 8001d88:	4988      	ldr	r1, [pc, #544]	; (8001fac <HAL_I2C_IsDeviceReady+0x254>)
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f994 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
 8001d98:	e104      	b.n	8001fa4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_I2C_IsDeviceReady+0x50>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e0fd      	b.n	8001fa4 <HAL_I2C_IsDeviceReady+0x24c>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d007      	beq.n	8001dce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2224      	movs	r2, #36	; 0x24
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a70      	ldr	r2, [pc, #448]	; (8001fb0 <HAL_I2C_IsDeviceReady+0x258>)
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f952 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00d      	beq.n	8001e36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e28:	d103      	bne.n	8001e32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0b6      	b.n	8001fa4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff fab7 	bl	80013b8 <HAL_GetTick>
 8001e4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e7a:	e025      	b.n	8001ec8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e7c:	f7ff fa9c 	bl	80013b8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d302      	bcc.n	8001e92 <HAL_I2C_IsDeviceReady+0x13a>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d103      	bne.n	8001e9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	22a0      	movs	r2, #160	; 0xa0
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2ba0      	cmp	r3, #160	; 0xa0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_I2C_IsDeviceReady+0x188>
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <HAL_I2C_IsDeviceReady+0x188>
 8001eda:	7dbb      	ldrb	r3, [r7, #22]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0cd      	beq.n	8001e7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d129      	bne.n	8001f4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2319      	movs	r3, #25
 8001f22:	2201      	movs	r2, #1
 8001f24:	4921      	ldr	r1, [pc, #132]	; (8001fac <HAL_I2C_IsDeviceReady+0x254>)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f8c6 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e036      	b.n	8001fa4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e02c      	b.n	8001fa4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	2319      	movs	r3, #25
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	490f      	ldr	r1, [pc, #60]	; (8001fac <HAL_I2C_IsDeviceReady+0x254>)
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f8a2 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e012      	b.n	8001fa4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f4ff af32 	bcc.w	8001df2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	00100002 	.word	0x00100002
 8001fb0:	ffff0000 	.word	0xffff0000

08001fb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	603b      	str	r3, [r7, #0]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d006      	beq.n	8001fde <I2C_MasterRequestWrite+0x2a>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d003      	beq.n	8001fde <I2C_MasterRequestWrite+0x2a>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fdc:	d108      	bne.n	8001ff0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e00b      	b.n	8002008 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	2b12      	cmp	r3, #18
 8001ff6:	d107      	bne.n	8002008 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f84f 	bl	80020b8 <I2C_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202e:	d103      	bne.n	8002038 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e035      	b.n	80020a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002044:	d108      	bne.n	8002058 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002046:	897b      	ldrh	r3, [r7, #10]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	e01b      	b.n	8002090 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002058:	897b      	ldrh	r3, [r7, #10]
 800205a:	11db      	asrs	r3, r3, #7
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f003 0306 	and.w	r3, r3, #6
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f063 030f 	orn	r3, r3, #15
 8002068:	b2da      	uxtb	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <I2C_MasterRequestWrite+0xfc>)
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f875 	bl	8002166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e010      	b.n	80020a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002086:	897b      	ldrh	r3, [r7, #10]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <I2C_MasterRequestWrite+0x100>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f865 	bl	8002166 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	00010008 	.word	0x00010008
 80020b4:	00010002 	.word	0x00010002

080020b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c8:	e025      	b.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d021      	beq.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d2:	f7ff f971 	bl	80013b8 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d302      	bcc.n	80020e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d116      	bne.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f043 0220 	orr.w	r2, r3, #32
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e023      	b.n	800215e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d10d      	bne.n	800213c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4013      	ands	r3, r2
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	e00c      	b.n	8002156 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4013      	ands	r3, r2
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	429a      	cmp	r2, r3
 800215a:	d0b6      	beq.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002174:	e051      	b.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002184:	d123      	bne.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002194:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800219e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f043 0204 	orr.w	r2, r3, #4
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e046      	b.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d021      	beq.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7ff f8ef 	bl	80013b8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d116      	bne.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e020      	b.n	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10c      	bne.n	800223e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4013      	ands	r3, r2
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	e00b      	b.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	43da      	mvns	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d18d      	bne.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002270:	e02d      	b.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f878 	bl	8002368 <I2C_IsAcknowledgeFailed>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e02d      	b.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d021      	beq.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228a:	f7ff f895 	bl	80013b8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	429a      	cmp	r2, r3
 8002298:	d302      	bcc.n	80022a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d116      	bne.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f043 0220 	orr.w	r2, r3, #32
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e007      	b.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d1ca      	bne.n	8002272 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022f2:	e02d      	b.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f837 	bl	8002368 <I2C_IsAcknowledgeFailed>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e02d      	b.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d021      	beq.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230c:	f7ff f854 	bl	80013b8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	429a      	cmp	r2, r3
 800231a:	d302      	bcc.n	8002322 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e007      	b.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d1ca      	bne.n	80022f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d11b      	bne.n	80023b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002388:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e267      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d075      	beq.n	80024d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023e6:	4b88      	ldr	r3, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d00c      	beq.n	800240c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f2:	4b85      	ldr	r3, [pc, #532]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d112      	bne.n	8002424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4b82      	ldr	r3, [pc, #520]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800240a:	d10b      	bne.n	8002424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	4b7e      	ldr	r3, [pc, #504]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d05b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x108>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d157      	bne.n	80024d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e242      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242c:	d106      	bne.n	800243c <HAL_RCC_OscConfig+0x74>
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a75      	ldr	r2, [pc, #468]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e01d      	b.n	8002478 <HAL_RCC_OscConfig+0xb0>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x98>
 8002446:	4b70      	ldr	r3, [pc, #448]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a6f      	ldr	r2, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6c      	ldr	r2, [pc, #432]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xb0>
 8002460:	4b69      	ldr	r3, [pc, #420]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a68      	ldr	r2, [pc, #416]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a65      	ldr	r2, [pc, #404]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe ff9a 	bl	80013b8 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe ff96 	bl	80013b8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e207      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0xc0>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe ff86 	bl	80013b8 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe ff82 	bl	80013b8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1f3      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	4b51      	ldr	r3, [pc, #324]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0xe8>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024de:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f6:	4b44      	ldr	r3, [pc, #272]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	4b41      	ldr	r3, [pc, #260]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x152>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e1c7      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4937      	ldr	r1, [pc, #220]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	e03a      	b.n	80025a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <HAL_RCC_OscConfig+0x244>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe ff3b 	bl	80013b8 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002546:	f7fe ff37 	bl	80013b8 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1a8      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4925      	ldr	r1, [pc, #148]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
 8002578:	e015      	b.n	80025a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_OscConfig+0x244>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe ff1a 	bl	80013b8 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002588:	f7fe ff16 	bl	80013b8 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e187      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d036      	beq.n	8002620 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x248>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe fefa 	bl	80013b8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c8:	f7fe fef6 	bl	80013b8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e167      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x240>)
 80025dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x200>
 80025e6:	e01b      	b.n	8002620 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_OscConfig+0x248>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fee3 	bl	80013b8 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	e00e      	b.n	8002614 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f6:	f7fe fedf 	bl	80013b8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d907      	bls.n	8002614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e150      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
 8002608:	40023800 	.word	0x40023800
 800260c:	42470000 	.word	0x42470000
 8002610:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ea      	bne.n	80025f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8097 	beq.w	800275c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b81      	ldr	r3, [pc, #516]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b7d      	ldr	r3, [pc, #500]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a7c      	ldr	r2, [pc, #496]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b7a      	ldr	r3, [pc, #488]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b77      	ldr	r3, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x474>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b74      	ldr	r3, [pc, #464]	; (800283c <HAL_RCC_OscConfig+0x474>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a73      	ldr	r2, [pc, #460]	; (800283c <HAL_RCC_OscConfig+0x474>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7fe fe9f 	bl	80013b8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7fe fe9b 	bl	80013b8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e10c      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x474>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2ea>
 80026a4:	4b64      	ldr	r3, [pc, #400]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	e01c      	b.n	80026ec <HAL_RCC_OscConfig+0x324>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x30c>
 80026ba:	4b5f      	ldr	r3, [pc, #380]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a5e      	ldr	r2, [pc, #376]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a5b      	ldr	r2, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0x324>
 80026d4:	4b58      	ldr	r3, [pc, #352]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	4a57      	ldr	r2, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	; 0x70
 80026e0:	4b55      	ldr	r3, [pc, #340]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	4a54      	ldr	r2, [pc, #336]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80026e6:	f023 0304 	bic.w	r3, r3, #4
 80026ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f4:	f7fe fe60 	bl	80013b8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe fe5c 	bl	80013b8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0cb      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0ee      	beq.n	80026fc <HAL_RCC_OscConfig+0x334>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fe4a 	bl	80013b8 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe fe46 	bl	80013b8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0b5      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273e:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ee      	bne.n	8002728 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800274a:	7dfb      	ldrb	r3, [r7, #23]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002750:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	4a38      	ldr	r2, [pc, #224]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a1 	beq.w	80028a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002766:	4b34      	ldr	r3, [pc, #208]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b08      	cmp	r3, #8
 8002770:	d05c      	beq.n	800282c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d141      	bne.n	80027fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_RCC_OscConfig+0x478>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7fe fe1a 	bl	80013b8 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fe16 	bl	80013b8 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e087      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	4b27      	ldr	r3, [pc, #156]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	019b      	lsls	r3, r3, #6
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	041b      	lsls	r3, r3, #16
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	491b      	ldr	r1, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x478>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fdef 	bl	80013b8 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fdeb 	bl	80013b8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e05c      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x416>
 80027fc:	e054      	b.n	80028a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RCC_OscConfig+0x478>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7fe fdd8 	bl	80013b8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fdd4 	bl	80013b8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e045      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_OscConfig+0x470>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x444>
 800282a:	e03d      	b.n	80028a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e038      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	40007000 	.word	0x40007000
 8002840:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x4ec>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d028      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d121      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d11a      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002874:	4013      	ands	r3, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800287a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	4293      	cmp	r3, r2
 800287e:	d111      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800

080028b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0cc      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d90c      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0b8      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d020      	beq.n	8002942 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a58      	ldr	r2, [pc, #352]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002916:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002924:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a52      	ldr	r2, [pc, #328]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	494d      	ldr	r1, [pc, #308]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d044      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d119      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e07f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d003      	beq.n	8002976 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	2b03      	cmp	r3, #3
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	4b3f      	ldr	r3, [pc, #252]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e067      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002996:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4934      	ldr	r1, [pc, #208]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fd06 	bl	80013b8 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b0:	f7fe fd02 	bl	80013b8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e04f      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 020c 	and.w	r2, r3, #12
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1eb      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d8:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d20c      	bcs.n	8002a00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e032      	b.n	8002a66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4916      	ldr	r1, [pc, #88]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	490e      	ldr	r1, [pc, #56]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a3e:	f000 f821 	bl	8002a84 <HAL_RCC_GetSysClockFreq>
 8002a42:	4602      	mov	r2, r0
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	490a      	ldr	r1, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	5ccb      	ldrb	r3, [r1, r3]
 8002a52:	fa22 f303 	lsr.w	r3, r2, r3
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fc66 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023c00 	.word	0x40023c00
 8002a74:	40023800 	.word	0x40023800
 8002a78:	08004a88 	.word	0x08004a88
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	20000014 	.word	0x20000014

08002a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a88:	b090      	sub	sp, #64	; 0x40
 8002a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a90:	2300      	movs	r3, #0
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a9c:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	f200 80a1 	bhi.w	8002bf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d003      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ab6:	e09b      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002abc:	e09b      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002abe:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ac2:	e098      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac4:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ace:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d028      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	623b      	str	r3, [r7, #32]
 8002ae4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002aec:	2100      	movs	r1, #0
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002af0:	fb03 f201 	mul.w	r2, r3, r1
 8002af4:	2300      	movs	r3, #0
 8002af6:	fb00 f303 	mul.w	r3, r0, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	4a43      	ldr	r2, [pc, #268]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002afe:	fba0 1202 	umull	r1, r2, r0, r2
 8002b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b04:	460a      	mov	r2, r1
 8002b06:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0a:	4413      	add	r3, r2
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	2200      	movs	r2, #0
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	61fa      	str	r2, [r7, #28]
 8002b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b1e:	f7fd fba7 	bl	8000270 <__aeabi_uldivmod>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4613      	mov	r3, r2
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b2a:	e053      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2c:	4b35      	ldr	r3, [pc, #212]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	2200      	movs	r2, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	617a      	str	r2, [r7, #20]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b3e:	f04f 0b00 	mov.w	fp, #0
 8002b42:	4652      	mov	r2, sl
 8002b44:	465b      	mov	r3, fp
 8002b46:	f04f 0000 	mov.w	r0, #0
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	0159      	lsls	r1, r3, #5
 8002b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b54:	0150      	lsls	r0, r2, #5
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b76:	ebb2 0408 	subs.w	r4, r2, r8
 8002b7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	00eb      	lsls	r3, r5, #3
 8002b88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8c:	00e2      	lsls	r2, r4, #3
 8002b8e:	4614      	mov	r4, r2
 8002b90:	461d      	mov	r5, r3
 8002b92:	eb14 030a 	adds.w	r3, r4, sl
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	eb45 030b 	adc.w	r3, r5, fp
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002baa:	4629      	mov	r1, r5
 8002bac:	028b      	lsls	r3, r1, #10
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	028a      	lsls	r2, r1, #10
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	60fa      	str	r2, [r7, #12]
 8002bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc8:	f7fd fb52 	bl	8000270 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	0c1b      	lsrs	r3, r3, #16
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bee:	e002      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3740      	adds	r7, #64	; 0x40
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	017d7840 	.word	0x017d7840

08002c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000010 	.word	0x20000010

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c2c:	f7ff fff0 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4903      	ldr	r1, [pc, #12]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08004a98 	.word	0x08004a98

08002c50 <__errno>:
 8002c50:	4b01      	ldr	r3, [pc, #4]	; (8002c58 <__errno+0x8>)
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	2000001c 	.word	0x2000001c

08002c5c <__libc_init_array>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4d0d      	ldr	r5, [pc, #52]	; (8002c94 <__libc_init_array+0x38>)
 8002c60:	4c0d      	ldr	r4, [pc, #52]	; (8002c98 <__libc_init_array+0x3c>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	2600      	movs	r6, #0
 8002c68:	42a6      	cmp	r6, r4
 8002c6a:	d109      	bne.n	8002c80 <__libc_init_array+0x24>
 8002c6c:	4d0b      	ldr	r5, [pc, #44]	; (8002c9c <__libc_init_array+0x40>)
 8002c6e:	4c0c      	ldr	r4, [pc, #48]	; (8002ca0 <__libc_init_array+0x44>)
 8002c70:	f000 fc8e 	bl	8003590 <_init>
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	2600      	movs	r6, #0
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d105      	bne.n	8002c8a <__libc_init_array+0x2e>
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}
 8002c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c84:	4798      	blx	r3
 8002c86:	3601      	adds	r6, #1
 8002c88:	e7ee      	b.n	8002c68 <__libc_init_array+0xc>
 8002c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8e:	4798      	blx	r3
 8002c90:	3601      	adds	r6, #1
 8002c92:	e7f2      	b.n	8002c7a <__libc_init_array+0x1e>
 8002c94:	08004adc 	.word	0x08004adc
 8002c98:	08004adc 	.word	0x08004adc
 8002c9c:	08004adc 	.word	0x08004adc
 8002ca0:	08004ae0 	.word	0x08004ae0

08002ca4 <memcpy>:
 8002ca4:	440a      	add	r2, r1
 8002ca6:	4291      	cmp	r1, r2
 8002ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cac:	d100      	bne.n	8002cb0 <memcpy+0xc>
 8002cae:	4770      	bx	lr
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cba:	4291      	cmp	r1, r2
 8002cbc:	d1f9      	bne.n	8002cb2 <memcpy+0xe>
 8002cbe:	bd10      	pop	{r4, pc}

08002cc0 <memset>:
 8002cc0:	4402      	add	r2, r0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d100      	bne.n	8002cca <memset+0xa>
 8002cc8:	4770      	bx	lr
 8002cca:	f803 1b01 	strb.w	r1, [r3], #1
 8002cce:	e7f9      	b.n	8002cc4 <memset+0x4>

08002cd0 <siprintf>:
 8002cd0:	b40e      	push	{r1, r2, r3}
 8002cd2:	b500      	push	{lr}
 8002cd4:	b09c      	sub	sp, #112	; 0x70
 8002cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8002cd8:	9002      	str	r0, [sp, #8]
 8002cda:	9006      	str	r0, [sp, #24]
 8002cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ce0:	4809      	ldr	r0, [pc, #36]	; (8002d08 <siprintf+0x38>)
 8002ce2:	9107      	str	r1, [sp, #28]
 8002ce4:	9104      	str	r1, [sp, #16]
 8002ce6:	4909      	ldr	r1, [pc, #36]	; (8002d0c <siprintf+0x3c>)
 8002ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cec:	9105      	str	r1, [sp, #20]
 8002cee:	6800      	ldr	r0, [r0, #0]
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	a902      	add	r1, sp, #8
 8002cf4:	f000 f868 	bl	8002dc8 <_svfiprintf_r>
 8002cf8:	9b02      	ldr	r3, [sp, #8]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	b01c      	add	sp, #112	; 0x70
 8002d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d04:	b003      	add	sp, #12
 8002d06:	4770      	bx	lr
 8002d08:	2000001c 	.word	0x2000001c
 8002d0c:	ffff0208 	.word	0xffff0208

08002d10 <__ssputs_r>:
 8002d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d14:	688e      	ldr	r6, [r1, #8]
 8002d16:	429e      	cmp	r6, r3
 8002d18:	4682      	mov	sl, r0
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	4690      	mov	r8, r2
 8002d1e:	461f      	mov	r7, r3
 8002d20:	d838      	bhi.n	8002d94 <__ssputs_r+0x84>
 8002d22:	898a      	ldrh	r2, [r1, #12]
 8002d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d28:	d032      	beq.n	8002d90 <__ssputs_r+0x80>
 8002d2a:	6825      	ldr	r5, [r4, #0]
 8002d2c:	6909      	ldr	r1, [r1, #16]
 8002d2e:	eba5 0901 	sub.w	r9, r5, r1
 8002d32:	6965      	ldr	r5, [r4, #20]
 8002d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	444b      	add	r3, r9
 8002d40:	106d      	asrs	r5, r5, #1
 8002d42:	429d      	cmp	r5, r3
 8002d44:	bf38      	it	cc
 8002d46:	461d      	movcc	r5, r3
 8002d48:	0553      	lsls	r3, r2, #21
 8002d4a:	d531      	bpl.n	8002db0 <__ssputs_r+0xa0>
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f000 fb55 	bl	80033fc <_malloc_r>
 8002d52:	4606      	mov	r6, r0
 8002d54:	b950      	cbnz	r0, 8002d6c <__ssputs_r+0x5c>
 8002d56:	230c      	movs	r3, #12
 8002d58:	f8ca 3000 	str.w	r3, [sl]
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d62:	81a3      	strh	r3, [r4, #12]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d6c:	6921      	ldr	r1, [r4, #16]
 8002d6e:	464a      	mov	r2, r9
 8002d70:	f7ff ff98 	bl	8002ca4 <memcpy>
 8002d74:	89a3      	ldrh	r3, [r4, #12]
 8002d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7e:	81a3      	strh	r3, [r4, #12]
 8002d80:	6126      	str	r6, [r4, #16]
 8002d82:	6165      	str	r5, [r4, #20]
 8002d84:	444e      	add	r6, r9
 8002d86:	eba5 0509 	sub.w	r5, r5, r9
 8002d8a:	6026      	str	r6, [r4, #0]
 8002d8c:	60a5      	str	r5, [r4, #8]
 8002d8e:	463e      	mov	r6, r7
 8002d90:	42be      	cmp	r6, r7
 8002d92:	d900      	bls.n	8002d96 <__ssputs_r+0x86>
 8002d94:	463e      	mov	r6, r7
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	4632      	mov	r2, r6
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	f000 faa8 	bl	80032f0 <memmove>
 8002da0:	68a3      	ldr	r3, [r4, #8]
 8002da2:	1b9b      	subs	r3, r3, r6
 8002da4:	60a3      	str	r3, [r4, #8]
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	4433      	add	r3, r6
 8002daa:	6023      	str	r3, [r4, #0]
 8002dac:	2000      	movs	r0, #0
 8002dae:	e7db      	b.n	8002d68 <__ssputs_r+0x58>
 8002db0:	462a      	mov	r2, r5
 8002db2:	f000 fb97 	bl	80034e4 <_realloc_r>
 8002db6:	4606      	mov	r6, r0
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d1e1      	bne.n	8002d80 <__ssputs_r+0x70>
 8002dbc:	6921      	ldr	r1, [r4, #16]
 8002dbe:	4650      	mov	r0, sl
 8002dc0:	f000 fab0 	bl	8003324 <_free_r>
 8002dc4:	e7c7      	b.n	8002d56 <__ssputs_r+0x46>
	...

08002dc8 <_svfiprintf_r>:
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	4698      	mov	r8, r3
 8002dce:	898b      	ldrh	r3, [r1, #12]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	b09d      	sub	sp, #116	; 0x74
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	460d      	mov	r5, r1
 8002dd8:	4614      	mov	r4, r2
 8002dda:	d50e      	bpl.n	8002dfa <_svfiprintf_r+0x32>
 8002ddc:	690b      	ldr	r3, [r1, #16]
 8002dde:	b963      	cbnz	r3, 8002dfa <_svfiprintf_r+0x32>
 8002de0:	2140      	movs	r1, #64	; 0x40
 8002de2:	f000 fb0b 	bl	80033fc <_malloc_r>
 8002de6:	6028      	str	r0, [r5, #0]
 8002de8:	6128      	str	r0, [r5, #16]
 8002dea:	b920      	cbnz	r0, 8002df6 <_svfiprintf_r+0x2e>
 8002dec:	230c      	movs	r3, #12
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	e0d1      	b.n	8002f9a <_svfiprintf_r+0x1d2>
 8002df6:	2340      	movs	r3, #64	; 0x40
 8002df8:	616b      	str	r3, [r5, #20]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8002dfe:	2320      	movs	r3, #32
 8002e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e08:	2330      	movs	r3, #48	; 0x30
 8002e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fb4 <_svfiprintf_r+0x1ec>
 8002e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e12:	f04f 0901 	mov.w	r9, #1
 8002e16:	4623      	mov	r3, r4
 8002e18:	469a      	mov	sl, r3
 8002e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e1e:	b10a      	cbz	r2, 8002e24 <_svfiprintf_r+0x5c>
 8002e20:	2a25      	cmp	r2, #37	; 0x25
 8002e22:	d1f9      	bne.n	8002e18 <_svfiprintf_r+0x50>
 8002e24:	ebba 0b04 	subs.w	fp, sl, r4
 8002e28:	d00b      	beq.n	8002e42 <_svfiprintf_r+0x7a>
 8002e2a:	465b      	mov	r3, fp
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4638      	mov	r0, r7
 8002e32:	f7ff ff6d 	bl	8002d10 <__ssputs_r>
 8002e36:	3001      	adds	r0, #1
 8002e38:	f000 80aa 	beq.w	8002f90 <_svfiprintf_r+0x1c8>
 8002e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e3e:	445a      	add	r2, fp
 8002e40:	9209      	str	r2, [sp, #36]	; 0x24
 8002e42:	f89a 3000 	ldrb.w	r3, [sl]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80a2 	beq.w	8002f90 <_svfiprintf_r+0x1c8>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e56:	f10a 0a01 	add.w	sl, sl, #1
 8002e5a:	9304      	str	r3, [sp, #16]
 8002e5c:	9307      	str	r3, [sp, #28]
 8002e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e62:	931a      	str	r3, [sp, #104]	; 0x68
 8002e64:	4654      	mov	r4, sl
 8002e66:	2205      	movs	r2, #5
 8002e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e6c:	4851      	ldr	r0, [pc, #324]	; (8002fb4 <_svfiprintf_r+0x1ec>)
 8002e6e:	f7fd f9af 	bl	80001d0 <memchr>
 8002e72:	9a04      	ldr	r2, [sp, #16]
 8002e74:	b9d8      	cbnz	r0, 8002eae <_svfiprintf_r+0xe6>
 8002e76:	06d0      	lsls	r0, r2, #27
 8002e78:	bf44      	itt	mi
 8002e7a:	2320      	movmi	r3, #32
 8002e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e80:	0711      	lsls	r1, r2, #28
 8002e82:	bf44      	itt	mi
 8002e84:	232b      	movmi	r3, #43	; 0x2b
 8002e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e90:	d015      	beq.n	8002ebe <_svfiprintf_r+0xf6>
 8002e92:	9a07      	ldr	r2, [sp, #28]
 8002e94:	4654      	mov	r4, sl
 8002e96:	2000      	movs	r0, #0
 8002e98:	f04f 0c0a 	mov.w	ip, #10
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ea2:	3b30      	subs	r3, #48	; 0x30
 8002ea4:	2b09      	cmp	r3, #9
 8002ea6:	d94e      	bls.n	8002f46 <_svfiprintf_r+0x17e>
 8002ea8:	b1b0      	cbz	r0, 8002ed8 <_svfiprintf_r+0x110>
 8002eaa:	9207      	str	r2, [sp, #28]
 8002eac:	e014      	b.n	8002ed8 <_svfiprintf_r+0x110>
 8002eae:	eba0 0308 	sub.w	r3, r0, r8
 8002eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	9304      	str	r3, [sp, #16]
 8002eba:	46a2      	mov	sl, r4
 8002ebc:	e7d2      	b.n	8002e64 <_svfiprintf_r+0x9c>
 8002ebe:	9b03      	ldr	r3, [sp, #12]
 8002ec0:	1d19      	adds	r1, r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	9103      	str	r1, [sp, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bfbb      	ittet	lt
 8002eca:	425b      	neglt	r3, r3
 8002ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8002ed0:	9307      	strge	r3, [sp, #28]
 8002ed2:	9307      	strlt	r3, [sp, #28]
 8002ed4:	bfb8      	it	lt
 8002ed6:	9204      	strlt	r2, [sp, #16]
 8002ed8:	7823      	ldrb	r3, [r4, #0]
 8002eda:	2b2e      	cmp	r3, #46	; 0x2e
 8002edc:	d10c      	bne.n	8002ef8 <_svfiprintf_r+0x130>
 8002ede:	7863      	ldrb	r3, [r4, #1]
 8002ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee2:	d135      	bne.n	8002f50 <_svfiprintf_r+0x188>
 8002ee4:	9b03      	ldr	r3, [sp, #12]
 8002ee6:	1d1a      	adds	r2, r3, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	9203      	str	r2, [sp, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bfb8      	it	lt
 8002ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ef4:	3402      	adds	r4, #2
 8002ef6:	9305      	str	r3, [sp, #20]
 8002ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002fc4 <_svfiprintf_r+0x1fc>
 8002efc:	7821      	ldrb	r1, [r4, #0]
 8002efe:	2203      	movs	r2, #3
 8002f00:	4650      	mov	r0, sl
 8002f02:	f7fd f965 	bl	80001d0 <memchr>
 8002f06:	b140      	cbz	r0, 8002f1a <_svfiprintf_r+0x152>
 8002f08:	2340      	movs	r3, #64	; 0x40
 8002f0a:	eba0 000a 	sub.w	r0, r0, sl
 8002f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8002f12:	9b04      	ldr	r3, [sp, #16]
 8002f14:	4303      	orrs	r3, r0
 8002f16:	3401      	adds	r4, #1
 8002f18:	9304      	str	r3, [sp, #16]
 8002f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f1e:	4826      	ldr	r0, [pc, #152]	; (8002fb8 <_svfiprintf_r+0x1f0>)
 8002f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f24:	2206      	movs	r2, #6
 8002f26:	f7fd f953 	bl	80001d0 <memchr>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d038      	beq.n	8002fa0 <_svfiprintf_r+0x1d8>
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <_svfiprintf_r+0x1f4>)
 8002f30:	bb1b      	cbnz	r3, 8002f7a <_svfiprintf_r+0x1b2>
 8002f32:	9b03      	ldr	r3, [sp, #12]
 8002f34:	3307      	adds	r3, #7
 8002f36:	f023 0307 	bic.w	r3, r3, #7
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	9303      	str	r3, [sp, #12]
 8002f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f40:	4433      	add	r3, r6
 8002f42:	9309      	str	r3, [sp, #36]	; 0x24
 8002f44:	e767      	b.n	8002e16 <_svfiprintf_r+0x4e>
 8002f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7a5      	b.n	8002e9c <_svfiprintf_r+0xd4>
 8002f50:	2300      	movs	r3, #0
 8002f52:	3401      	adds	r4, #1
 8002f54:	9305      	str	r3, [sp, #20]
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 0c0a 	mov.w	ip, #10
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f62:	3a30      	subs	r2, #48	; 0x30
 8002f64:	2a09      	cmp	r2, #9
 8002f66:	d903      	bls.n	8002f70 <_svfiprintf_r+0x1a8>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0c5      	beq.n	8002ef8 <_svfiprintf_r+0x130>
 8002f6c:	9105      	str	r1, [sp, #20]
 8002f6e:	e7c3      	b.n	8002ef8 <_svfiprintf_r+0x130>
 8002f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f74:	4604      	mov	r4, r0
 8002f76:	2301      	movs	r3, #1
 8002f78:	e7f0      	b.n	8002f5c <_svfiprintf_r+0x194>
 8002f7a:	ab03      	add	r3, sp, #12
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	462a      	mov	r2, r5
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <_svfiprintf_r+0x1f8>)
 8002f82:	a904      	add	r1, sp, #16
 8002f84:	4638      	mov	r0, r7
 8002f86:	f3af 8000 	nop.w
 8002f8a:	1c42      	adds	r2, r0, #1
 8002f8c:	4606      	mov	r6, r0
 8002f8e:	d1d6      	bne.n	8002f3e <_svfiprintf_r+0x176>
 8002f90:	89ab      	ldrh	r3, [r5, #12]
 8002f92:	065b      	lsls	r3, r3, #25
 8002f94:	f53f af2c 	bmi.w	8002df0 <_svfiprintf_r+0x28>
 8002f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f9a:	b01d      	add	sp, #116	; 0x74
 8002f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa0:	ab03      	add	r3, sp, #12
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	462a      	mov	r2, r5
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <_svfiprintf_r+0x1f8>)
 8002fa8:	a904      	add	r1, sp, #16
 8002faa:	4638      	mov	r0, r7
 8002fac:	f000 f87a 	bl	80030a4 <_printf_i>
 8002fb0:	e7eb      	b.n	8002f8a <_svfiprintf_r+0x1c2>
 8002fb2:	bf00      	nop
 8002fb4:	08004aa0 	.word	0x08004aa0
 8002fb8:	08004aaa 	.word	0x08004aaa
 8002fbc:	00000000 	.word	0x00000000
 8002fc0:	08002d11 	.word	0x08002d11
 8002fc4:	08004aa6 	.word	0x08004aa6

08002fc8 <_printf_common>:
 8002fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fcc:	4616      	mov	r6, r2
 8002fce:	4699      	mov	r9, r3
 8002fd0:	688a      	ldr	r2, [r1, #8]
 8002fd2:	690b      	ldr	r3, [r1, #16]
 8002fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bfb8      	it	lt
 8002fdc:	4613      	movlt	r3, r2
 8002fde:	6033      	str	r3, [r6, #0]
 8002fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fe4:	4607      	mov	r7, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	b10a      	cbz	r2, 8002fee <_printf_common+0x26>
 8002fea:	3301      	adds	r3, #1
 8002fec:	6033      	str	r3, [r6, #0]
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	0699      	lsls	r1, r3, #26
 8002ff2:	bf42      	ittt	mi
 8002ff4:	6833      	ldrmi	r3, [r6, #0]
 8002ff6:	3302      	addmi	r3, #2
 8002ff8:	6033      	strmi	r3, [r6, #0]
 8002ffa:	6825      	ldr	r5, [r4, #0]
 8002ffc:	f015 0506 	ands.w	r5, r5, #6
 8003000:	d106      	bne.n	8003010 <_printf_common+0x48>
 8003002:	f104 0a19 	add.w	sl, r4, #25
 8003006:	68e3      	ldr	r3, [r4, #12]
 8003008:	6832      	ldr	r2, [r6, #0]
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	42ab      	cmp	r3, r5
 800300e:	dc26      	bgt.n	800305e <_printf_common+0x96>
 8003010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003014:	1e13      	subs	r3, r2, #0
 8003016:	6822      	ldr	r2, [r4, #0]
 8003018:	bf18      	it	ne
 800301a:	2301      	movne	r3, #1
 800301c:	0692      	lsls	r2, r2, #26
 800301e:	d42b      	bmi.n	8003078 <_printf_common+0xb0>
 8003020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003024:	4649      	mov	r1, r9
 8003026:	4638      	mov	r0, r7
 8003028:	47c0      	blx	r8
 800302a:	3001      	adds	r0, #1
 800302c:	d01e      	beq.n	800306c <_printf_common+0xa4>
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	68e5      	ldr	r5, [r4, #12]
 8003032:	6832      	ldr	r2, [r6, #0]
 8003034:	f003 0306 	and.w	r3, r3, #6
 8003038:	2b04      	cmp	r3, #4
 800303a:	bf08      	it	eq
 800303c:	1aad      	subeq	r5, r5, r2
 800303e:	68a3      	ldr	r3, [r4, #8]
 8003040:	6922      	ldr	r2, [r4, #16]
 8003042:	bf0c      	ite	eq
 8003044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003048:	2500      	movne	r5, #0
 800304a:	4293      	cmp	r3, r2
 800304c:	bfc4      	itt	gt
 800304e:	1a9b      	subgt	r3, r3, r2
 8003050:	18ed      	addgt	r5, r5, r3
 8003052:	2600      	movs	r6, #0
 8003054:	341a      	adds	r4, #26
 8003056:	42b5      	cmp	r5, r6
 8003058:	d11a      	bne.n	8003090 <_printf_common+0xc8>
 800305a:	2000      	movs	r0, #0
 800305c:	e008      	b.n	8003070 <_printf_common+0xa8>
 800305e:	2301      	movs	r3, #1
 8003060:	4652      	mov	r2, sl
 8003062:	4649      	mov	r1, r9
 8003064:	4638      	mov	r0, r7
 8003066:	47c0      	blx	r8
 8003068:	3001      	adds	r0, #1
 800306a:	d103      	bne.n	8003074 <_printf_common+0xac>
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003074:	3501      	adds	r5, #1
 8003076:	e7c6      	b.n	8003006 <_printf_common+0x3e>
 8003078:	18e1      	adds	r1, r4, r3
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	2030      	movs	r0, #48	; 0x30
 800307e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003082:	4422      	add	r2, r4
 8003084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800308c:	3302      	adds	r3, #2
 800308e:	e7c7      	b.n	8003020 <_printf_common+0x58>
 8003090:	2301      	movs	r3, #1
 8003092:	4622      	mov	r2, r4
 8003094:	4649      	mov	r1, r9
 8003096:	4638      	mov	r0, r7
 8003098:	47c0      	blx	r8
 800309a:	3001      	adds	r0, #1
 800309c:	d0e6      	beq.n	800306c <_printf_common+0xa4>
 800309e:	3601      	adds	r6, #1
 80030a0:	e7d9      	b.n	8003056 <_printf_common+0x8e>
	...

080030a4 <_printf_i>:
 80030a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030a8:	7e0f      	ldrb	r7, [r1, #24]
 80030aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030ac:	2f78      	cmp	r7, #120	; 0x78
 80030ae:	4691      	mov	r9, r2
 80030b0:	4680      	mov	r8, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	469a      	mov	sl, r3
 80030b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030ba:	d807      	bhi.n	80030cc <_printf_i+0x28>
 80030bc:	2f62      	cmp	r7, #98	; 0x62
 80030be:	d80a      	bhi.n	80030d6 <_printf_i+0x32>
 80030c0:	2f00      	cmp	r7, #0
 80030c2:	f000 80d8 	beq.w	8003276 <_printf_i+0x1d2>
 80030c6:	2f58      	cmp	r7, #88	; 0x58
 80030c8:	f000 80a3 	beq.w	8003212 <_printf_i+0x16e>
 80030cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030d4:	e03a      	b.n	800314c <_printf_i+0xa8>
 80030d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030da:	2b15      	cmp	r3, #21
 80030dc:	d8f6      	bhi.n	80030cc <_printf_i+0x28>
 80030de:	a101      	add	r1, pc, #4	; (adr r1, 80030e4 <_printf_i+0x40>)
 80030e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030e4:	0800313d 	.word	0x0800313d
 80030e8:	08003151 	.word	0x08003151
 80030ec:	080030cd 	.word	0x080030cd
 80030f0:	080030cd 	.word	0x080030cd
 80030f4:	080030cd 	.word	0x080030cd
 80030f8:	080030cd 	.word	0x080030cd
 80030fc:	08003151 	.word	0x08003151
 8003100:	080030cd 	.word	0x080030cd
 8003104:	080030cd 	.word	0x080030cd
 8003108:	080030cd 	.word	0x080030cd
 800310c:	080030cd 	.word	0x080030cd
 8003110:	0800325d 	.word	0x0800325d
 8003114:	08003181 	.word	0x08003181
 8003118:	0800323f 	.word	0x0800323f
 800311c:	080030cd 	.word	0x080030cd
 8003120:	080030cd 	.word	0x080030cd
 8003124:	0800327f 	.word	0x0800327f
 8003128:	080030cd 	.word	0x080030cd
 800312c:	08003181 	.word	0x08003181
 8003130:	080030cd 	.word	0x080030cd
 8003134:	080030cd 	.word	0x080030cd
 8003138:	08003247 	.word	0x08003247
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	602a      	str	r2, [r5, #0]
 8003144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800314c:	2301      	movs	r3, #1
 800314e:	e0a3      	b.n	8003298 <_printf_i+0x1f4>
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	6829      	ldr	r1, [r5, #0]
 8003154:	0606      	lsls	r6, r0, #24
 8003156:	f101 0304 	add.w	r3, r1, #4
 800315a:	d50a      	bpl.n	8003172 <_printf_i+0xce>
 800315c:	680e      	ldr	r6, [r1, #0]
 800315e:	602b      	str	r3, [r5, #0]
 8003160:	2e00      	cmp	r6, #0
 8003162:	da03      	bge.n	800316c <_printf_i+0xc8>
 8003164:	232d      	movs	r3, #45	; 0x2d
 8003166:	4276      	negs	r6, r6
 8003168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800316c:	485e      	ldr	r0, [pc, #376]	; (80032e8 <_printf_i+0x244>)
 800316e:	230a      	movs	r3, #10
 8003170:	e019      	b.n	80031a6 <_printf_i+0x102>
 8003172:	680e      	ldr	r6, [r1, #0]
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	f010 0f40 	tst.w	r0, #64	; 0x40
 800317a:	bf18      	it	ne
 800317c:	b236      	sxthne	r6, r6
 800317e:	e7ef      	b.n	8003160 <_printf_i+0xbc>
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	1d19      	adds	r1, r3, #4
 8003186:	6029      	str	r1, [r5, #0]
 8003188:	0601      	lsls	r1, r0, #24
 800318a:	d501      	bpl.n	8003190 <_printf_i+0xec>
 800318c:	681e      	ldr	r6, [r3, #0]
 800318e:	e002      	b.n	8003196 <_printf_i+0xf2>
 8003190:	0646      	lsls	r6, r0, #25
 8003192:	d5fb      	bpl.n	800318c <_printf_i+0xe8>
 8003194:	881e      	ldrh	r6, [r3, #0]
 8003196:	4854      	ldr	r0, [pc, #336]	; (80032e8 <_printf_i+0x244>)
 8003198:	2f6f      	cmp	r7, #111	; 0x6f
 800319a:	bf0c      	ite	eq
 800319c:	2308      	moveq	r3, #8
 800319e:	230a      	movne	r3, #10
 80031a0:	2100      	movs	r1, #0
 80031a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031a6:	6865      	ldr	r5, [r4, #4]
 80031a8:	60a5      	str	r5, [r4, #8]
 80031aa:	2d00      	cmp	r5, #0
 80031ac:	bfa2      	ittt	ge
 80031ae:	6821      	ldrge	r1, [r4, #0]
 80031b0:	f021 0104 	bicge.w	r1, r1, #4
 80031b4:	6021      	strge	r1, [r4, #0]
 80031b6:	b90e      	cbnz	r6, 80031bc <_printf_i+0x118>
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	d04d      	beq.n	8003258 <_printf_i+0x1b4>
 80031bc:	4615      	mov	r5, r2
 80031be:	fbb6 f1f3 	udiv	r1, r6, r3
 80031c2:	fb03 6711 	mls	r7, r3, r1, r6
 80031c6:	5dc7      	ldrb	r7, [r0, r7]
 80031c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031cc:	4637      	mov	r7, r6
 80031ce:	42bb      	cmp	r3, r7
 80031d0:	460e      	mov	r6, r1
 80031d2:	d9f4      	bls.n	80031be <_printf_i+0x11a>
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d10b      	bne.n	80031f0 <_printf_i+0x14c>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	07de      	lsls	r6, r3, #31
 80031dc:	d508      	bpl.n	80031f0 <_printf_i+0x14c>
 80031de:	6923      	ldr	r3, [r4, #16]
 80031e0:	6861      	ldr	r1, [r4, #4]
 80031e2:	4299      	cmp	r1, r3
 80031e4:	bfde      	ittt	le
 80031e6:	2330      	movle	r3, #48	; 0x30
 80031e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031f0:	1b52      	subs	r2, r2, r5
 80031f2:	6122      	str	r2, [r4, #16]
 80031f4:	f8cd a000 	str.w	sl, [sp]
 80031f8:	464b      	mov	r3, r9
 80031fa:	aa03      	add	r2, sp, #12
 80031fc:	4621      	mov	r1, r4
 80031fe:	4640      	mov	r0, r8
 8003200:	f7ff fee2 	bl	8002fc8 <_printf_common>
 8003204:	3001      	adds	r0, #1
 8003206:	d14c      	bne.n	80032a2 <_printf_i+0x1fe>
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	b004      	add	sp, #16
 800320e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003212:	4835      	ldr	r0, [pc, #212]	; (80032e8 <_printf_i+0x244>)
 8003214:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003218:	6829      	ldr	r1, [r5, #0]
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003220:	6029      	str	r1, [r5, #0]
 8003222:	061d      	lsls	r5, r3, #24
 8003224:	d514      	bpl.n	8003250 <_printf_i+0x1ac>
 8003226:	07df      	lsls	r7, r3, #31
 8003228:	bf44      	itt	mi
 800322a:	f043 0320 	orrmi.w	r3, r3, #32
 800322e:	6023      	strmi	r3, [r4, #0]
 8003230:	b91e      	cbnz	r6, 800323a <_printf_i+0x196>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	f023 0320 	bic.w	r3, r3, #32
 8003238:	6023      	str	r3, [r4, #0]
 800323a:	2310      	movs	r3, #16
 800323c:	e7b0      	b.n	80031a0 <_printf_i+0xfc>
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	f043 0320 	orr.w	r3, r3, #32
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	2378      	movs	r3, #120	; 0x78
 8003248:	4828      	ldr	r0, [pc, #160]	; (80032ec <_printf_i+0x248>)
 800324a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800324e:	e7e3      	b.n	8003218 <_printf_i+0x174>
 8003250:	0659      	lsls	r1, r3, #25
 8003252:	bf48      	it	mi
 8003254:	b2b6      	uxthmi	r6, r6
 8003256:	e7e6      	b.n	8003226 <_printf_i+0x182>
 8003258:	4615      	mov	r5, r2
 800325a:	e7bb      	b.n	80031d4 <_printf_i+0x130>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	6826      	ldr	r6, [r4, #0]
 8003260:	6961      	ldr	r1, [r4, #20]
 8003262:	1d18      	adds	r0, r3, #4
 8003264:	6028      	str	r0, [r5, #0]
 8003266:	0635      	lsls	r5, r6, #24
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	d501      	bpl.n	8003270 <_printf_i+0x1cc>
 800326c:	6019      	str	r1, [r3, #0]
 800326e:	e002      	b.n	8003276 <_printf_i+0x1d2>
 8003270:	0670      	lsls	r0, r6, #25
 8003272:	d5fb      	bpl.n	800326c <_printf_i+0x1c8>
 8003274:	8019      	strh	r1, [r3, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	6123      	str	r3, [r4, #16]
 800327a:	4615      	mov	r5, r2
 800327c:	e7ba      	b.n	80031f4 <_printf_i+0x150>
 800327e:	682b      	ldr	r3, [r5, #0]
 8003280:	1d1a      	adds	r2, r3, #4
 8003282:	602a      	str	r2, [r5, #0]
 8003284:	681d      	ldr	r5, [r3, #0]
 8003286:	6862      	ldr	r2, [r4, #4]
 8003288:	2100      	movs	r1, #0
 800328a:	4628      	mov	r0, r5
 800328c:	f7fc ffa0 	bl	80001d0 <memchr>
 8003290:	b108      	cbz	r0, 8003296 <_printf_i+0x1f2>
 8003292:	1b40      	subs	r0, r0, r5
 8003294:	6060      	str	r0, [r4, #4]
 8003296:	6863      	ldr	r3, [r4, #4]
 8003298:	6123      	str	r3, [r4, #16]
 800329a:	2300      	movs	r3, #0
 800329c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032a0:	e7a8      	b.n	80031f4 <_printf_i+0x150>
 80032a2:	6923      	ldr	r3, [r4, #16]
 80032a4:	462a      	mov	r2, r5
 80032a6:	4649      	mov	r1, r9
 80032a8:	4640      	mov	r0, r8
 80032aa:	47d0      	blx	sl
 80032ac:	3001      	adds	r0, #1
 80032ae:	d0ab      	beq.n	8003208 <_printf_i+0x164>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	079b      	lsls	r3, r3, #30
 80032b4:	d413      	bmi.n	80032de <_printf_i+0x23a>
 80032b6:	68e0      	ldr	r0, [r4, #12]
 80032b8:	9b03      	ldr	r3, [sp, #12]
 80032ba:	4298      	cmp	r0, r3
 80032bc:	bfb8      	it	lt
 80032be:	4618      	movlt	r0, r3
 80032c0:	e7a4      	b.n	800320c <_printf_i+0x168>
 80032c2:	2301      	movs	r3, #1
 80032c4:	4632      	mov	r2, r6
 80032c6:	4649      	mov	r1, r9
 80032c8:	4640      	mov	r0, r8
 80032ca:	47d0      	blx	sl
 80032cc:	3001      	adds	r0, #1
 80032ce:	d09b      	beq.n	8003208 <_printf_i+0x164>
 80032d0:	3501      	adds	r5, #1
 80032d2:	68e3      	ldr	r3, [r4, #12]
 80032d4:	9903      	ldr	r1, [sp, #12]
 80032d6:	1a5b      	subs	r3, r3, r1
 80032d8:	42ab      	cmp	r3, r5
 80032da:	dcf2      	bgt.n	80032c2 <_printf_i+0x21e>
 80032dc:	e7eb      	b.n	80032b6 <_printf_i+0x212>
 80032de:	2500      	movs	r5, #0
 80032e0:	f104 0619 	add.w	r6, r4, #25
 80032e4:	e7f5      	b.n	80032d2 <_printf_i+0x22e>
 80032e6:	bf00      	nop
 80032e8:	08004ab1 	.word	0x08004ab1
 80032ec:	08004ac2 	.word	0x08004ac2

080032f0 <memmove>:
 80032f0:	4288      	cmp	r0, r1
 80032f2:	b510      	push	{r4, lr}
 80032f4:	eb01 0402 	add.w	r4, r1, r2
 80032f8:	d902      	bls.n	8003300 <memmove+0x10>
 80032fa:	4284      	cmp	r4, r0
 80032fc:	4623      	mov	r3, r4
 80032fe:	d807      	bhi.n	8003310 <memmove+0x20>
 8003300:	1e43      	subs	r3, r0, #1
 8003302:	42a1      	cmp	r1, r4
 8003304:	d008      	beq.n	8003318 <memmove+0x28>
 8003306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800330a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800330e:	e7f8      	b.n	8003302 <memmove+0x12>
 8003310:	4402      	add	r2, r0
 8003312:	4601      	mov	r1, r0
 8003314:	428a      	cmp	r2, r1
 8003316:	d100      	bne.n	800331a <memmove+0x2a>
 8003318:	bd10      	pop	{r4, pc}
 800331a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800331e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003322:	e7f7      	b.n	8003314 <memmove+0x24>

08003324 <_free_r>:
 8003324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003326:	2900      	cmp	r1, #0
 8003328:	d044      	beq.n	80033b4 <_free_r+0x90>
 800332a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800332e:	9001      	str	r0, [sp, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f1a1 0404 	sub.w	r4, r1, #4
 8003336:	bfb8      	it	lt
 8003338:	18e4      	addlt	r4, r4, r3
 800333a:	f000 f913 	bl	8003564 <__malloc_lock>
 800333e:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <_free_r+0x94>)
 8003340:	9801      	ldr	r0, [sp, #4]
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	b933      	cbnz	r3, 8003354 <_free_r+0x30>
 8003346:	6063      	str	r3, [r4, #4]
 8003348:	6014      	str	r4, [r2, #0]
 800334a:	b003      	add	sp, #12
 800334c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003350:	f000 b90e 	b.w	8003570 <__malloc_unlock>
 8003354:	42a3      	cmp	r3, r4
 8003356:	d908      	bls.n	800336a <_free_r+0x46>
 8003358:	6825      	ldr	r5, [r4, #0]
 800335a:	1961      	adds	r1, r4, r5
 800335c:	428b      	cmp	r3, r1
 800335e:	bf01      	itttt	eq
 8003360:	6819      	ldreq	r1, [r3, #0]
 8003362:	685b      	ldreq	r3, [r3, #4]
 8003364:	1949      	addeq	r1, r1, r5
 8003366:	6021      	streq	r1, [r4, #0]
 8003368:	e7ed      	b.n	8003346 <_free_r+0x22>
 800336a:	461a      	mov	r2, r3
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	b10b      	cbz	r3, 8003374 <_free_r+0x50>
 8003370:	42a3      	cmp	r3, r4
 8003372:	d9fa      	bls.n	800336a <_free_r+0x46>
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	1855      	adds	r5, r2, r1
 8003378:	42a5      	cmp	r5, r4
 800337a:	d10b      	bne.n	8003394 <_free_r+0x70>
 800337c:	6824      	ldr	r4, [r4, #0]
 800337e:	4421      	add	r1, r4
 8003380:	1854      	adds	r4, r2, r1
 8003382:	42a3      	cmp	r3, r4
 8003384:	6011      	str	r1, [r2, #0]
 8003386:	d1e0      	bne.n	800334a <_free_r+0x26>
 8003388:	681c      	ldr	r4, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	6053      	str	r3, [r2, #4]
 800338e:	4421      	add	r1, r4
 8003390:	6011      	str	r1, [r2, #0]
 8003392:	e7da      	b.n	800334a <_free_r+0x26>
 8003394:	d902      	bls.n	800339c <_free_r+0x78>
 8003396:	230c      	movs	r3, #12
 8003398:	6003      	str	r3, [r0, #0]
 800339a:	e7d6      	b.n	800334a <_free_r+0x26>
 800339c:	6825      	ldr	r5, [r4, #0]
 800339e:	1961      	adds	r1, r4, r5
 80033a0:	428b      	cmp	r3, r1
 80033a2:	bf04      	itt	eq
 80033a4:	6819      	ldreq	r1, [r3, #0]
 80033a6:	685b      	ldreq	r3, [r3, #4]
 80033a8:	6063      	str	r3, [r4, #4]
 80033aa:	bf04      	itt	eq
 80033ac:	1949      	addeq	r1, r1, r5
 80033ae:	6021      	streq	r1, [r4, #0]
 80033b0:	6054      	str	r4, [r2, #4]
 80033b2:	e7ca      	b.n	800334a <_free_r+0x26>
 80033b4:	b003      	add	sp, #12
 80033b6:	bd30      	pop	{r4, r5, pc}
 80033b8:	20000554 	.word	0x20000554

080033bc <sbrk_aligned>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4e0e      	ldr	r6, [pc, #56]	; (80033f8 <sbrk_aligned+0x3c>)
 80033c0:	460c      	mov	r4, r1
 80033c2:	6831      	ldr	r1, [r6, #0]
 80033c4:	4605      	mov	r5, r0
 80033c6:	b911      	cbnz	r1, 80033ce <sbrk_aligned+0x12>
 80033c8:	f000 f8bc 	bl	8003544 <_sbrk_r>
 80033cc:	6030      	str	r0, [r6, #0]
 80033ce:	4621      	mov	r1, r4
 80033d0:	4628      	mov	r0, r5
 80033d2:	f000 f8b7 	bl	8003544 <_sbrk_r>
 80033d6:	1c43      	adds	r3, r0, #1
 80033d8:	d00a      	beq.n	80033f0 <sbrk_aligned+0x34>
 80033da:	1cc4      	adds	r4, r0, #3
 80033dc:	f024 0403 	bic.w	r4, r4, #3
 80033e0:	42a0      	cmp	r0, r4
 80033e2:	d007      	beq.n	80033f4 <sbrk_aligned+0x38>
 80033e4:	1a21      	subs	r1, r4, r0
 80033e6:	4628      	mov	r0, r5
 80033e8:	f000 f8ac 	bl	8003544 <_sbrk_r>
 80033ec:	3001      	adds	r0, #1
 80033ee:	d101      	bne.n	80033f4 <sbrk_aligned+0x38>
 80033f0:	f04f 34ff 	mov.w	r4, #4294967295
 80033f4:	4620      	mov	r0, r4
 80033f6:	bd70      	pop	{r4, r5, r6, pc}
 80033f8:	20000558 	.word	0x20000558

080033fc <_malloc_r>:
 80033fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003400:	1ccd      	adds	r5, r1, #3
 8003402:	f025 0503 	bic.w	r5, r5, #3
 8003406:	3508      	adds	r5, #8
 8003408:	2d0c      	cmp	r5, #12
 800340a:	bf38      	it	cc
 800340c:	250c      	movcc	r5, #12
 800340e:	2d00      	cmp	r5, #0
 8003410:	4607      	mov	r7, r0
 8003412:	db01      	blt.n	8003418 <_malloc_r+0x1c>
 8003414:	42a9      	cmp	r1, r5
 8003416:	d905      	bls.n	8003424 <_malloc_r+0x28>
 8003418:	230c      	movs	r3, #12
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	2600      	movs	r6, #0
 800341e:	4630      	mov	r0, r6
 8003420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003424:	4e2e      	ldr	r6, [pc, #184]	; (80034e0 <_malloc_r+0xe4>)
 8003426:	f000 f89d 	bl	8003564 <__malloc_lock>
 800342a:	6833      	ldr	r3, [r6, #0]
 800342c:	461c      	mov	r4, r3
 800342e:	bb34      	cbnz	r4, 800347e <_malloc_r+0x82>
 8003430:	4629      	mov	r1, r5
 8003432:	4638      	mov	r0, r7
 8003434:	f7ff ffc2 	bl	80033bc <sbrk_aligned>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	4604      	mov	r4, r0
 800343c:	d14d      	bne.n	80034da <_malloc_r+0xde>
 800343e:	6834      	ldr	r4, [r6, #0]
 8003440:	4626      	mov	r6, r4
 8003442:	2e00      	cmp	r6, #0
 8003444:	d140      	bne.n	80034c8 <_malloc_r+0xcc>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	4631      	mov	r1, r6
 800344a:	4638      	mov	r0, r7
 800344c:	eb04 0803 	add.w	r8, r4, r3
 8003450:	f000 f878 	bl	8003544 <_sbrk_r>
 8003454:	4580      	cmp	r8, r0
 8003456:	d13a      	bne.n	80034ce <_malloc_r+0xd2>
 8003458:	6821      	ldr	r1, [r4, #0]
 800345a:	3503      	adds	r5, #3
 800345c:	1a6d      	subs	r5, r5, r1
 800345e:	f025 0503 	bic.w	r5, r5, #3
 8003462:	3508      	adds	r5, #8
 8003464:	2d0c      	cmp	r5, #12
 8003466:	bf38      	it	cc
 8003468:	250c      	movcc	r5, #12
 800346a:	4629      	mov	r1, r5
 800346c:	4638      	mov	r0, r7
 800346e:	f7ff ffa5 	bl	80033bc <sbrk_aligned>
 8003472:	3001      	adds	r0, #1
 8003474:	d02b      	beq.n	80034ce <_malloc_r+0xd2>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	442b      	add	r3, r5
 800347a:	6023      	str	r3, [r4, #0]
 800347c:	e00e      	b.n	800349c <_malloc_r+0xa0>
 800347e:	6822      	ldr	r2, [r4, #0]
 8003480:	1b52      	subs	r2, r2, r5
 8003482:	d41e      	bmi.n	80034c2 <_malloc_r+0xc6>
 8003484:	2a0b      	cmp	r2, #11
 8003486:	d916      	bls.n	80034b6 <_malloc_r+0xba>
 8003488:	1961      	adds	r1, r4, r5
 800348a:	42a3      	cmp	r3, r4
 800348c:	6025      	str	r5, [r4, #0]
 800348e:	bf18      	it	ne
 8003490:	6059      	strne	r1, [r3, #4]
 8003492:	6863      	ldr	r3, [r4, #4]
 8003494:	bf08      	it	eq
 8003496:	6031      	streq	r1, [r6, #0]
 8003498:	5162      	str	r2, [r4, r5]
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	4638      	mov	r0, r7
 800349e:	f104 060b 	add.w	r6, r4, #11
 80034a2:	f000 f865 	bl	8003570 <__malloc_unlock>
 80034a6:	f026 0607 	bic.w	r6, r6, #7
 80034aa:	1d23      	adds	r3, r4, #4
 80034ac:	1af2      	subs	r2, r6, r3
 80034ae:	d0b6      	beq.n	800341e <_malloc_r+0x22>
 80034b0:	1b9b      	subs	r3, r3, r6
 80034b2:	50a3      	str	r3, [r4, r2]
 80034b4:	e7b3      	b.n	800341e <_malloc_r+0x22>
 80034b6:	6862      	ldr	r2, [r4, #4]
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	bf0c      	ite	eq
 80034bc:	6032      	streq	r2, [r6, #0]
 80034be:	605a      	strne	r2, [r3, #4]
 80034c0:	e7ec      	b.n	800349c <_malloc_r+0xa0>
 80034c2:	4623      	mov	r3, r4
 80034c4:	6864      	ldr	r4, [r4, #4]
 80034c6:	e7b2      	b.n	800342e <_malloc_r+0x32>
 80034c8:	4634      	mov	r4, r6
 80034ca:	6876      	ldr	r6, [r6, #4]
 80034cc:	e7b9      	b.n	8003442 <_malloc_r+0x46>
 80034ce:	230c      	movs	r3, #12
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	4638      	mov	r0, r7
 80034d4:	f000 f84c 	bl	8003570 <__malloc_unlock>
 80034d8:	e7a1      	b.n	800341e <_malloc_r+0x22>
 80034da:	6025      	str	r5, [r4, #0]
 80034dc:	e7de      	b.n	800349c <_malloc_r+0xa0>
 80034de:	bf00      	nop
 80034e0:	20000554 	.word	0x20000554

080034e4 <_realloc_r>:
 80034e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e8:	4680      	mov	r8, r0
 80034ea:	4614      	mov	r4, r2
 80034ec:	460e      	mov	r6, r1
 80034ee:	b921      	cbnz	r1, 80034fa <_realloc_r+0x16>
 80034f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f4:	4611      	mov	r1, r2
 80034f6:	f7ff bf81 	b.w	80033fc <_malloc_r>
 80034fa:	b92a      	cbnz	r2, 8003508 <_realloc_r+0x24>
 80034fc:	f7ff ff12 	bl	8003324 <_free_r>
 8003500:	4625      	mov	r5, r4
 8003502:	4628      	mov	r0, r5
 8003504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003508:	f000 f838 	bl	800357c <_malloc_usable_size_r>
 800350c:	4284      	cmp	r4, r0
 800350e:	4607      	mov	r7, r0
 8003510:	d802      	bhi.n	8003518 <_realloc_r+0x34>
 8003512:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003516:	d812      	bhi.n	800353e <_realloc_r+0x5a>
 8003518:	4621      	mov	r1, r4
 800351a:	4640      	mov	r0, r8
 800351c:	f7ff ff6e 	bl	80033fc <_malloc_r>
 8003520:	4605      	mov	r5, r0
 8003522:	2800      	cmp	r0, #0
 8003524:	d0ed      	beq.n	8003502 <_realloc_r+0x1e>
 8003526:	42bc      	cmp	r4, r7
 8003528:	4622      	mov	r2, r4
 800352a:	4631      	mov	r1, r6
 800352c:	bf28      	it	cs
 800352e:	463a      	movcs	r2, r7
 8003530:	f7ff fbb8 	bl	8002ca4 <memcpy>
 8003534:	4631      	mov	r1, r6
 8003536:	4640      	mov	r0, r8
 8003538:	f7ff fef4 	bl	8003324 <_free_r>
 800353c:	e7e1      	b.n	8003502 <_realloc_r+0x1e>
 800353e:	4635      	mov	r5, r6
 8003540:	e7df      	b.n	8003502 <_realloc_r+0x1e>
	...

08003544 <_sbrk_r>:
 8003544:	b538      	push	{r3, r4, r5, lr}
 8003546:	4d06      	ldr	r5, [pc, #24]	; (8003560 <_sbrk_r+0x1c>)
 8003548:	2300      	movs	r3, #0
 800354a:	4604      	mov	r4, r0
 800354c:	4608      	mov	r0, r1
 800354e:	602b      	str	r3, [r5, #0]
 8003550:	f7fd fe5a 	bl	8001208 <_sbrk>
 8003554:	1c43      	adds	r3, r0, #1
 8003556:	d102      	bne.n	800355e <_sbrk_r+0x1a>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	b103      	cbz	r3, 800355e <_sbrk_r+0x1a>
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	2000055c 	.word	0x2000055c

08003564 <__malloc_lock>:
 8003564:	4801      	ldr	r0, [pc, #4]	; (800356c <__malloc_lock+0x8>)
 8003566:	f000 b811 	b.w	800358c <__retarget_lock_acquire_recursive>
 800356a:	bf00      	nop
 800356c:	20000560 	.word	0x20000560

08003570 <__malloc_unlock>:
 8003570:	4801      	ldr	r0, [pc, #4]	; (8003578 <__malloc_unlock+0x8>)
 8003572:	f000 b80c 	b.w	800358e <__retarget_lock_release_recursive>
 8003576:	bf00      	nop
 8003578:	20000560 	.word	0x20000560

0800357c <_malloc_usable_size_r>:
 800357c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003580:	1f18      	subs	r0, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	bfbc      	itt	lt
 8003586:	580b      	ldrlt	r3, [r1, r0]
 8003588:	18c0      	addlt	r0, r0, r3
 800358a:	4770      	bx	lr

0800358c <__retarget_lock_acquire_recursive>:
 800358c:	4770      	bx	lr

0800358e <__retarget_lock_release_recursive>:
 800358e:	4770      	bx	lr

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
